
RFID and LCD Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003134  08003134  00013134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  080031a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
  8 .bss          000001a8  200000b0  200000b0  000200b0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000258  20000258  000200b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000189b0  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002d44  00000000  00000000  00038a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000083f3  00000000  00000000  0003b7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00043bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00044788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006423  00000000  00000000  000455d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000044ae  00000000  00000000  0004b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004fea9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002710  00000000  00000000  0004ff28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800311c 	.word	0x0800311c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800311c 	.word	0x0800311c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 fab4 	bl	8000b04 <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 fa6a 	bl	8000a84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000048 	.word	0x20000048
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 fa3b 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f001 ffea 	bl	80025c8 <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000f4 	.word	0x200000f4
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000f4 	.word	0x200000f4

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000648:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800064a:	4604      	mov	r4, r0
 800064c:	2800      	cmp	r0, #0
 800064e:	f000 8099 	beq.w	8000784 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000652:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000654:	b923      	cbnz	r3, 8000660 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000656:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000658:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065c:	f001 ffd4 	bl	8002608 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000662:	06db      	lsls	r3, r3, #27
 8000664:	f100 808c 	bmi.w	8000780 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800066a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800066e:	f023 0302 	bic.w	r3, r3, #2
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <HAL_ADC_Init+0x140>)
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000680:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	6861      	ldr	r1, [r4, #4]
 8000686:	430a      	orrs	r2, r1
 8000688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800068a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800068c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800069c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800069e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006a0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006a2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80006a6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006b0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006be:	4933      	ldr	r1, [pc, #204]	; (800078c <HAL_ADC_Init+0x144>)
 80006c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006c2:	428a      	cmp	r2, r1
 80006c4:	d050      	beq.n	8000768 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c6:	6899      	ldr	r1, [r3, #8]
 80006c8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006cc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006ce:	6899      	ldr	r1, [r3, #8]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006e2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006e4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006e6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006e8:	f022 0202 	bic.w	r2, r2, #2
 80006ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006f6:	6a22      	ldr	r2, [r4, #32]
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d03d      	beq.n	8000778 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006fc:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000704:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800070c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	3901      	subs	r1, #1
 8000712:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000716:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800071a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800071c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000724:	3901      	subs	r1, #1
 8000726:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800072c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800072e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800073c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800073e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000740:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000748:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800074a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800074c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000750:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000752:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000756:	f023 0303 	bic.w	r3, r3, #3
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000760:	2300      	movs	r3, #0
 8000762:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000766:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800076e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000776:	e7b4      	b.n	80006e2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800077e:	e7ca      	b.n	8000716 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000780:	2001      	movs	r0, #1
 8000782:	e7ed      	b.n	8000760 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000784:	2001      	movs	r0, #1
}
 8000786:	bd10      	pop	{r4, pc}
 8000788:	40012300 	.word	0x40012300
 800078c:	0f000001 	.word	0x0f000001

08000790 <HAL_ADC_Start>:
{
 8000790:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000796:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800079a:	2b01      	cmp	r3, #1
 800079c:	d04e      	beq.n	800083c <HAL_ADC_Start+0xac>
 800079e:	2301      	movs	r3, #1
 80007a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80007a4:	6803      	ldr	r3, [r0, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	07d1      	lsls	r1, r2, #31
 80007aa:	d505      	bpl.n	80007b8 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	07d2      	lsls	r2, r2, #31
 80007b0:	d414      	bmi.n	80007dc <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80007b2:	2000      	movs	r0, #0
}
 80007b4:	b002      	add	sp, #8
 80007b6:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80007b8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007ba:	4921      	ldr	r1, [pc, #132]	; (8000840 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80007bc:	f042 0201 	orr.w	r2, r2, #1
 80007c0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <HAL_ADC_Start+0xb4>)
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80007ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80007ce:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80007d0:	9a01      	ldr	r2, [sp, #4]
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	d0ea      	beq.n	80007ac <HAL_ADC_Start+0x1c>
      counter--;
 80007d6:	9a01      	ldr	r2, [sp, #4]
 80007d8:	3a01      	subs	r2, #1
 80007da:	e7f8      	b.n	80007ce <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80007dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80007de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80007e2:	f022 0201 	bic.w	r2, r2, #1
 80007e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007ea:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007f0:	bf41      	itttt	mi
 80007f2:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80007f4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80007f8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80007fc:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000804:	bf1c      	itt	ne
 8000806:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000808:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800080c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800080e:	2200      	movs	r2, #0
 8000810:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000814:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000818:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_ADC_Start+0xb8>)
 800081c:	6852      	ldr	r2, [r2, #4]
 800081e:	06d2      	lsls	r2, r2, #27
 8000820:	d108      	bne.n	8000834 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000822:	6898      	ldr	r0, [r3, #8]
 8000824:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000828:	d1c3      	bne.n	80007b2 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	e7bf      	b.n	80007b4 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <HAL_ADC_Start+0xbc>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d1bb      	bne.n	80007b2 <HAL_ADC_Start+0x22>
 800083a:	e7f2      	b.n	8000822 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 800083c:	2002      	movs	r0, #2
 800083e:	e7b9      	b.n	80007b4 <HAL_ADC_Start+0x24>
 8000840:	000f4240 	.word	0x000f4240
 8000844:	20000048 	.word	0x20000048
 8000848:	40012300 	.word	0x40012300
 800084c:	40012000 	.word	0x40012000

08000850 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000850:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000854:	2b01      	cmp	r3, #1
 8000856:	d017      	beq.n	8000888 <HAL_ADC_Stop+0x38>
 8000858:	2301      	movs	r3, #1
 800085a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800085e:	6803      	ldr	r3, [r0, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	f022 0201 	bic.w	r2, r2, #1
 8000866:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	07db      	lsls	r3, r3, #31
 800086c:	d407      	bmi.n	800087e <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 800086e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000870:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800087e:	2300      	movs	r3, #0
 8000880:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000884:	4618      	mov	r0, r3
 8000886:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000888:	2002      	movs	r0, #2
}
 800088a:	4770      	bx	lr

0800088c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800088c:	6803      	ldr	r3, [r0, #0]
 800088e:	689a      	ldr	r2, [r3, #8]
{
 8000890:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000892:	0556      	lsls	r6, r2, #21
{
 8000894:	4604      	mov	r4, r0
 8000896:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000898:	d50b      	bpl.n	80008b2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800089a:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800089c:	05d8      	lsls	r0, r3, #23
 800089e:	d508      	bpl.n	80008b2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008a2:	f043 0320 	orr.w	r3, r3, #32
 80008a6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80008a8:	2300      	movs	r3, #0
 80008aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80008ae:	2001      	movs	r0, #1
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80008b2:	f7ff feaf 	bl	8000614 <HAL_GetTick>
 80008b6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	0792      	lsls	r2, r2, #30
 80008be:	d50c      	bpl.n	80008da <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008c0:	f06f 0212 	mvn.w	r2, #18
 80008c4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008cc:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80008d4:	d013      	beq.n	80008fe <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80008d6:	2000      	movs	r0, #0
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80008da:	1c69      	adds	r1, r5, #1
 80008dc:	d0ed      	beq.n	80008ba <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008de:	b945      	cbnz	r5, 80008f2 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80008e8:	2300      	movs	r3, #0
 80008ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80008ee:	2003      	movs	r0, #3
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008f2:	f7ff fe8f 	bl	8000614 <HAL_GetTick>
 80008f6:	1b80      	subs	r0, r0, r6
 80008f8:	4285      	cmp	r5, r0
 80008fa:	d2dd      	bcs.n	80008b8 <HAL_ADC_PollForConversion+0x2c>
 80008fc:	e7f0      	b.n	80008e0 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008fe:	69a2      	ldr	r2, [r4, #24]
 8000900:	2a00      	cmp	r2, #0
 8000902:	d1e8      	bne.n	80008d6 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000906:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800090a:	d002      	beq.n	8000912 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800090c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800090e:	055b      	lsls	r3, r3, #21
 8000910:	d4e1      	bmi.n	80008d6 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000918:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800091a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800091c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000920:	d1d9      	bne.n	80008d6 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6423      	str	r3, [r4, #64]	; 0x40
}
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800092c:	6803      	ldr	r3, [r0, #0]
 800092e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000930:	4770      	bx	lr
	...

08000934 <HAL_ADC_ConfigChannel>:
{
 8000934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000936:	2300      	movs	r3, #0
 8000938:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800093a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800093e:	2b01      	cmp	r3, #1
 8000940:	f000 8083 	beq.w	8000a4a <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000944:	680d      	ldr	r5, [r1, #0]
 8000946:	6804      	ldr	r4, [r0, #0]
 8000948:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800094a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800094c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800094e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000952:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000954:	d92a      	bls.n	80009ac <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000956:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800095a:	68e7      	ldr	r7, [r4, #12]
 800095c:	3b1e      	subs	r3, #30
 800095e:	f04f 0e07 	mov.w	lr, #7
 8000962:	fa0e fe03 	lsl.w	lr, lr, r3
 8000966:	ea27 070e 	bic.w	r7, r7, lr
 800096a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800096c:	68e7      	ldr	r7, [r4, #12]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	433b      	orrs	r3, r7
 8000974:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000976:	684a      	ldr	r2, [r1, #4]
 8000978:	2a06      	cmp	r2, #6
 800097a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800097e:	d825      	bhi.n	80009cc <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000980:	4413      	add	r3, r2
 8000982:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000984:	1f59      	subs	r1, r3, #5
 8000986:	231f      	movs	r3, #31
 8000988:	408b      	lsls	r3, r1
 800098a:	ea27 0303 	bic.w	r3, r7, r3
 800098e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000990:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000992:	fa06 f101 	lsl.w	r1, r6, r1
 8000996:	4311      	orrs	r1, r2
 8000998:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <HAL_ADC_ConfigChannel+0x11c>)
 800099c:	429c      	cmp	r4, r3
 800099e:	d034      	beq.n	8000a0a <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80009a0:	2300      	movs	r3, #0
 80009a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80009a6:	4618      	mov	r0, r3
}
 80009a8:	b003      	add	sp, #12
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009ac:	6927      	ldr	r7, [r4, #16]
 80009ae:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80009b2:	f04f 0e07 	mov.w	lr, #7
 80009b6:	fa0e fe03 	lsl.w	lr, lr, r3
 80009ba:	ea27 070e 	bic.w	r7, r7, lr
 80009be:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009c0:	6927      	ldr	r7, [r4, #16]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	433b      	orrs	r3, r7
 80009c8:	6123      	str	r3, [r4, #16]
 80009ca:	e7d4      	b.n	8000976 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80009cc:	2a0c      	cmp	r2, #12
 80009ce:	d80e      	bhi.n	80009ee <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009d0:	4413      	add	r3, r2
 80009d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80009d4:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80009d8:	231f      	movs	r3, #31
 80009da:	4093      	lsls	r3, r2
 80009dc:	ea21 0303 	bic.w	r3, r1, r3
 80009e0:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009e4:	fa06 f202 	lsl.w	r2, r6, r2
 80009e8:	431a      	orrs	r2, r3
 80009ea:	6322      	str	r2, [r4, #48]	; 0x30
 80009ec:	e7d5      	b.n	800099a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009ee:	4413      	add	r3, r2
 80009f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009f2:	3b41      	subs	r3, #65	; 0x41
 80009f4:	221f      	movs	r2, #31
 80009f6:	409a      	lsls	r2, r3
 80009f8:	ea21 0202 	bic.w	r2, r1, r2
 80009fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a00:	fa06 f103 	lsl.w	r1, r6, r3
 8000a04:	4311      	orrs	r1, r2
 8000a06:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000a08:	e7c7      	b.n	800099a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a0a:	2d12      	cmp	r5, #18
 8000a0c:	d104      	bne.n	8000a18 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_ADC_ConfigChannel+0x120>)
 8000a10:	6853      	ldr	r3, [r2, #4]
 8000a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a16:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a18:	f1a5 0310 	sub.w	r3, r5, #16
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d8bf      	bhi.n	80009a0 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a20:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <HAL_ADC_ConfigChannel+0x120>)
 8000a22:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a24:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a2a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a2c:	d1b8      	bne.n	80009a0 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_ADC_ConfigChannel+0x124>)
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_ADC_ConfigChannel+0x128>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a38:	230a      	movs	r3, #10
 8000a3a:	4353      	muls	r3, r2
        counter--;
 8000a3c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000a3e:	9b01      	ldr	r3, [sp, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0ad      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000a44:	9b01      	ldr	r3, [sp, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	e7f8      	b.n	8000a3c <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	e7ac      	b.n	80009a8 <HAL_ADC_ConfigChannel+0x74>
 8000a4e:	bf00      	nop
 8000a50:	40012000 	.word	0x40012000
 8000a54:	40012300 	.word	0x40012300
 8000a58:	20000048 	.word	0x20000048
 8000a5c:	000f4240 	.word	0x000f4240

08000a60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a70:	0200      	lsls	r0, r0, #8
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a7a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a7c:	60d3      	str	r3, [r2, #12]
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b530      	push	{r4, r5, lr}
 8000a88:	68dc      	ldr	r4, [r3, #12]
 8000a8a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	bf28      	it	cs
 8000a98:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 0501 	mov.w	r5, #1
 8000aa0:	fa05 f303 	lsl.w	r3, r5, r3
 8000aa4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa8:	bf8c      	ite	hi
 8000aaa:	3c03      	subhi	r4, #3
 8000aac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aae:	4019      	ands	r1, r3
 8000ab0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab2:	fa05 f404 	lsl.w	r4, r5, r4
 8000ab6:	3c01      	subs	r4, #1
 8000ab8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000aba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	ea42 0201 	orr.w	r2, r2, r1
 8000ac0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	bfaf      	iteee	ge
 8000ac6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	f000 000f 	andlt.w	r0, r0, #15
 8000ace:	4b06      	ldrlt	r3, [pc, #24]	; (8000ae8 <HAL_NVIC_SetPriority+0x64>)
 8000ad0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	bfa5      	ittet	ge
 8000ad4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ad8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ae0:	bd30      	pop	{r4, r5, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	e000ed14 	.word	0xe000ed14

08000aec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aec:	0942      	lsrs	r2, r0, #5
 8000aee:	2301      	movs	r3, #1
 8000af0:	f000 001f 	and.w	r0, r0, #31
 8000af4:	fa03 f000 	lsl.w	r0, r3, r0
 8000af8:	4b01      	ldr	r3, [pc, #4]	; (8000b00 <HAL_NVIC_EnableIRQ+0x14>)
 8000afa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	3801      	subs	r0, #1
 8000b06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0a:	d20a      	bcs.n	8000b22 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b10:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	21f0      	movs	r1, #240	; 0xf0
 8000b14:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b34:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ce8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3c:	4a68      	ldr	r2, [pc, #416]	; (8000ce0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b3e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000cec <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b42:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b44:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b46:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000b4c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b50:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b54:	45b6      	cmp	lr, r6
 8000b56:	f040 80ae 	bne.w	8000cb6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5a:	684c      	ldr	r4, [r1, #4]
 8000b5c:	f024 0710 	bic.w	r7, r4, #16
 8000b60:	2f02      	cmp	r7, #2
 8000b62:	d116      	bne.n	8000b92 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000b64:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b68:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b6c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b70:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b78:	f04f 0c0f 	mov.w	ip, #15
 8000b7c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b80:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b84:	690d      	ldr	r5, [r1, #16]
 8000b86:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b8a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b8e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b92:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b96:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000b98:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b9c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ba0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ba6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000baa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bae:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000bb6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bba:	d811      	bhi.n	8000be0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000bbc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bbe:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc2:	68cf      	ldr	r7, [r1, #12]
 8000bc4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bc8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000bcc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bd4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000bd8:	409f      	lsls	r7, r3
 8000bda:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bde:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000be0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000be2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be4:	688f      	ldr	r7, [r1, #8]
 8000be6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000bea:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000bec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bee:	00e5      	lsls	r5, r4, #3
 8000bf0:	d561      	bpl.n	8000cb6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	f04f 0b00 	mov.w	fp, #0
 8000bf6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000bfa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bfe:	4d39      	ldr	r5, [pc, #228]	; (8000ce4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c04:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c08:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c0c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c10:	9703      	str	r7, [sp, #12]
 8000c12:	9f03      	ldr	r7, [sp, #12]
 8000c14:	f023 0703 	bic.w	r7, r3, #3
 8000c18:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c1c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c20:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c24:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c28:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c2c:	f04f 0e0f 	mov.w	lr, #15
 8000c30:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c34:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c36:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3a:	d043      	beq.n	8000cc4 <HAL_GPIO_Init+0x194>
 8000c3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c40:	42a8      	cmp	r0, r5
 8000c42:	d041      	beq.n	8000cc8 <HAL_GPIO_Init+0x198>
 8000c44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c48:	42a8      	cmp	r0, r5
 8000c4a:	d03f      	beq.n	8000ccc <HAL_GPIO_Init+0x19c>
 8000c4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c50:	42a8      	cmp	r0, r5
 8000c52:	d03d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1a0>
 8000c54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c58:	42a8      	cmp	r0, r5
 8000c5a:	d03b      	beq.n	8000cd4 <HAL_GPIO_Init+0x1a4>
 8000c5c:	4548      	cmp	r0, r9
 8000c5e:	d03b      	beq.n	8000cd8 <HAL_GPIO_Init+0x1a8>
 8000c60:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c64:	42a8      	cmp	r0, r5
 8000c66:	d039      	beq.n	8000cdc <HAL_GPIO_Init+0x1ac>
 8000c68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c6c:	42a8      	cmp	r0, r5
 8000c6e:	bf14      	ite	ne
 8000c70:	2508      	movne	r5, #8
 8000c72:	2507      	moveq	r5, #7
 8000c74:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c78:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c7c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000c7e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c80:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c82:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c86:	bf0c      	ite	eq
 8000c88:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c8a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000c8c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000c8e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c90:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c94:	bf0c      	ite	eq
 8000c96:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c98:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000c9a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c9c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c9e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ca2:	bf0c      	ite	eq
 8000ca4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ca6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000ca8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000caa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cac:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000cae:	bf54      	ite	pl
 8000cb0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000cb2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000cb4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	f47f af44 	bne.w	8000b46 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cbe:	b005      	add	sp, #20
 8000cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc4:	465d      	mov	r5, fp
 8000cc6:	e7d5      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000cc8:	2501      	movs	r5, #1
 8000cca:	e7d3      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000ccc:	2502      	movs	r5, #2
 8000cce:	e7d1      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000cd0:	2503      	movs	r5, #3
 8000cd2:	e7cf      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000cd4:	2504      	movs	r5, #4
 8000cd6:	e7cd      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000cd8:	2505      	movs	r5, #5
 8000cda:	e7cb      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000cdc:	2506      	movs	r5, #6
 8000cde:	e7c9      	b.n	8000c74 <HAL_GPIO_Init+0x144>
 8000ce0:	40013c00 	.word	0x40013c00
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021400 	.word	0x40021400

08000cf0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf0:	b10a      	cbz	r2, 8000cf6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cf2:	6181      	str	r1, [r0, #24]
 8000cf4:	4770      	bx	lr
 8000cf6:	0409      	lsls	r1, r1, #16
 8000cf8:	e7fb      	b.n	8000cf2 <HAL_GPIO_WritePin+0x2>
	...

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d00:	4604      	mov	r4, r0
 8000d02:	b918      	cbnz	r0, 8000d0c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d06:	b002      	add	sp, #8
 8000d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0c:	6803      	ldr	r3, [r0, #0]
 8000d0e:	07dd      	lsls	r5, r3, #31
 8000d10:	d410      	bmi.n	8000d34 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	0798      	lsls	r0, r3, #30
 8000d16:	d458      	bmi.n	8000dca <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	071a      	lsls	r2, r3, #28
 8000d1c:	f100 809a 	bmi.w	8000e54 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	075b      	lsls	r3, r3, #29
 8000d24:	f100 80b8 	bmi.w	8000e98 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d28:	69a2      	ldr	r2, [r4, #24]
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	f040 8119 	bne.w	8000f62 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000d30:	2000      	movs	r0, #0
 8000d32:	e7e8      	b.n	8000d06 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d34:	4ba6      	ldr	r3, [pc, #664]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	f002 020c 	and.w	r2, r2, #12
 8000d3c:	2a04      	cmp	r2, #4
 8000d3e:	d007      	beq.n	8000d50 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d46:	2a08      	cmp	r2, #8
 8000d48:	d10a      	bne.n	8000d60 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	0259      	lsls	r1, r3, #9
 8000d4e:	d507      	bpl.n	8000d60 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d50:	4b9f      	ldr	r3, [pc, #636]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	039a      	lsls	r2, r3, #14
 8000d56:	d5dc      	bpl.n	8000d12 <HAL_RCC_OscConfig+0x16>
 8000d58:	6863      	ldr	r3, [r4, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1d9      	bne.n	8000d12 <HAL_RCC_OscConfig+0x16>
 8000d5e:	e7d1      	b.n	8000d04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	4d9b      	ldr	r5, [pc, #620]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d68:	d111      	bne.n	8000d8e <HAL_RCC_OscConfig+0x92>
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc4f 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	4d96      	ldr	r5, [pc, #600]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	039b      	lsls	r3, r3, #14
 8000d7e:	d4c8      	bmi.n	8000d12 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fc48 	bl	8000614 <HAL_GetTick>
 8000d84:	1b80      	subs	r0, r0, r6
 8000d86:	2864      	cmp	r0, #100	; 0x64
 8000d88:	d9f7      	bls.n	8000d7a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	e7bb      	b.n	8000d06 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d92:	d104      	bne.n	8000d9e <HAL_RCC_OscConfig+0xa2>
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9a:	602b      	str	r3, [r5, #0]
 8000d9c:	e7e5      	b.n	8000d6a <HAL_RCC_OscConfig+0x6e>
 8000d9e:	682a      	ldr	r2, [r5, #0]
 8000da0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000da4:	602a      	str	r2, [r5, #0]
 8000da6:	682a      	ldr	r2, [r5, #0]
 8000da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dac:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1df      	bne.n	8000d72 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000db2:	f7ff fc2f 	bl	8000614 <HAL_GetTick>
 8000db6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	039f      	lsls	r7, r3, #14
 8000dbc:	d5a9      	bpl.n	8000d12 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dbe:	f7ff fc29 	bl	8000614 <HAL_GetTick>
 8000dc2:	1b80      	subs	r0, r0, r6
 8000dc4:	2864      	cmp	r0, #100	; 0x64
 8000dc6:	d9f7      	bls.n	8000db8 <HAL_RCC_OscConfig+0xbc>
 8000dc8:	e7df      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	f012 0f0c 	tst.w	r2, #12
 8000dd2:	d007      	beq.n	8000de4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dda:	2a08      	cmp	r2, #8
 8000ddc:	d111      	bne.n	8000e02 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	025e      	lsls	r6, r3, #9
 8000de2:	d40e      	bmi.n	8000e02 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de4:	4b7a      	ldr	r3, [pc, #488]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	0795      	lsls	r5, r2, #30
 8000dea:	d502      	bpl.n	8000df2 <HAL_RCC_OscConfig+0xf6>
 8000dec:	68e2      	ldr	r2, [r4, #12]
 8000dee:	2a01      	cmp	r2, #1
 8000df0:	d188      	bne.n	8000d04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	6921      	ldr	r1, [r4, #16]
 8000df6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dfa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000dfe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e00:	e78a      	b.n	8000d18 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e02:	68e2      	ldr	r2, [r4, #12]
 8000e04:	4b73      	ldr	r3, [pc, #460]	; (8000fd4 <HAL_RCC_OscConfig+0x2d8>)
 8000e06:	b1b2      	cbz	r2, 8000e36 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc02 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	4d6f      	ldr	r5, [pc, #444]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	0798      	lsls	r0, r3, #30
 8000e18:	d507      	bpl.n	8000e2a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	6922      	ldr	r2, [r4, #16]
 8000e1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e26:	602b      	str	r3, [r5, #0]
 8000e28:	e776      	b.n	8000d18 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fbf3 	bl	8000614 <HAL_GetTick>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	2802      	cmp	r0, #2
 8000e32:	d9ef      	bls.n	8000e14 <HAL_RCC_OscConfig+0x118>
 8000e34:	e7a9      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000e36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff fbec 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3c:	4d64      	ldr	r5, [pc, #400]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	0799      	lsls	r1, r3, #30
 8000e44:	f57f af68 	bpl.w	8000d18 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e48:	f7ff fbe4 	bl	8000614 <HAL_GetTick>
 8000e4c:	1b80      	subs	r0, r0, r6
 8000e4e:	2802      	cmp	r0, #2
 8000e50:	d9f6      	bls.n	8000e40 <HAL_RCC_OscConfig+0x144>
 8000e52:	e79a      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e54:	6962      	ldr	r2, [r4, #20]
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HAL_RCC_OscConfig+0x2dc>)
 8000e58:	b17a      	cbz	r2, 8000e7a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fbd9 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4d5b      	ldr	r5, [pc, #364]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e68:	079f      	lsls	r7, r3, #30
 8000e6a:	f53f af59 	bmi.w	8000d20 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fbd1 	bl	8000614 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f6      	bls.n	8000e66 <HAL_RCC_OscConfig+0x16a>
 8000e78:	e787      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000e7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fbca 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e80:	4d53      	ldr	r5, [pc, #332]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e84:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e86:	0798      	lsls	r0, r3, #30
 8000e88:	f57f af4a 	bpl.w	8000d20 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fbc2 	bl	8000614 <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9f6      	bls.n	8000e84 <HAL_RCC_OscConfig+0x188>
 8000e96:	e778      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e98:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ea0:	d128      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	9201      	str	r2, [sp, #4]
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eb6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	4d48      	ldr	r5, [pc, #288]	; (8000fdc <HAL_RCC_OscConfig+0x2e0>)
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	05d9      	lsls	r1, r3, #23
 8000ebe:	d51b      	bpl.n	8000ef8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	68a3      	ldr	r3, [r4, #8]
 8000ec2:	4d43      	ldr	r5, [pc, #268]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d127      	bne.n	8000f18 <HAL_RCC_OscConfig+0x21c>
 8000ec8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fba0 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	4d3e      	ldr	r5, [pc, #248]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ed6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ede:	079b      	lsls	r3, r3, #30
 8000ee0:	d539      	bpl.n	8000f56 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	f43f af20 	beq.w	8000d28 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee8:	4a39      	ldr	r2, [pc, #228]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000eea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	e719      	b.n	8000d28 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	e7df      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f00:	f7ff fb88 	bl	8000614 <HAL_GetTick>
 8000f04:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f06:	682b      	ldr	r3, [r5, #0]
 8000f08:	05da      	lsls	r2, r3, #23
 8000f0a:	d4d9      	bmi.n	8000ec0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0c:	f7ff fb82 	bl	8000614 <HAL_GetTick>
 8000f10:	1bc0      	subs	r0, r0, r7
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d9f7      	bls.n	8000f06 <HAL_RCC_OscConfig+0x20a>
 8000f16:	e738      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d104      	bne.n	8000f26 <HAL_RCC_OscConfig+0x22a>
 8000f1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	672b      	str	r3, [r5, #112]	; 0x70
 8000f24:	e7d0      	b.n	8000ec8 <HAL_RCC_OscConfig+0x1cc>
 8000f26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f28:	f022 0201 	bic.w	r2, r2, #1
 8000f2c:	672a      	str	r2, [r5, #112]	; 0x70
 8000f2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f30:	f022 0204 	bic.w	r2, r2, #4
 8000f34:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1ca      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb6b 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f46:	0798      	lsls	r0, r3, #30
 8000f48:	d5cb      	bpl.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb63 	bl	8000614 <HAL_GetTick>
 8000f4e:	1bc0      	subs	r0, r0, r7
 8000f50:	4540      	cmp	r0, r8
 8000f52:	d9f7      	bls.n	8000f44 <HAL_RCC_OscConfig+0x248>
 8000f54:	e719      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff fb5d 	bl	8000614 <HAL_GetTick>
 8000f5a:	1bc0      	subs	r0, r0, r7
 8000f5c:	4540      	cmp	r0, r8
 8000f5e:	d9bd      	bls.n	8000edc <HAL_RCC_OscConfig+0x1e0>
 8000f60:	e713      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f62:	4d1b      	ldr	r5, [pc, #108]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
 8000f64:	68ab      	ldr	r3, [r5, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	f43f aeca 	beq.w	8000d04 <HAL_RCC_OscConfig+0x8>
 8000f70:	4e1b      	ldr	r6, [pc, #108]	; (8000fe0 <HAL_RCC_OscConfig+0x2e4>)
 8000f72:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f74:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f76:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f78:	d134      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb4b 	bl	8000614 <HAL_GetTick>
 8000f7e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	0199      	lsls	r1, r3, #6
 8000f84:	d41e      	bmi.n	8000fc4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f86:	6a22      	ldr	r2, [r4, #32]
 8000f88:	69e3      	ldr	r3, [r4, #28]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f8e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f9a:	4c0d      	ldr	r4, [pc, #52]	; (8000fd0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f9c:	0852      	lsrs	r2, r2, #1
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fa4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000faa:	f7ff fb33 	bl	8000614 <HAL_GetTick>
 8000fae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	019a      	lsls	r2, r3, #6
 8000fb4:	f53f aebc 	bmi.w	8000d30 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb8:	f7ff fb2c 	bl	8000614 <HAL_GetTick>
 8000fbc:	1b40      	subs	r0, r0, r5
 8000fbe:	2802      	cmp	r0, #2
 8000fc0:	d9f6      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2b4>
 8000fc2:	e6e2      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fb26 	bl	8000614 <HAL_GetTick>
 8000fc8:	1bc0      	subs	r0, r0, r7
 8000fca:	2802      	cmp	r0, #2
 8000fcc:	d9d8      	bls.n	8000f80 <HAL_RCC_OscConfig+0x284>
 8000fce:	e6dc      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	42470000 	.word	0x42470000
 8000fd8:	42470e80 	.word	0x42470e80
 8000fdc:	40007000 	.word	0x40007000
 8000fe0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb16 	bl	8000614 <HAL_GetTick>
 8000fe8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	f57f ae9f 	bpl.w	8000d30 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fb0f 	bl	8000614 <HAL_GetTick>
 8000ff6:	1b00      	subs	r0, r0, r4
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d9f6      	bls.n	8000fea <HAL_RCC_OscConfig+0x2ee>
 8000ffc:	e6c5      	b.n	8000d8a <HAL_RCC_OscConfig+0x8e>
 8000ffe:	bf00      	nop

08001000 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001000:	4913      	ldr	r1, [pc, #76]	; (8001050 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001002:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001004:	688b      	ldr	r3, [r1, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b04      	cmp	r3, #4
 800100c:	d003      	beq.n	8001016 <HAL_RCC_GetSysClockFreq+0x16>
 800100e:	2b08      	cmp	r3, #8
 8001010:	d003      	beq.n	800101a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001014:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001016:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_RCC_GetSysClockFreq+0x58>)
 8001018:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800101a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800101c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800101e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001020:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001024:	bf14      	ite	ne
 8001026:	480c      	ldrne	r0, [pc, #48]	; (8001058 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001028:	480a      	ldreq	r0, [pc, #40]	; (8001054 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800102a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800102e:	bf18      	it	ne
 8001030:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001032:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001036:	fba1 0100 	umull	r0, r1, r1, r0
 800103a:	f7ff f919 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <HAL_RCC_GetSysClockFreq+0x50>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001046:	3301      	adds	r3, #1
 8001048:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800104a:	fbb0 f0f3 	udiv	r0, r0, r3
 800104e:	bd08      	pop	{r3, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	00f42400 	.word	0x00f42400
 8001058:	007a1200 	.word	0x007a1200

0800105c <HAL_RCC_ClockConfig>:
{
 800105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001060:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001062:	4604      	mov	r4, r0
 8001064:	b910      	cbnz	r0, 800106c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <HAL_RCC_ClockConfig+0x124>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f002 020f 	and.w	r2, r2, #15
 8001074:	428a      	cmp	r2, r1
 8001076:	d328      	bcc.n	80010ca <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001078:	6821      	ldr	r1, [r4, #0]
 800107a:	078f      	lsls	r7, r1, #30
 800107c:	d42d      	bmi.n	80010da <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	07c8      	lsls	r0, r1, #31
 8001080:	d440      	bmi.n	8001104 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <HAL_RCC_ClockConfig+0x124>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f002 020f 	and.w	r2, r2, #15
 800108a:	4295      	cmp	r5, r2
 800108c:	d366      	bcc.n	800115c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	0751      	lsls	r1, r2, #29
 8001092:	d46c      	bmi.n	800116e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	0713      	lsls	r3, r2, #28
 8001096:	d507      	bpl.n	80010a8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001098:	4a3a      	ldr	r2, [pc, #232]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 800109a:	6921      	ldr	r1, [r4, #16]
 800109c:	6893      	ldr	r3, [r2, #8]
 800109e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a8:	f7ff ffaa 	bl	8001000 <HAL_RCC_GetSysClockFreq>
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 80010ae:	4a36      	ldr	r2, [pc, #216]	; (8001188 <HAL_RCC_ClockConfig+0x12c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	40d8      	lsrs	r0, r3
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_RCC_ClockConfig+0x130>)
 80010bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fa5e 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d1c6      	bne.n	8001066 <HAL_RCC_ClockConfig+0xa>
 80010d8:	e7ce      	b.n	8001078 <HAL_RCC_ClockConfig+0x1c>
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e0:	bf1e      	ittt	ne
 80010e2:	689a      	ldrne	r2, [r3, #8]
 80010e4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80010e8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ea:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ec:	bf42      	ittt	mi
 80010ee:	689a      	ldrmi	r2, [r3, #8]
 80010f0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80010f4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	68a0      	ldr	r0, [r4, #8]
 80010fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010fe:	4302      	orrs	r2, r0
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	e7bc      	b.n	800107e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001104:	6862      	ldr	r2, [r4, #4]
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 8001108:	2a01      	cmp	r2, #1
 800110a:	d11d      	bne.n	8001148 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	d0a8      	beq.n	8001066 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001114:	4e1b      	ldr	r6, [pc, #108]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 8001116:	68b3      	ldr	r3, [r6, #8]
 8001118:	f023 0303 	bic.w	r3, r3, #3
 800111c:	4313      	orrs	r3, r2
 800111e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001120:	f7ff fa78 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001124:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001128:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	68b3      	ldr	r3, [r6, #8]
 800112c:	6862      	ldr	r2, [r4, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001136:	d0a4      	beq.n	8001082 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f7ff fa6c 	bl	8000614 <HAL_GetTick>
 800113c:	1bc0      	subs	r0, r0, r7
 800113e:	4540      	cmp	r0, r8
 8001140:	d9f3      	bls.n	800112a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001142:	2003      	movs	r0, #3
}
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001148:	1e91      	subs	r1, r2, #2
 800114a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114e:	d802      	bhi.n	8001156 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001154:	e7dd      	b.n	8001112 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	f013 0f02 	tst.w	r3, #2
 800115a:	e7da      	b.n	8001112 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115c:	b2ea      	uxtb	r2, r5
 800115e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	429d      	cmp	r5, r3
 8001168:	f47f af7d 	bne.w	8001066 <HAL_RCC_ClockConfig+0xa>
 800116c:	e78f      	b.n	800108e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800116e:	4905      	ldr	r1, [pc, #20]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 8001170:	68e0      	ldr	r0, [r4, #12]
 8001172:	688b      	ldr	r3, [r1, #8]
 8001174:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001178:	4303      	orrs	r3, r0
 800117a:	608b      	str	r3, [r1, #8]
 800117c:	e78a      	b.n	8001094 <HAL_RCC_ClockConfig+0x38>
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00
 8001184:	40023800 	.word	0x40023800
 8001188:	0800314a 	.word	0x0800314a
 800118c:	20000048 	.word	0x20000048

08001190 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800119e:	6810      	ldr	r0, [r2, #0]
}
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800
 80011a8:	0800315a 	.word	0x0800315a
 80011ac:	20000048 	.word	0x20000048

080011b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011be:	6810      	ldr	r0, [r2, #0]
}
 80011c0:	40d8      	lsrs	r0, r3
 80011c2:	4770      	bx	lr
 80011c4:	40023800 	.word	0x40023800
 80011c8:	0800315a 	.word	0x0800315a
 80011cc:	20000048 	.word	0x20000048

080011d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d4:	9e06      	ldr	r6, [sp, #24]
 80011d6:	4604      	mov	r4, r0
 80011d8:	4688      	mov	r8, r1
 80011da:	4617      	mov	r7, r2
 80011dc:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	6893      	ldr	r3, [r2, #8]
 80011e2:	ea38 0303 	bics.w	r3, r8, r3
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	429f      	cmp	r7, r3
 80011ee:	d102      	bne.n	80011f6 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80011f0:	2000      	movs	r0, #0
}
 80011f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011f6:	1c6b      	adds	r3, r5, #1
 80011f8:	d0f2      	beq.n	80011e0 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80011fa:	bb55      	cbnz	r5, 8001252 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001204:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001206:	6862      	ldr	r2, [r4, #4]
 8001208:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800120c:	d10a      	bne.n	8001224 <SPI_WaitFlagStateUntilTimeout+0x54>
 800120e:	68a2      	ldr	r2, [r4, #8]
 8001210:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001214:	d002      	beq.n	800121c <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001216:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800121a:	d103      	bne.n	8001224 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001222:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001226:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800122a:	d109      	bne.n	8001240 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001232:	0412      	lsls	r2, r2, #16
 8001234:	0c12      	lsrs	r2, r2, #16
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800123e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001240:	2301      	movs	r3, #1
 8001242:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001246:	2300      	movs	r3, #0
 8001248:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800124c:	2003      	movs	r0, #3
 800124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001252:	f7ff f9df 	bl	8000614 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	4285      	cmp	r5, r0
 800125a:	d8c0      	bhi.n	80011de <SPI_WaitFlagStateUntilTimeout+0xe>
 800125c:	e7ce      	b.n	80011fc <SPI_WaitFlagStateUntilTimeout+0x2c>

0800125e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800125e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001260:	460b      	mov	r3, r1
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	2200      	movs	r2, #0
{
 8001268:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800126a:	f7ff ffb1 	bl	80011d0 <SPI_WaitFlagStateUntilTimeout>
 800126e:	b120      	cbz	r0, 800127a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001270:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001278:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800127a:	b002      	add	sp, #8
 800127c:	bd10      	pop	{r4, pc}

0800127e <HAL_SPI_Init>:
{
 800127e:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001280:	4604      	mov	r4, r0
 8001282:	2800      	cmp	r0, #0
 8001284:	d036      	beq.n	80012f4 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800128a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800128e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001292:	b91b      	cbnz	r3, 800129c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001294:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001298:	f001 f9e8 	bl	800266c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800129c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800129e:	68a0      	ldr	r0, [r4, #8]
 80012a0:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80012a8:	680b      	ldr	r3, [r1, #0]
 80012aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012ae:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	4303      	orrs	r3, r0
 80012b4:	68e0      	ldr	r0, [r4, #12]
 80012b6:	4303      	orrs	r3, r0
 80012b8:	6920      	ldr	r0, [r4, #16]
 80012ba:	4303      	orrs	r3, r0
 80012bc:	6960      	ldr	r0, [r4, #20]
 80012be:	4303      	orrs	r3, r0
 80012c0:	69e0      	ldr	r0, [r4, #28]
 80012c2:	4303      	orrs	r3, r0
 80012c4:	6a20      	ldr	r0, [r4, #32]
 80012c6:	4303      	orrs	r3, r0
 80012c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012ca:	4303      	orrs	r3, r0
 80012cc:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80012d0:	4303      	orrs	r3, r0
 80012d2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80012d4:	0c12      	lsrs	r2, r2, #16
 80012d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012d8:	f002 0204 	and.w	r2, r2, #4
 80012dc:	431a      	orrs	r2, r3
 80012de:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012e0:	69cb      	ldr	r3, [r1, #28]
 80012e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012e6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012e8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80012ea:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012ec:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80012ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80012f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
}
 80012f6:	bd10      	pop	{r4, pc}

080012f8 <HAL_SPI_Transmit>:
{
 80012f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80012fc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80012fe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001302:	2b01      	cmp	r3, #1
{
 8001304:	4604      	mov	r4, r0
 8001306:	460d      	mov	r5, r1
 8001308:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800130a:	f000 809c 	beq.w	8001446 <HAL_SPI_Transmit+0x14e>
 800130e:	2301      	movs	r3, #1
 8001310:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001314:	f7ff f97e 	bl	8000614 <HAL_GetTick>
 8001318:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 800131a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800131e:	b2c0      	uxtb	r0, r0
 8001320:	2801      	cmp	r0, #1
 8001322:	f040 808e 	bne.w	8001442 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8001326:	2d00      	cmp	r5, #0
 8001328:	d04e      	beq.n	80013c8 <HAL_SPI_Transmit+0xd0>
 800132a:	f1b8 0f00 	cmp.w	r8, #0
 800132e:	d04b      	beq.n	80013c8 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001330:	2303      	movs	r3, #3
 8001332:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800133a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800133c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001340:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001342:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001344:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001346:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001348:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800134a:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800134c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001350:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001352:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001356:	bf02      	ittt	eq
 8001358:	681a      	ldreq	r2, [r3, #0]
 800135a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800135e:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001364:	bf5e      	ittt	pl
 8001366:	681a      	ldrpl	r2, [r3, #0]
 8001368:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800136c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800136e:	68e2      	ldr	r2, [r4, #12]
 8001370:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001374:	6862      	ldr	r2, [r4, #4]
 8001376:	d138      	bne.n	80013ea <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001378:	b11a      	cbz	r2, 8001382 <HAL_SPI_Transmit+0x8a>
 800137a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800137c:	b292      	uxth	r2, r2
 800137e:	2a01      	cmp	r2, #1
 8001380:	d106      	bne.n	8001390 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001382:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001386:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001388:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800138a:	3b01      	subs	r3, #1
 800138c:	b29b      	uxth	r3, r3
 800138e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001390:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001392:	b29b      	uxth	r3, r3
 8001394:	b993      	cbnz	r3, 80013bc <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001396:	9700      	str	r7, [sp, #0]
 8001398:	4633      	mov	r3, r6
 800139a:	2201      	movs	r2, #1
 800139c:	2102      	movs	r1, #2
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff16 	bl	80011d0 <SPI_WaitFlagStateUntilTimeout>
 80013a4:	b978      	cbnz	r0, 80013c6 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80013a6:	463a      	mov	r2, r7
 80013a8:	4631      	mov	r1, r6
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ff57 	bl	800125e <SPI_CheckFlag_BSY>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d038      	beq.n	8001426 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013b4:	2320      	movs	r3, #32
 80013b6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
    goto error;
 80013ba:	e005      	b.n	80013c8 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	0790      	lsls	r0, r2, #30
 80013c2:	d4de      	bmi.n	8001382 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80013c4:	b94e      	cbnz	r6, 80013da <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 80013c6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80013ce:	2300      	movs	r3, #0
 80013d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80013d4:	b004      	add	sp, #16
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80013da:	1c71      	adds	r1, r6, #1
 80013dc:	d0d8      	beq.n	8001390 <HAL_SPI_Transmit+0x98>
 80013de:	f7ff f919 	bl	8000614 <HAL_GetTick>
 80013e2:	1bc0      	subs	r0, r0, r7
 80013e4:	4286      	cmp	r6, r0
 80013e6:	d8d3      	bhi.n	8001390 <HAL_SPI_Transmit+0x98>
 80013e8:	e7ed      	b.n	80013c6 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80013ea:	b11a      	cbz	r2, 80013f4 <HAL_SPI_Transmit+0xfc>
 80013ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013ee:	b292      	uxth	r2, r2
 80013f0:	2a01      	cmp	r2, #1
 80013f2:	d106      	bne.n	8001402 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80013f4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80013f8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80013fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001402:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001404:	b29b      	uxth	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0c5      	beq.n	8001396 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	0792      	lsls	r2, r2, #30
 8001410:	d4f0      	bmi.n	80013f4 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001412:	2e00      	cmp	r6, #0
 8001414:	d0d7      	beq.n	80013c6 <HAL_SPI_Transmit+0xce>
 8001416:	1c73      	adds	r3, r6, #1
 8001418:	d0f3      	beq.n	8001402 <HAL_SPI_Transmit+0x10a>
 800141a:	f7ff f8fb 	bl	8000614 <HAL_GetTick>
 800141e:	1bc0      	subs	r0, r0, r7
 8001420:	4286      	cmp	r6, r0
 8001422:	d8ee      	bhi.n	8001402 <HAL_SPI_Transmit+0x10a>
 8001424:	e7cf      	b.n	80013c6 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001426:	68a3      	ldr	r3, [r4, #8]
 8001428:	b933      	cbnz	r3, 8001438 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800142a:	9303      	str	r3, [sp, #12]
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	9203      	str	r2, [sp, #12]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	9303      	str	r3, [sp, #12]
 8001436:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001438:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800143a:	3000      	adds	r0, #0
 800143c:	bf18      	it	ne
 800143e:	2001      	movne	r0, #1
 8001440:	e7c2      	b.n	80013c8 <HAL_SPI_Transmit+0xd0>
 8001442:	2002      	movs	r0, #2
 8001444:	e7c0      	b.n	80013c8 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001446:	2002      	movs	r0, #2
 8001448:	e7c4      	b.n	80013d4 <HAL_SPI_Transmit+0xdc>

0800144a <HAL_SPI_TransmitReceive>:
{
 800144a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800144e:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001450:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001454:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001456:	2b01      	cmp	r3, #1
{
 8001458:	4604      	mov	r4, r0
 800145a:	460d      	mov	r5, r1
 800145c:	4616      	mov	r6, r2
 800145e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001460:	f000 80ed 	beq.w	800163e <HAL_SPI_TransmitReceive+0x1f4>
 8001464:	2301      	movs	r3, #1
 8001466:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800146a:	f7ff f8d3 	bl	8000614 <HAL_GetTick>
  tmp  = hspi->State;
 800146e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001472:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001474:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001476:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001478:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800147a:	d00a      	beq.n	8001492 <HAL_SPI_TransmitReceive+0x48>
 800147c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001480:	f040 80db 	bne.w	800163a <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001484:	68a2      	ldr	r2, [r4, #8]
 8001486:	2a00      	cmp	r2, #0
 8001488:	f040 80d7 	bne.w	800163a <HAL_SPI_TransmitReceive+0x1f0>
 800148c:	2b04      	cmp	r3, #4
 800148e:	f040 80d4 	bne.w	800163a <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001492:	2d00      	cmp	r5, #0
 8001494:	d04e      	beq.n	8001534 <HAL_SPI_TransmitReceive+0xea>
 8001496:	2e00      	cmp	r6, #0
 8001498:	d04c      	beq.n	8001534 <HAL_SPI_TransmitReceive+0xea>
 800149a:	f1b9 0f00 	cmp.w	r9, #0
 800149e:	d049      	beq.n	8001534 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 80014a0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80014a4:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 80014a6:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80014a8:	bf04      	itt	eq
 80014aa:	2305      	moveq	r3, #5
 80014ac:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80014b4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80014b6:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014b8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80014ba:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80014be:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014c2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80014c4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014c8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80014ca:	bf58      	it	pl
 80014cc:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80014ce:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80014d0:	bf58      	it	pl
 80014d2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80014d6:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80014da:	bf58      	it	pl
 80014dc:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80014de:	68e2      	ldr	r2, [r4, #12]
 80014e0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80014e4:	d15d      	bne.n	80015a2 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014e6:	b119      	cbz	r1, 80014f0 <HAL_SPI_TransmitReceive+0xa6>
 80014e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80014ea:	b292      	uxth	r2, r2
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d106      	bne.n	80014fe <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80014f0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80014f4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80014f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80014fe:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001502:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001504:	b29b      	uxth	r3, r3
 8001506:	b9bb      	cbnz	r3, 8001538 <HAL_SPI_TransmitReceive+0xee>
 8001508:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800150a:	b29b      	uxth	r3, r3
 800150c:	b9a3      	cbnz	r3, 8001538 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800150e:	f8cd 8000 	str.w	r8, [sp]
 8001512:	463b      	mov	r3, r7
 8001514:	2201      	movs	r2, #1
 8001516:	2102      	movs	r1, #2
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fe59 	bl	80011d0 <SPI_WaitFlagStateUntilTimeout>
 800151e:	2800      	cmp	r0, #0
 8001520:	d135      	bne.n	800158e <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001522:	4642      	mov	r2, r8
 8001524:	4639      	mov	r1, r7
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fe99 	bl	800125e <SPI_CheckFlag_BSY>
 800152c:	2800      	cmp	r0, #0
 800152e:	d079      	beq.n	8001624 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001530:	2320      	movs	r3, #32
 8001532:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001534:	2001      	movs	r0, #1
 8001536:	e02b      	b.n	8001590 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001538:	f1b9 0f00 	cmp.w	r9, #0
 800153c:	d00f      	beq.n	800155e <HAL_SPI_TransmitReceive+0x114>
 800153e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001540:	b29b      	uxth	r3, r3
 8001542:	b163      	cbz	r3, 800155e <HAL_SPI_TransmitReceive+0x114>
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	0791      	lsls	r1, r2, #30
 800154a:	d508      	bpl.n	800155e <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800154c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001550:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001552:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001554:	3b01      	subs	r3, #1
 8001556:	b29b      	uxth	r3, r3
 8001558:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800155a:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800155e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001560:	b29b      	uxth	r3, r3
 8001562:	b163      	cbz	r3, 800157e <HAL_SPI_TransmitReceive+0x134>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	07d2      	lsls	r2, r2, #31
 800156a:	d508      	bpl.n	800157e <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001572:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001574:	3b01      	subs	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800157a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800157e:	1c78      	adds	r0, r7, #1
 8001580:	d0bf      	beq.n	8001502 <HAL_SPI_TransmitReceive+0xb8>
 8001582:	f7ff f847 	bl	8000614 <HAL_GetTick>
 8001586:	eba0 0008 	sub.w	r0, r0, r8
 800158a:	4287      	cmp	r7, r0
 800158c:	d8b9      	bhi.n	8001502 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800158e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001590:	2301      	movs	r3, #1
 8001592:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001596:	2300      	movs	r3, #0
 8001598:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800159c:	b005      	add	sp, #20
 800159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80015a2:	b119      	cbz	r1, 80015ac <HAL_SPI_TransmitReceive+0x162>
 80015a4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80015a6:	b292      	uxth	r2, r2
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d106      	bne.n	80015ba <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80015ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80015b0:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80015b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80015ba:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b91b      	cbnz	r3, 80015cc <HAL_SPI_TransmitReceive+0x182>
 80015c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0a0      	beq.n	800150e <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80015cc:	f1b9 0f00 	cmp.w	r9, #0
 80015d0:	d00f      	beq.n	80015f2 <HAL_SPI_TransmitReceive+0x1a8>
 80015d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b163      	cbz	r3, 80015f2 <HAL_SPI_TransmitReceive+0x1a8>
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	0791      	lsls	r1, r2, #30
 80015de:	d508      	bpl.n	80015f2 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015e0:	782a      	ldrb	r2, [r5, #0]
 80015e2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80015e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015ec:	3501      	adds	r5, #1
        txallowed = 0U;
 80015ee:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80015f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b163      	cbz	r3, 8001612 <HAL_SPI_TransmitReceive+0x1c8>
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	07d2      	lsls	r2, r2, #31
 80015fe:	d508      	bpl.n	8001612 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001604:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001606:	3b01      	subs	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800160c:	3601      	adds	r6, #1
        txallowed = 1U;
 800160e:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001612:	1c7b      	adds	r3, r7, #1
 8001614:	d0d3      	beq.n	80015be <HAL_SPI_TransmitReceive+0x174>
 8001616:	f7fe fffd 	bl	8000614 <HAL_GetTick>
 800161a:	eba0 0008 	sub.w	r0, r0, r8
 800161e:	4287      	cmp	r7, r0
 8001620:	d8cd      	bhi.n	80015be <HAL_SPI_TransmitReceive+0x174>
 8001622:	e7b4      	b.n	800158e <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001624:	68a3      	ldr	r3, [r4, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1b2      	bne.n	8001590 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	9003      	str	r0, [sp, #12]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	9203      	str	r2, [sp, #12]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	9303      	str	r3, [sp, #12]
 8001636:	9b03      	ldr	r3, [sp, #12]
 8001638:	e7aa      	b.n	8001590 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 800163a:	2002      	movs	r0, #2
 800163c:	e7a8      	b.n	8001590 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800163e:	2002      	movs	r0, #2
 8001640:	e7ac      	b.n	800159c <HAL_SPI_TransmitReceive+0x152>

08001642 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001642:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001646:	2b01      	cmp	r3, #1
{
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800164e:	d01c      	beq.n	800168a <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001650:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001654:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001656:	2201      	movs	r2, #1
 8001658:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 800165c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800165e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001662:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001666:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001668:	680a      	ldr	r2, [r1, #0]
 800166a:	2a40      	cmp	r2, #64	; 0x40
 800166c:	d079      	beq.n	8001762 <HAL_TIM_ConfigClockSource+0x120>
 800166e:	d819      	bhi.n	80016a4 <HAL_TIM_ConfigClockSource+0x62>
 8001670:	2a10      	cmp	r2, #16
 8001672:	f000 8093 	beq.w	800179c <HAL_TIM_ConfigClockSource+0x15a>
 8001676:	d80a      	bhi.n	800168e <HAL_TIM_ConfigClockSource+0x4c>
 8001678:	2a00      	cmp	r2, #0
 800167a:	f000 8089 	beq.w	8001790 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800167e:	2301      	movs	r3, #1
 8001680:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001684:	2300      	movs	r3, #0
 8001686:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800168a:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 800168c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800168e:	2a20      	cmp	r2, #32
 8001690:	f000 808a 	beq.w	80017a8 <HAL_TIM_ConfigClockSource+0x166>
 8001694:	2a30      	cmp	r2, #48	; 0x30
 8001696:	d1f2      	bne.n	800167e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001698:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800169a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800169e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80016a2:	e036      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80016a4:	2a70      	cmp	r2, #112	; 0x70
 80016a6:	d036      	beq.n	8001716 <HAL_TIM_ConfigClockSource+0xd4>
 80016a8:	d81b      	bhi.n	80016e2 <HAL_TIM_ConfigClockSource+0xa0>
 80016aa:	2a50      	cmp	r2, #80	; 0x50
 80016ac:	d042      	beq.n	8001734 <HAL_TIM_ConfigClockSource+0xf2>
 80016ae:	2a60      	cmp	r2, #96	; 0x60
 80016b0:	d1e5      	bne.n	800167e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016b2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80016b4:	684d      	ldr	r5, [r1, #4]
 80016b6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016b8:	f024 0410 	bic.w	r4, r4, #16
 80016bc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016be:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80016c0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016c2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016ce:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80016d2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80016d4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80016d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016dc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80016e0:	e017      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80016e2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016e6:	d011      	beq.n	800170c <HAL_TIM_ConfigClockSource+0xca>
 80016e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016ec:	d1c7      	bne.n	800167e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016ee:	688a      	ldr	r2, [r1, #8]
 80016f0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80016f2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016f4:	68c9      	ldr	r1, [r1, #12]
 80016f6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001700:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001702:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800170a:	e002      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e7b3      	b.n	800167e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001716:	688a      	ldr	r2, [r1, #8]
 8001718:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800171a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800171c:	68c9      	ldr	r1, [r1, #12]
 800171e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001720:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001724:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001728:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800172a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800172c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800172e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001732:	e7ee      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001734:	684c      	ldr	r4, [r1, #4]
 8001736:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001738:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800173a:	6a1d      	ldr	r5, [r3, #32]
 800173c:	f025 0501 	bic.w	r5, r5, #1
 8001740:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001742:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001744:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001748:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800174c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001750:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001754:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001756:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001758:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800175c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001760:	e7d7      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001762:	684c      	ldr	r4, [r1, #4]
 8001764:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001766:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001768:	6a1d      	ldr	r5, [r3, #32]
 800176a:	f025 0501 	bic.w	r5, r5, #1
 800176e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001770:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001772:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001776:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800177a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800177e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001782:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001784:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800178a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800178e:	e7c0      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001790:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001792:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001796:	f042 0207 	orr.w	r2, r2, #7
 800179a:	e7ba      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800179c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800179e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017a2:	f042 0217 	orr.w	r2, r2, #23
 80017a6:	e7b4      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80017a8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017ae:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80017b2:	e7ae      	b.n	8001712 <HAL_TIM_ConfigClockSource+0xd0>

080017b4 <HAL_TIM_OC_DelayElapsedCallback>:
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIM_IC_CaptureCallback>:
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_TriggerCallback>:
 80017ba:	4770      	bx	lr

080017bc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017bc:	6803      	ldr	r3, [r0, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	0791      	lsls	r1, r2, #30
{
 80017c2:	b510      	push	{r4, lr}
 80017c4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c6:	d50e      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	0792      	lsls	r2, r2, #30
 80017cc:	d50b      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ce:	f06f 0202 	mvn.w	r2, #2
 80017d2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017da:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017dc:	d077      	beq.n	80018ce <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80017de:	f7ff ffea 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	2300      	movs	r3, #0
 80017e4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	0750      	lsls	r0, r2, #29
 80017ec:	d510      	bpl.n	8001810 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	0751      	lsls	r1, r2, #29
 80017f2:	d50d      	bpl.n	8001810 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017f4:	f06f 0204 	mvn.w	r2, #4
 80017f8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017fc:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001802:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001804:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001806:	d068      	beq.n	80018da <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001808:	f7ff ffd5 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180c:	2300      	movs	r3, #0
 800180e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	0712      	lsls	r2, r2, #28
 8001816:	d50f      	bpl.n	8001838 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	0710      	lsls	r0, r2, #28
 800181c:	d50c      	bpl.n	8001838 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800181e:	f06f 0208 	mvn.w	r2, #8
 8001822:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001824:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001826:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001828:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800182a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800182c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800182e:	d05a      	beq.n	80018e6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001830:	f7ff ffc1 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001834:	2300      	movs	r3, #0
 8001836:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	06d2      	lsls	r2, r2, #27
 800183e:	d510      	bpl.n	8001862 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	06d0      	lsls	r0, r2, #27
 8001844:	d50d      	bpl.n	8001862 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001846:	f06f 0210 	mvn.w	r2, #16
 800184a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800184c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800184e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001850:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001854:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001856:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001858:	d04b      	beq.n	80018f2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800185a:	f7ff ffac 	bl	80017b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	2300      	movs	r3, #0
 8001860:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	07d1      	lsls	r1, r2, #31
 8001868:	d508      	bpl.n	800187c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	07d2      	lsls	r2, r2, #31
 800186e:	d505      	bpl.n	800187c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001870:	f06f 0201 	mvn.w	r2, #1
 8001874:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001876:	4620      	mov	r0, r4
 8001878:	f000 fb50 	bl	8001f1c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	0610      	lsls	r0, r2, #24
 8001882:	d508      	bpl.n	8001896 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	0611      	lsls	r1, r2, #24
 8001888:	d505      	bpl.n	8001896 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800188a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800188e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001890:	4620      	mov	r0, r4
 8001892:	f000 f8d6 	bl	8001a42 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	0652      	lsls	r2, r2, #25
 800189c:	d508      	bpl.n	80018b0 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	0650      	lsls	r0, r2, #25
 80018a2:	d505      	bpl.n	80018b0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ff85 	bl	80017ba <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	0691      	lsls	r1, r2, #26
 80018b6:	d522      	bpl.n	80018fe <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	0692      	lsls	r2, r2, #26
 80018bc:	d51f      	bpl.n	80018fe <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018ca:	f000 b8b9 	b.w	8001a40 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	f7ff ff71 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff ff70 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018d8:	e783      	b.n	80017e2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	f7ff ff6b 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff ff6a 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018e4:	e792      	b.n	800180c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e6:	f7ff ff65 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff ff64 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018f0:	e7a0      	b.n	8001834 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f2:	f7ff ff5f 	bl	80017b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff ff5e 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80018fc:	e7af      	b.n	800185e <HAL_TIM_IRQHandler+0xa2>
 80018fe:	bd10      	pop	{r4, pc}

08001900 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001900:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001902:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001904:	4290      	cmp	r0, r2
 8001906:	d012      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 8001908:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800190c:	d00f      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 800190e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001912:	4290      	cmp	r0, r2
 8001914:	d00b      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d007      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 8001926:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800192a:	4290      	cmp	r0, r2
 800192c:	d11d      	bne.n	800196a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800192e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001934:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <TIM_Base_SetConfig+0xbc>)
 8001938:	4290      	cmp	r0, r2
 800193a:	d104      	bne.n	8001946 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800193e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001942:	4313      	orrs	r3, r2
 8001944:	e028      	b.n	8001998 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001946:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800194a:	d0f7      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <TIM_Base_SetConfig+0xc0>)
 800194e:	4290      	cmp	r0, r2
 8001950:	d0f4      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001956:	4290      	cmp	r0, r2
 8001958:	d0f0      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 800195a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195e:	4290      	cmp	r0, r2
 8001960:	d0ec      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001962:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001966:	4290      	cmp	r0, r2
 8001968:	d0e8      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 800196a:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <TIM_Base_SetConfig+0xc4>)
 800196c:	4290      	cmp	r0, r2
 800196e:	d0e5      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001974:	4290      	cmp	r0, r2
 8001976:	d0e1      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800197c:	4290      	cmp	r0, r2
 800197e:	d0dd      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001980:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001984:	4290      	cmp	r0, r2
 8001986:	d0d9      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800198c:	4290      	cmp	r0, r2
 800198e:	d0d5      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
 8001990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001994:	4290      	cmp	r0, r2
 8001996:	d0d1      	beq.n	800193c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001998:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800199a:	688b      	ldr	r3, [r1, #8]
 800199c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800199e:	680b      	ldr	r3, [r1, #0]
 80019a0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <TIM_Base_SetConfig+0xbc>)
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d006      	beq.n	80019b6 <TIM_Base_SetConfig+0xb6>
 80019a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ac:	4298      	cmp	r0, r3
 80019ae:	d002      	beq.n	80019b6 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80019b0:	2301      	movs	r3, #1
 80019b2:	6143      	str	r3, [r0, #20]
}
 80019b4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80019b6:	690b      	ldr	r3, [r1, #16]
 80019b8:	6303      	str	r3, [r0, #48]	; 0x30
 80019ba:	e7f9      	b.n	80019b0 <TIM_Base_SetConfig+0xb0>
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40014000 	.word	0x40014000

080019c8 <HAL_TIM_Base_Init>:
{ 
 80019c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019ca:	4604      	mov	r4, r0
 80019cc:	b1a0      	cbz	r0, 80019f8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019d6:	b91b      	cbnz	r3, 80019e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80019dc:	f000 fe7a 	bl	80026d4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019e6:	6820      	ldr	r0, [r4, #0]
 80019e8:	1d21      	adds	r1, r4, #4
 80019ea:	f7ff ff89 	bl	8001900 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80019f4:	2000      	movs	r0, #0
 80019f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
}
 80019fa:	bd10      	pop	{r4, pc}

080019fc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80019fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a00:	2b01      	cmp	r3, #1
{
 8001a02:	b510      	push	{r4, lr}
 8001a04:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001a08:	d018      	beq.n	8001a3c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a0e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001a10:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a12:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a14:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a1a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4322      	orrs	r2, r4
 8001a20:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a28:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001a36:	2300      	movs	r3, #0
 8001a38:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001a3c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <HAL_TIMEx_CommutationCallback>:
 8001a40:	4770      	bx	lr

08001a42 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a42:	4770      	bx	lr

08001a44 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001a48:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a4a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001a4c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a4e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a54:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001a56:	6133      	str	r3, [r6, #16]
{
 8001a58:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a5a:	6883      	ldr	r3, [r0, #8]
 8001a5c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001a5e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a60:	4303      	orrs	r3, r0
 8001a62:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a64:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a68:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a6a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001a72:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001a74:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001a76:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001a7c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a82:	6173      	str	r3, [r6, #20]
 8001a84:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a86:	d17c      	bne.n	8001b82 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a88:	429e      	cmp	r6, r3
 8001a8a:	d003      	beq.n	8001a94 <UART_SetConfig+0x50>
 8001a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a90:	429e      	cmp	r6, r3
 8001a92:	d144      	bne.n	8001b1e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a94:	f7ff fb8c 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001a98:	2519      	movs	r5, #25
 8001a9a:	fb05 f300 	mul.w	r3, r5, r0
 8001a9e:	6860      	ldr	r0, [r4, #4]
 8001aa0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001aa4:	0040      	lsls	r0, r0, #1
 8001aa6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001aaa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ab2:	f7ff fb7d 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001ab6:	6863      	ldr	r3, [r4, #4]
 8001ab8:	4368      	muls	r0, r5
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ac0:	f7ff fb76 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	4368      	muls	r0, r5
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ad2:	fb09 7313 	mls	r3, r9, r3, r7
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	3332      	adds	r3, #50	; 0x32
 8001ada:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001ae4:	f7ff fb64 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001ae8:	6862      	ldr	r2, [r4, #4]
 8001aea:	4368      	muls	r0, r5
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	fbb0 faf2 	udiv	sl, r0, r2
 8001af2:	f7ff fb5d 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001af6:	6863      	ldr	r3, [r4, #4]
 8001af8:	4368      	muls	r0, r5
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b00:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b04:	fb09 a313 	mls	r3, r9, r3, sl
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	3332      	adds	r3, #50	; 0x32
 8001b0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b16:	443b      	add	r3, r7
 8001b18:	60b3      	str	r3, [r6, #8]
 8001b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b1e:	f7ff fb37 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001b22:	2519      	movs	r5, #25
 8001b24:	fb05 f300 	mul.w	r3, r5, r0
 8001b28:	6860      	ldr	r0, [r4, #4]
 8001b2a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b2e:	0040      	lsls	r0, r0, #1
 8001b30:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b3c:	f7ff fb28 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001b40:	6863      	ldr	r3, [r4, #4]
 8001b42:	4368      	muls	r0, r5
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b4a:	f7ff fb21 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	4368      	muls	r0, r5
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b58:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b5c:	fb09 7313 	mls	r3, r9, r3, r7
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	3332      	adds	r3, #50	; 0x32
 8001b64:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b6e:	f7ff fb0f 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001b72:	6862      	ldr	r2, [r4, #4]
 8001b74:	4368      	muls	r0, r5
 8001b76:	0052      	lsls	r2, r2, #1
 8001b78:	fbb0 faf2 	udiv	sl, r0, r2
 8001b7c:	f7ff fb08 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001b80:	e7b9      	b.n	8001af6 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b82:	429e      	cmp	r6, r3
 8001b84:	d002      	beq.n	8001b8c <UART_SetConfig+0x148>
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <UART_SetConfig+0x230>)
 8001b88:	429e      	cmp	r6, r3
 8001b8a:	d140      	bne.n	8001c0e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b8c:	f7ff fb10 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001b90:	6867      	ldr	r7, [r4, #4]
 8001b92:	2519      	movs	r5, #25
 8001b94:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b98:	fb05 f300 	mul.w	r3, r5, r0
 8001b9c:	00bf      	lsls	r7, r7, #2
 8001b9e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ba2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ba6:	011f      	lsls	r7, r3, #4
 8001ba8:	f7ff fb02 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001bac:	6863      	ldr	r3, [r4, #4]
 8001bae:	4368      	muls	r0, r5
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	fbb0 f8f3 	udiv	r8, r0, r3
 8001bb6:	f7ff fafb 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	4368      	muls	r0, r5
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bc8:	fb09 8313 	mls	r3, r9, r3, r8
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	3332      	adds	r3, #50	; 0x32
 8001bd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bd4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001bd8:	f7ff faea 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001bdc:	6862      	ldr	r2, [r4, #4]
 8001bde:	4368      	muls	r0, r5
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	fbb0 faf2 	udiv	sl, r0, r2
 8001be6:	f7ff fae3 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	4368      	muls	r0, r5
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bf8:	fb09 a313 	mls	r3, r9, r3, sl
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	3332      	adds	r3, #50	; 0x32
 8001c00:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	ea43 0308 	orr.w	r3, r3, r8
 8001c0c:	e783      	b.n	8001b16 <UART_SetConfig+0xd2>
 8001c0e:	f7ff fabf 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001c12:	6867      	ldr	r7, [r4, #4]
 8001c14:	2519      	movs	r5, #25
 8001c16:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c1a:	fb05 f300 	mul.w	r3, r5, r0
 8001c1e:	00bf      	lsls	r7, r7, #2
 8001c20:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c24:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c28:	011f      	lsls	r7, r3, #4
 8001c2a:	f7ff fab1 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001c2e:	6863      	ldr	r3, [r4, #4]
 8001c30:	4368      	muls	r0, r5
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c38:	f7ff faaa 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	4368      	muls	r0, r5
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c4a:	fb09 8313 	mls	r3, r9, r3, r8
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	3332      	adds	r3, #50	; 0x32
 8001c52:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c56:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c5a:	f7ff fa99 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001c5e:	6862      	ldr	r2, [r4, #4]
 8001c60:	4368      	muls	r0, r5
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	fbb0 faf2 	udiv	sl, r0, r2
 8001c68:	f7ff fa92 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	e7bd      	b.n	8001bea <UART_SetConfig+0x1a6>
 8001c6e:	bf00      	nop
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400

08001c78 <HAL_UART_Init>:
{
 8001c78:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	b340      	cbz	r0, 8001cd0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c86:	b91b      	cbnz	r3, 8001c90 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c88:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c8c:	f000 fd40 	bl	8002710 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c90:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c92:	2324      	movs	r3, #36	; 0x24
 8001c94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c98:	68d3      	ldr	r3, [r2, #12]
 8001c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c9e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fecf 	bl	8001a44 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cbe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001cc2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001cc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001cca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001cce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cd0:	2001      	movs	r0, #1
}
 8001cd2:	bd10      	pop	{r4, pc}

08001cd4 <writeCommand>:
  {32, 16,  8,  4,  4,  8, 16, 32},
  {62, 61, 59, 55, 47, 31, 47, 55},
  {59, 61, 62, 61, 59, 55, 47, 31},
};

void writeCommand(uint8_t command){
 8001cd4:	b510      	push	{r4, lr}
	//HAL_Delay(1);
	txbuff[0] = command;
 8001cd6:	4c10      	ldr	r4, [pc, #64]	; (8001d18 <writeCommand+0x44>)
	CLR_RS;
 8001cd8:	2200      	movs	r2, #0
	txbuff[0] = command;
 8001cda:	7020      	strb	r0, [r4, #0]
	CLR_RS;
 8001cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <writeCommand+0x48>)
 8001ce2:	f7ff f805 	bl	8000cf0 <HAL_GPIO_WritePin>
	CLR_CS;
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cec:	480b      	ldr	r0, [pc, #44]	; (8001d1c <writeCommand+0x48>)
 8001cee:	f7fe ffff 	bl	8000cf0 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi1, txbuff, 1, 5000) != HAL_OK){
 8001cf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <writeCommand+0x4c>)
 8001cfc:	f7ff fafc 	bl	80012f8 <HAL_SPI_Transmit>
 8001d00:	b108      	cbz	r0, 8001d06 <writeCommand+0x32>
	  Error_Handler();
 8001d02:	f000 f919 	bl	8001f38 <Error_Handler>
	}

	SET_CS;
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <writeCommand+0x48>)
}
 8001d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SET_CS;
 8001d12:	f7fe bfed 	b.w	8000cf0 <HAL_GPIO_WritePin>
 8001d16:	bf00      	nop
 8001d18:	200000f8 	.word	0x200000f8
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	20000118 	.word	0x20000118

08001d24 <writeData>:

void writeData(uint8_t data){
 8001d24:	b510      	push	{r4, lr}
	//HAL_Delay(1);
	txbuff[0] = data;
 8001d26:	4c10      	ldr	r4, [pc, #64]	; (8001d68 <writeData+0x44>)
	SET_RS;
 8001d28:	2201      	movs	r2, #1
	txbuff[0] = data;
 8001d2a:	7020      	strb	r0, [r4, #0]
	SET_RS;
 8001d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <writeData+0x48>)
 8001d32:	f7fe ffdd 	bl	8000cf0 <HAL_GPIO_WritePin>
	CLR_CS;
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <writeData+0x48>)
 8001d3e:	f7fe ffd7 	bl	8000cf0 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi1, txbuff, 1, 5000) != HAL_OK){
 8001d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d46:	2201      	movs	r2, #1
 8001d48:	4621      	mov	r1, r4
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <writeData+0x4c>)
 8001d4c:	f7ff fad4 	bl	80012f8 <HAL_SPI_Transmit>
 8001d50:	b108      	cbz	r0, 8001d56 <writeData+0x32>
	  Error_Handler();
 8001d52:	f000 f8f1 	bl	8001f38 <Error_Handler>
	}

	SET_CS;
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <writeData+0x48>)
}
 8001d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SET_CS;
 8001d62:	f7fe bfc5 	b.w	8000cf0 <HAL_GPIO_WritePin>
 8001d66:	bf00      	nop
 8001d68:	200000f8 	.word	0x200000f8
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	20000118 	.word	0x20000118

08001d74 <Initialize_CFAH2004AP>:

void Initialize_CFAH2004AP(void){
 8001d74:	b508      	push	{r3, lr}
	writeCommand(0x38); // Function set
 8001d76:	2038      	movs	r0, #56	; 0x38
 8001d78:	f7ff ffac 	bl	8001cd4 <writeCommand>
	writeCommand(0x0C); // Display ON/OFF
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	f7ff ffa9 	bl	8001cd4 <writeCommand>
	writeCommand(0x01); // Clear display
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff ffa6 	bl	8001cd4 <writeCommand>
	writeCommand(0x06); // Entry mode set
 8001d88:	2006      	movs	r0, #6
}
 8001d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	writeCommand(0x06); // Entry mode set
 8001d8e:	f7ff bfa1 	b.w	8001cd4 <writeCommand>
	...

08001d94 <Initialize_CGRAM>:

void Initialize_CGRAM(void){
 8001d94:	b570      	push	{r4, r5, r6, lr}
	// etc.

	for (i = 0; i < 8; i ++){
		writeCommand(0x40 + (0x08 * i));
		for (j = 0; j < 8; j ++){
			writeData(CGRAM[i][j]);
 8001d96:	4e09      	ldr	r6, [pc, #36]	; (8001dbc <Initialize_CGRAM+0x28>)
void Initialize_CGRAM(void){
 8001d98:	2400      	movs	r4, #0
		writeCommand(0x40 + (0x08 * i));
 8001d9a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001d9e:	b2c0      	uxtb	r0, r0
 8001da0:	f7ff ff98 	bl	8001cd4 <writeCommand>
 8001da4:	2500      	movs	r5, #0
			writeData(CGRAM[i][j]);
 8001da6:	1973      	adds	r3, r6, r5
 8001da8:	3501      	adds	r5, #1
 8001daa:	5d18      	ldrb	r0, [r3, r4]
 8001dac:	f7ff ffba 	bl	8001d24 <writeData>
		for (j = 0; j < 8; j ++){
 8001db0:	2d08      	cmp	r5, #8
 8001db2:	d1f8      	bne.n	8001da6 <Initialize_CGRAM+0x12>
 8001db4:	3408      	adds	r4, #8
	for (i = 0; i < 8; i ++){
 8001db6:	2c40      	cmp	r4, #64	; 0x40
 8001db8:	d1ef      	bne.n	8001d9a <Initialize_CGRAM+0x6>
		}
	}
}
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <writeString>:

void writeString(uint8_t count, uint8_t *MSG){
 8001dc0:	3801      	subs	r0, #1
 8001dc2:	b538      	push	{r3, r4, r5, lr}
 8001dc4:	1e4d      	subs	r5, r1, #1
 8001dc6:	180c      	adds	r4, r1, r0
	  for(uint8_t i = 0; i<count;i++)
 8001dc8:	42a5      	cmp	r5, r4
 8001dca:	d100      	bne.n	8001dce <writeString+0xe>
	  {
	    writeData(MSG[i]);
	  }
}
 8001dcc:	bd38      	pop	{r3, r4, r5, pc}
	    writeData(MSG[i]);
 8001dce:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001dd2:	f7ff ffa7 	bl	8001d24 <writeData>
 8001dd6:	e7f7      	b.n	8001dc8 <writeString+0x8>

08001dd8 <flip_switch.part.0>:
int adc_val3 = 0;
char str[20];
char in[3];
uint8_t array[9] = {0};

void flip_switch(uint8_t num){
 8001dd8:	b508      	push	{r3, lr}
	if(num == 1){

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
	}
	else if(num == 2){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <flip_switch.part.0+0x20>)
 8001de2:	f7fe ff85 	bl	8000cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <flip_switch.part.0+0x24>)
	}
	else if(num == 3){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);

	}
}
 8001dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001df2:	f7fe bf7d 	b.w	8000cf0 <HAL_GPIO_WritePin>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020c00 	.word	0x40020c00

08001e00 <reset_array>:

void reset_array(void){
 8001e00:	b510      	push	{r4, lr}
	//selection pins
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e02:	4c1a      	ldr	r4, [pc, #104]	; (8001e6c <reset_array+0x6c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	4620      	mov	r0, r4
 8001e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0c:	f7fe ff70 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e10:	4620      	mov	r0, r4
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e18:	f7fe ff6a 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e24:	f7fe ff64 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e28:	4620      	mov	r0, r4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e30:	f7fe ff5e 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e34:	4620      	mov	r0, r4
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3c:	f7fe ff58 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e40:	4620      	mov	r0, r4
 8001e42:	2200      	movs	r2, #0
	//enable pins (active low)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001e44:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4c:	f7fe ff50 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001e50:	4620      	mov	r0, r4
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e58:	f7fe ff4a 	bl	8000cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8001e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001e68:	f7fe bf42 	b.w	8000cf0 <HAL_GPIO_WritePin>
 8001e6c:	40021000 	.word	0x40021000

08001e70 <flip_switch>:
void flip_switch(uint8_t num){
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4604      	mov	r4, r0
	reset_array();
 8001e74:	f7ff ffc4 	bl	8001e00 <reset_array>
	if(num == 1){
 8001e78:	2c01      	cmp	r4, #1
 8001e7a:	d107      	bne.n	8001e8c <flip_switch+0x1c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e82:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <flip_switch+0x38>)
}
 8001e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e88:	f7fe bf32 	b.w	8000cf0 <HAL_GPIO_WritePin>
	else if(num == 2){
 8001e8c:	2c02      	cmp	r4, #2
 8001e8e:	d103      	bne.n	8001e98 <flip_switch+0x28>
}
 8001e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e94:	f7ff bfa0 	b.w	8001dd8 <flip_switch.part.0>
	else if(num == 3){
 8001e98:	2c03      	cmp	r4, #3
 8001e9a:	d103      	bne.n	8001ea4 <flip_switch+0x34>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea2:	e7ee      	b.n	8001e82 <flip_switch+0x12>
 8001ea4:	bd10      	pop	{r4, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40020c00 	.word	0x40020c00

08001eac <LED_On>:

}

/* USER CODE BEGIN 4 */
void LED_On(uint8_t led){
	switch(led){
 8001eac:	2803      	cmp	r0, #3
 8001eae:	d815      	bhi.n	8001edc <LED_On+0x30>
 8001eb0:	e8df f000 	tbb	[pc, r0]
 8001eb4:	100c0802 	.word	0x100c0802
		case LED_GREEN: 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
					break;
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
					break;
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
					break;
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <LED_On+0x34>)
 8001ec0:	f7fe bf16 	b.w	8000cf0 <HAL_GPIO_WritePin>
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eca:	e7f8      	b.n	8001ebe <LED_On+0x12>
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed2:	e7f4      	b.n	8001ebe <LED_On+0x12>
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eda:	e7f0      	b.n	8001ebe <LED_On+0x12>
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40020c00 	.word	0x40020c00

08001ee4 <LED_Off>:
					break;
	}
}

void LED_Off(uint8_t led){
	switch(led){
 8001ee4:	2803      	cmp	r0, #3
 8001ee6:	d815      	bhi.n	8001f14 <LED_Off+0x30>
 8001ee8:	e8df f000 	tbb	[pc, r0]
 8001eec:	100c0802 	.word	0x100c0802
		case LED_GREEN:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
					break;
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
					break;
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
					break;
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <LED_Off+0x34>)
 8001ef8:	f7fe befa 	b.w	8000cf0 <HAL_GPIO_WritePin>
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f02:	e7f8      	b.n	8001ef6 <LED_Off+0x12>
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0a:	e7f4      	b.n	8001ef6 <LED_Off+0x12>
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	e7f0      	b.n	8001ef6 <LED_Off+0x12>
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40020c00 	.word	0x40020c00

08001f1c <HAL_TIM_PeriodElapsedCallback>:
					break;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	count++;
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x14>)
	if(count > 1000000){
 8001f1e:	4905      	ldr	r1, [pc, #20]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x18>)
	count++;
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	3301      	adds	r3, #1
	if(count > 1000000){
 8001f24:	428b      	cmp	r3, r1
		count = 0;
 8001f26:	bfc8      	it	gt
 8001f28:	2300      	movgt	r3, #0
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200000e4 	.word	0x200000e4
 8001f34:	000f4240 	.word	0x000f4240

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b508      	push	{r3, lr}
		case LED_GREEN:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <Error_Handler+0x24>)
 8001f42:	f7fe fed5 	bl	8000cf0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	LED_Off(LED_GREEN);
	LED_Off(LED_BLUE);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7ff ffcc 	bl	8001ee4 <LED_Off>
	LED_Off(LED_ORANGE);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f7ff ffc9 	bl	8001ee4 <LED_Off>
	LED_On(LED_RED);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff ffaa 	bl	8001eac <LED_On>
 8001f58:	e7fe      	b.n	8001f58 <Error_Handler+0x20>
 8001f5a:	bf00      	nop
 8001f5c:	40020c00 	.word	0x40020c00

08001f60 <SystemClock_Config>:
{
 8001f60:	b510      	push	{r4, lr}
 8001f62:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f64:	2230      	movs	r2, #48	; 0x30
 8001f66:	2100      	movs	r1, #0
 8001f68:	a808      	add	r0, sp, #32
 8001f6a:	f000 fca3 	bl	80028b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6e:	2214      	movs	r2, #20
 8001f70:	2100      	movs	r1, #0
 8001f72:	a803      	add	r0, sp, #12
 8001f74:	f000 fc9e 	bl	80028b4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <SystemClock_Config+0x98>)
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f80:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f84:	6411      	str	r1, [r2, #64]	; 0x40
 8001f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f88:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001f8c:	9201      	str	r2, [sp, #4]
 8001f8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <SystemClock_Config+0x9c>)
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	6811      	ldr	r1, [r2, #0]
 8001f96:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001f9a:	6011      	str	r1, [r2, #0]
 8001f9c:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f9e:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa4:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa6:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001faa:	2332      	movs	r3, #50	; 0x32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001fae:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fb2:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fb4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fb8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fba:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fbc:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbe:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fc6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc8:	f7fe fe98 	bl	8000cfc <HAL_RCC_OscConfig>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	b108      	cbz	r0, 8001fd4 <SystemClock_Config+0x74>
    Error_Handler();
 8001fd0:	f7ff ffb2 	bl	8001f38 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001fd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fdc:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001fde:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fe0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001fe2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001fe8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fea:	f7ff f837 	bl	800105c <HAL_RCC_ClockConfig>
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d1ee      	bne.n	8001fd0 <SystemClock_Config+0x70>
}
 8001ff2:	b014      	add	sp, #80	; 0x50
 8001ff4:	bd10      	pop	{r4, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000

08002000 <main>:
{
 8002000:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002004:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002006:	f7fe fadf 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 800200a:	f7ff ffa9 	bl	8001f60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	2214      	movs	r2, #20
 8002010:	2100      	movs	r1, #0
 8002012:	a811      	add	r0, sp, #68	; 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002014:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f000 fc4d 	bl	80028b4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800201a:	4b7f      	ldr	r3, [pc, #508]	; (8002218 <main+0x218>)
 800201c:	9405      	str	r4, [sp, #20]
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002020:	487e      	ldr	r0, [pc, #504]	; (800221c <main+0x21c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002022:	f8df a214 	ldr.w	sl, [pc, #532]	; 8002238 <main+0x238>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	f042 0210 	orr.w	r2, r2, #16
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202e:	f002 0210 	and.w	r2, r2, #16
 8002032:	9205      	str	r2, [sp, #20]
 8002034:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	9406      	str	r4, [sp, #24]
 8002038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203a:	f042 0204 	orr.w	r2, r2, #4
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
 8002040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002042:	f002 0204 	and.w	r2, r2, #4
 8002046:	9206      	str	r2, [sp, #24]
 8002048:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	9407      	str	r4, [sp, #28]
 800204c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002056:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800205a:	9207      	str	r2, [sp, #28]
 800205c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	9408      	str	r4, [sp, #32]
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
 8002068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206a:	f002 0201 	and.w	r2, r2, #1
 800206e:	9208      	str	r2, [sp, #32]
 8002070:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	9409      	str	r4, [sp, #36]	; 0x24
 8002074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002076:	f042 0202 	orr.w	r2, r2, #2
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
 800207c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207e:	f002 0202 	and.w	r2, r2, #2
 8002082:	9209      	str	r2, [sp, #36]	; 0x24
 8002084:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	940a      	str	r4, [sp, #40]	; 0x28
 8002088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002098:	4622      	mov	r2, r4
 800209a:	f64f 4108 	movw	r1, #64520	; 0xfc08
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80020a0:	f7fe fe26 	bl	8000cf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80020a4:	4622      	mov	r2, r4
 80020a6:	f240 3101 	movw	r1, #769	; 0x301
 80020aa:	485d      	ldr	r0, [pc, #372]	; (8002220 <main+0x220>)
 80020ac:	f7fe fe20 	bl	8000cf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020b0:	4622      	mov	r2, r4
 80020b2:	2110      	movs	r1, #16
 80020b4:	485b      	ldr	r0, [pc, #364]	; (8002224 <main+0x224>)
 80020b6:	f7fe fe1b 	bl	8000cf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13 
 80020ba:	4622      	mov	r2, r4
 80020bc:	f24f 3110 	movw	r1, #62224	; 0xf310
 80020c0:	4859      	ldr	r0, [pc, #356]	; (8002228 <main+0x228>)
 80020c2:	f7fe fe15 	bl	8000cf0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80020c8:	f64f 4308 	movw	r3, #64520	; 0xfc08
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020cc:	a911      	add	r1, sp, #68	; 0x44
 80020ce:	4853      	ldr	r0, [pc, #332]	; (800221c <main+0x21c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80020d0:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d8:	f7fe fd2a 	bl	8000b30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	a911      	add	r1, sp, #68	; 0x44
 80020de:	4850      	ldr	r0, [pc, #320]	; (8002220 <main+0x220>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e0:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e4:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f7fe fd20 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f0:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	a911      	add	r1, sp, #68	; 0x44
 80020f4:	484a      	ldr	r0, [pc, #296]	; (8002220 <main+0x220>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020fa:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f7fe fd16 	bl	8000b30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	a911      	add	r1, sp, #68	; 0x44
 8002106:	4847      	ldr	r0, [pc, #284]	; (8002224 <main+0x224>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002108:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002110:	f04f 0810 	mov.w	r8, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f7fe fd0c 	bl	8000b30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	a911      	add	r1, sp, #68	; 0x44
 800211a:	4842      	ldr	r0, [pc, #264]	; (8002224 <main+0x224>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211c:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800211e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f7fe fd03 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800212a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	a911      	add	r1, sp, #68	; 0x44
 800212e:	483f      	ldr	r0, [pc, #252]	; (800222c <main+0x22c>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002130:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f7fe fcfb 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	a911      	add	r1, sp, #68	; 0x44
 8002140:	483a      	ldr	r0, [pc, #232]	; (800222c <main+0x22c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002142:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002146:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f7fe fcf0 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13 
 8002150:	f24f 3310 	movw	r3, #62224	; 0xf310
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002154:	a911      	add	r1, sp, #68	; 0x44
 8002156:	4834      	ldr	r0, [pc, #208]	; (8002228 <main+0x228>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13 
 8002158:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002160:	f7fe fce6 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8002164:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8002168:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216a:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800216c:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216e:	482c      	ldr	r0, [pc, #176]	; (8002220 <main+0x220>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002176:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f7fe fcd8 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002180:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	a911      	add	r1, sp, #68	; 0x44
 8002186:	4826      	ldr	r0, [pc, #152]	; (8002220 <main+0x220>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002188:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800218e:	f44f 7700 	mov.w	r7, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f7fe fccb 	bl	8000b30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	a911      	add	r1, sp, #68	; 0x44
 800219c:	4821      	ldr	r0, [pc, #132]	; (8002224 <main+0x224>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800219e:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a0:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f7fe fcc4 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021b2:	f04f 090a 	mov.w	r9, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	481b      	ldr	r0, [pc, #108]	; (8002224 <main+0x224>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021b8:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021be:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f7fe fcb5 	bl	8000b30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021c6:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c8:	a911      	add	r1, sp, #68	; 0x44
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <main+0x228>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021cc:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d2:	f7fe fcad 	bl	8000b30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d6:	a911      	add	r1, sp, #68	; 0x44
 80021d8:	4810      	ldr	r0, [pc, #64]	; (800221c <main+0x21c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021da:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021dc:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e2:	f7fe fca5 	bl	8000b30 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <main+0x230>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <main+0x234>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ec:	f44f 7682 	mov.w	r6, #260	; 0x104
 80021f0:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80021f4:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f6:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f8:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fa:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021fc:	6187      	str	r7, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80021fe:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002200:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002202:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002204:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002206:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800220a:	f7ff f838 	bl	800127e <HAL_SPI_Init>
 800220e:	4606      	mov	r6, r0
 8002210:	b1a0      	cbz	r0, 800223c <main+0x23c>
    Error_Handler();
 8002212:	f7ff fe91 	bl	8001f38 <Error_Handler>
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40021000 	.word	0x40021000
 8002220:	40020800 	.word	0x40020800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40020400 	.word	0x40020400
 8002230:	20000118 	.word	0x20000118
 8002234:	40013000 	.word	0x40013000
 8002238:	10110000 	.word	0x10110000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223c:	4601      	mov	r1, r0
 800223e:	4642      	mov	r2, r8
 8002240:	a811      	add	r0, sp, #68	; 0x44
 8002242:	f000 fb37 	bl	80028b4 <memset>
  htim3.Instance = TIM3;
 8002246:	4c88      	ldr	r4, [pc, #544]	; (8002468 <main+0x468>)
  htim3.Init.Prescaler = 625-1;
 8002248:	4888      	ldr	r0, [pc, #544]	; (800246c <main+0x46c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	960b      	str	r6, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 625-1;
 800224c:	f44f 731c 	mov.w	r3, #624	; 0x270
 8002250:	e884 0009 	stmia.w	r4, {r0, r3}
  htim3.Init.Period = 10-1;
 8002254:	2309      	movs	r3, #9
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002256:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002258:	960c      	str	r6, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 10-1;
 800225c:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002260:	f7ff fbb2 	bl	80019c8 <HAL_TIM_Base_Init>
 8002264:	2800      	cmp	r0, #0
 8002266:	d1d4      	bne.n	8002212 <main+0x212>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800226c:	a911      	add	r1, sp, #68	; 0x44
 800226e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002272:	f7ff f9e6 	bl	8001642 <HAL_TIM_ConfigClockSource>
 8002276:	2800      	cmp	r0, #0
 8002278:	d1cb      	bne.n	8002212 <main+0x212>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227a:	900b      	str	r0, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227e:	a90b      	add	r1, sp, #44	; 0x2c
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff fbbb 	bl	80019fc <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4606      	mov	r6, r0
 8002288:	2800      	cmp	r0, #0
 800228a:	d1c2      	bne.n	8002212 <main+0x212>
  ADC_ChannelConfTypeDef sConfig = {0};
 800228c:	4601      	mov	r1, r0
 800228e:	4642      	mov	r2, r8
 8002290:	a80d      	add	r0, sp, #52	; 0x34
 8002292:	f000 fb0f 	bl	80028b4 <memset>
  hadc1.Instance = ADC1;
 8002296:	4c76      	ldr	r4, [pc, #472]	; (8002470 <main+0x470>)
 8002298:	4b76      	ldr	r3, [pc, #472]	; (8002474 <main+0x474>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800229a:	60a6      	str	r6, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800229c:	e884 0048 	stmia.w	r4, {r3, r6}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022a0:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022a2:	4b75      	ldr	r3, [pc, #468]	; (8002478 <main+0x478>)
  hadc1.Init.ScanConvMode = DISABLE;
 80022a4:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022a6:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022a8:	6226      	str	r6, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022aa:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ac:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ae:	60e6      	str	r6, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022b0:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022b2:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022b4:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022b6:	f7fe f9c7 	bl	8000648 <HAL_ADC_Init>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d1a9      	bne.n	8002212 <main+0x212>
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022be:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c0:	a90d      	add	r1, sp, #52	; 0x34
 80022c2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80022c4:	950d      	str	r5, [sp, #52]	; 0x34
  sConfig.Rank = 1;
 80022c6:	950e      	str	r5, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022c8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ca:	f7fe fb33 	bl	8000934 <HAL_ADC_ConfigChannel>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d19f      	bne.n	8002212 <main+0x212>
  huart5.Instance = UART5;
 80022d2:	4b6a      	ldr	r3, [pc, #424]	; (800247c <main+0x47c>)
  huart5.Init.BaudRate = 115200;
 80022d4:	496a      	ldr	r1, [pc, #424]	; (8002480 <main+0x480>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	6098      	str	r0, [r3, #8]
  huart5.Init.BaudRate = 115200;
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	e883 0006 	stmia.w	r3, {r1, r2}
  huart5.Init.StopBits = UART_STOPBITS_1;
 80022e0:	60d8      	str	r0, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80022e2:	6118      	str	r0, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022e4:	220c      	movs	r2, #12
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e6:	6198      	str	r0, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80022ea:	4618      	mov	r0, r3
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022ec:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80022ee:	f7ff fcc3 	bl	8001c78 <HAL_UART_Init>
 80022f2:	4606      	mov	r6, r0
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d18c      	bne.n	8002212 <main+0x212>
  nss_inactive();
 80022f8:	f000 f8dc 	bl	80024b4 <nss_inactive>
  CLR_RS;
 80022fc:	4632      	mov	r2, r6
 80022fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002302:	4860      	ldr	r0, [pc, #384]	; (8002484 <main+0x484>)
	  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8002304:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8002494 <main+0x494>
  CLR_RS;
 8002308:	f7fe fcf2 	bl	8000cf0 <HAL_GPIO_WritePin>
  SET_CS;
 800230c:	4639      	mov	r1, r7
 800230e:	462a      	mov	r2, r5
 8002310:	485c      	ldr	r0, [pc, #368]	; (8002484 <main+0x484>)
	  sprintf(str, "       %d %d %d    %d", array[0], array[1], array[2], adc_val1);
 8002312:	4f5d      	ldr	r7, [pc, #372]	; (8002488 <main+0x488>)
  SET_CS;
 8002314:	f7fe fcec 	bl	8000cf0 <HAL_GPIO_WritePin>
  MFRC522_Init();
 8002318:	f000 f932 	bl	8002580 <MFRC522_Init>
  Initialize_CFAH2004AP();
 800231c:	f7ff fd2a 	bl	8001d74 <Initialize_CFAH2004AP>
  Initialize_CGRAM();
 8002320:	f7ff fd38 	bl	8001d94 <Initialize_CGRAM>
  writeCommand(0x1);
 8002324:	4628      	mov	r0, r5
 8002326:	f7ff fcd5 	bl	8001cd4 <writeCommand>
  reset_array();
 800232a:	f7ff fd69 	bl	8001e00 <reset_array>
	  flip_switch(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff fd9e 	bl	8001e70 <flip_switch>
	  HAL_Delay(500);
 8002334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002338:	f7fe f972 	bl	8000620 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800233c:	4620      	mov	r0, r4
 800233e:	f7fe fa27 	bl	8000790 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8002342:	4641      	mov	r1, r8
 8002344:	4620      	mov	r0, r4
 8002346:	f7fe faa1 	bl	800088c <HAL_ADC_PollForConversion>
 800234a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8002498 <main+0x498>
 800234e:	4e4f      	ldr	r6, [pc, #316]	; (800248c <main+0x48c>)
 8002350:	4681      	mov	r9, r0
 8002352:	b950      	cbnz	r0, 800236a <main+0x36a>
		  adc_val1 = HAL_ADC_GetValue(&hadc1);
 8002354:	4620      	mov	r0, r4
 8002356:	f7fe fae9 	bl	800092c <HAL_ADC_GetValue>
		  if(adc_val1 > 2000){
 800235a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  array[0] = 0;
 800235e:	bfd8      	it	le
 8002360:	46a9      	movle	r9, r5
		  adc_val1 = HAL_ADC_GetValue(&hadc1);
 8002362:	f8cb 0000 	str.w	r0, [fp]
			  array[0] = 0;
 8002366:	f886 9000 	strb.w	r9, [r6]
	  HAL_ADC_Stop(&hadc1);
 800236a:	4620      	mov	r0, r4
 800236c:	f7fe fa70 	bl	8000850 <HAL_ADC_Stop>
	reset_array();
 8002370:	f7ff fd46 	bl	8001e00 <reset_array>
 8002374:	f7ff fd30 	bl	8001dd8 <flip_switch.part.0>
	  HAL_Delay(500);
 8002378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800237c:	f7fe f950 	bl	8000620 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8002380:	4620      	mov	r0, r4
 8002382:	f7fe fa05 	bl	8000790 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8002386:	4641      	mov	r1, r8
 8002388:	4620      	mov	r0, r4
 800238a:	f7fe fa7f 	bl	800088c <HAL_ADC_PollForConversion>
 800238e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800249c <main+0x49c>
 8002392:	4681      	mov	r9, r0
 8002394:	b950      	cbnz	r0, 80023ac <main+0x3ac>
		  adc_val2  = HAL_ADC_GetValue(&hadc1);
 8002396:	4620      	mov	r0, r4
 8002398:	f7fe fac8 	bl	800092c <HAL_ADC_GetValue>
		  if(adc_val2 > 2000){
 800239c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  array[1] = 0;
 80023a0:	bfd8      	it	le
 80023a2:	46a9      	movle	r9, r5
		  adc_val2  = HAL_ADC_GetValue(&hadc1);
 80023a4:	f8ca 0000 	str.w	r0, [sl]
			  array[1] = 0;
 80023a8:	f886 9001 	strb.w	r9, [r6, #1]
	  HAL_ADC_Stop(&hadc1);
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7fe fa4f 	bl	8000850 <HAL_ADC_Stop>
	  flip_switch(3);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f7ff fd5c 	bl	8001e70 <flip_switch>
	  HAL_Delay(500);
 80023b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023bc:	f7fe f930 	bl	8000620 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7fe f9e5 	bl	8000790 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 80023c6:	4641      	mov	r1, r8
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7fe fa5f 	bl	800088c <HAL_ADC_PollForConversion>
 80023ce:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80024a0 <main+0x4a0>
 80023d2:	b958      	cbnz	r0, 80023ec <main+0x3ec>
 80023d4:	9003      	str	r0, [sp, #12]
		  adc_val3 = HAL_ADC_GetValue(&hadc1);
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7fe faa8 	bl	800092c <HAL_ADC_GetValue>
		  if(adc_val3 > 2000){
 80023dc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  array[2] = 0;
 80023e0:	9b03      	ldr	r3, [sp, #12]
		  adc_val3 = HAL_ADC_GetValue(&hadc1);
 80023e2:	f8c9 0000 	str.w	r0, [r9]
			  array[2] = 0;
 80023e6:	bfd8      	it	le
 80023e8:	462b      	movle	r3, r5
 80023ea:	70b3      	strb	r3, [r6, #2]
	  HAL_ADC_Stop(&hadc1);
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fa2f 	bl	8000850 <HAL_ADC_Stop>
	  sprintf(str, "       %d %d %d    %d", array[0], array[1], array[2], adc_val1);
 80023f2:	f8db 1000 	ldr.w	r1, [fp]
 80023f6:	7873      	ldrb	r3, [r6, #1]
 80023f8:	7832      	ldrb	r2, [r6, #0]
 80023fa:	9101      	str	r1, [sp, #4]
 80023fc:	78b1      	ldrb	r1, [r6, #2]
 80023fe:	9100      	str	r1, [sp, #0]
 8002400:	4638      	mov	r0, r7
 8002402:	4923      	ldr	r1, [pc, #140]	; (8002490 <main+0x490>)
 8002404:	f000 fa5e 	bl	80028c4 <siprintf>
	  writeCommand(0x1);
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff fc63 	bl	8001cd4 <writeCommand>
	  HAL_Delay(1);
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe f906 	bl	8000620 <HAL_Delay>
	  writeString(20, str);
 8002414:	4639      	mov	r1, r7
 8002416:	2014      	movs	r0, #20
 8002418:	f7ff fcd2 	bl	8001dc0 <writeString>
	  sprintf(str, "       %d %d %d    %d", array[3], array[4], array[5], adc_val2);
 800241c:	f8da 1000 	ldr.w	r1, [sl]
 8002420:	7933      	ldrb	r3, [r6, #4]
 8002422:	78f2      	ldrb	r2, [r6, #3]
 8002424:	9101      	str	r1, [sp, #4]
 8002426:	7971      	ldrb	r1, [r6, #5]
 8002428:	9100      	str	r1, [sp, #0]
 800242a:	4638      	mov	r0, r7
 800242c:	4918      	ldr	r1, [pc, #96]	; (8002490 <main+0x490>)
 800242e:	f000 fa49 	bl	80028c4 <siprintf>
	  writeCommand(LINE_TWO);
 8002432:	20c0      	movs	r0, #192	; 0xc0
 8002434:	f7ff fc4e 	bl	8001cd4 <writeCommand>
	  writeString(20, str);
 8002438:	4639      	mov	r1, r7
 800243a:	2014      	movs	r0, #20
 800243c:	f7ff fcc0 	bl	8001dc0 <writeString>
	  sprintf(str, "       %d %d %d    %d", array[3], array[4], array[5], adc_val3);
 8002440:	f8d9 1000 	ldr.w	r1, [r9]
 8002444:	7933      	ldrb	r3, [r6, #4]
 8002446:	78f2      	ldrb	r2, [r6, #3]
 8002448:	9101      	str	r1, [sp, #4]
 800244a:	7971      	ldrb	r1, [r6, #5]
 800244c:	9100      	str	r1, [sp, #0]
 800244e:	4638      	mov	r0, r7
 8002450:	490f      	ldr	r1, [pc, #60]	; (8002490 <main+0x490>)
 8002452:	f000 fa37 	bl	80028c4 <siprintf>
	  writeCommand(LINE_THREE);
 8002456:	2094      	movs	r0, #148	; 0x94
 8002458:	f7ff fc3c 	bl	8001cd4 <writeCommand>
	  writeString(20, str);
 800245c:	4639      	mov	r1, r7
 800245e:	2014      	movs	r0, #20
 8002460:	f7ff fcae 	bl	8001dc0 <writeString>
	  flip_switch(1);
 8002464:	e763      	b.n	800232e <main+0x32e>
 8002466:	bf00      	nop
 8002468:	20000174 	.word	0x20000174
 800246c:	40000400 	.word	0x40000400
 8002470:	200001f0 	.word	0x200001f0
 8002474:	40012000 	.word	0x40012000
 8002478:	0f000001 	.word	0x0f000001
 800247c:	200001b0 	.word	0x200001b0
 8002480:	40005000 	.word	0x40005000
 8002484:	40020800 	.word	0x40020800
 8002488:	20000238 	.word	0x20000238
 800248c:	200000d8 	.word	0x200000d8
 8002490:	08003134 	.word	0x08003134
 8002494:	000f4240 	.word	0x000f4240
 8002498:	200000cc 	.word	0x200000cc
 800249c:	200000d0 	.word	0x200000d0
 80024a0:	200000d4 	.word	0x200000d4

080024a4 <nss_active>:
#include "main.h"
#include "mfrc522.h"


void nss_active(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2110      	movs	r1, #16
 80024a8:	4801      	ldr	r0, [pc, #4]	; (80024b0 <nss_active+0xc>)
 80024aa:	f7fe bc21 	b.w	8000cf0 <HAL_GPIO_WritePin>
 80024ae:	bf00      	nop
 80024b0:	40020000 	.word	0x40020000

080024b4 <nss_inactive>:
}

void nss_inactive(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	2110      	movs	r1, #16
 80024b8:	4801      	ldr	r0, [pc, #4]	; (80024c0 <nss_inactive+0xc>)
 80024ba:	f7fe bc19 	b.w	8000cf0 <HAL_GPIO_WritePin>
 80024be:	bf00      	nop
 80024c0:	40020000 	.word	0x40020000

080024c4 <MFRC522_WriteRegister>:
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);

	MFRC522_AntennaOn();		//Open the antenna
}

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80024c4:	b510      	push	{r4, lr}
	//Set address and data
	txbuff[0] = (addr << 1) & 0x7E;
 80024c6:	0040      	lsls	r0, r0, #1
 80024c8:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <MFRC522_WriteRegister+0x30>)
 80024ca:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 80024ce:	7020      	strb	r0, [r4, #0]
	txbuff[1] = val;
 80024d0:	7061      	strb	r1, [r4, #1]
	//NSS low
	nss_active();
 80024d2:	f7ff ffe7 	bl	80024a4 <nss_active>
	//Send address and data
	if(HAL_SPI_Transmit(&hspi1, txbuff, 2, 5000) != HAL_OK){
 80024d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80024da:	2202      	movs	r2, #2
 80024dc:	4621      	mov	r1, r4
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MFRC522_WriteRegister+0x34>)
 80024e0:	f7fe ff0a 	bl	80012f8 <HAL_SPI_Transmit>
 80024e4:	b108      	cbz	r0, 80024ea <MFRC522_WriteRegister+0x26>
	  Error_Handler();
 80024e6:	f7ff fd27 	bl	8001f38 <Error_Handler>
	}
	//NSS high
	nss_inactive();
}
 80024ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nss_inactive();
 80024ee:	f7ff bfe1 	b.w	80024b4 <nss_inactive>
 80024f2:	bf00      	nop
 80024f4:	200000f8 	.word	0x200000f8
 80024f8:	20000118 	.word	0x20000118

080024fc <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80024fc:	b513      	push	{r0, r1, r4, lr}
	//set address
	txbuff[0] = ((addr << 1) & 0x7E) | 0x80;
 80024fe:	0040      	lsls	r0, r0, #1
 8002500:	4c0d      	ldr	r4, [pc, #52]	; (8002538 <MFRC522_ReadRegister+0x3c>)
 8002502:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 8002506:	f060 007f 	orn	r0, r0, #127	; 0x7f
	txbuff[1] = 0;
 800250a:	2300      	movs	r3, #0
	txbuff[0] = ((addr << 1) & 0x7E) | 0x80;
 800250c:	7020      	strb	r0, [r4, #0]
	txbuff[1] = 0;
 800250e:	7063      	strb	r3, [r4, #1]
	//NSS low
	nss_active();
 8002510:	f7ff ffc8 	bl	80024a4 <nss_active>
	//send and recieve via SPI
	if(HAL_SPI_TransmitReceive(&hspi1, txbuff, rxbuff, 2, 5000) != HAL_OK){
 8002514:	f241 3388 	movw	r3, #5000	; 0x1388
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <MFRC522_ReadRegister+0x40>)
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <MFRC522_ReadRegister+0x44>)
 800251e:	2302      	movs	r3, #2
 8002520:	4621      	mov	r1, r4
 8002522:	f7fe ff92 	bl	800144a <HAL_SPI_TransmitReceive>
 8002526:	b108      	cbz	r0, 800252c <MFRC522_ReadRegister+0x30>
	  Error_Handler();
 8002528:	f7ff fd06 	bl	8001f38 <Error_Handler>
	}
	//NSS high
	nss_inactive();
 800252c:	f7ff ffc2 	bl	80024b4 <nss_inactive>

	return rxbuff[1];
}
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <MFRC522_ReadRegister+0x40>)
 8002532:	7858      	ldrb	r0, [r3, #1]
 8002534:	b002      	add	sp, #8
 8002536:	bd10      	pop	{r4, pc}
 8002538:	200000f8 	.word	0x200000f8
 800253c:	20000108 	.word	0x20000108
 8002540:	20000118 	.word	0x20000118

08002544 <MFRC522_SetBitMask>:
		}
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8002544:	b538      	push	{r3, r4, r5, lr}
 8002546:	4605      	mov	r5, r0
 8002548:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800254a:	f7ff ffd7 	bl	80024fc <MFRC522_ReadRegister>
 800254e:	ea40 0104 	orr.w	r1, r0, r4
 8002552:	b2c9      	uxtb	r1, r1
 8002554:	4628      	mov	r0, r5
}
 8002556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800255a:	f7ff bfb3 	b.w	80024c4 <MFRC522_WriteRegister>

0800255e <MFRC522_AntennaOn>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
}

void MFRC522_AntennaOn(void) {
 800255e:	b508      	push	{r3, lr}
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8002560:	2014      	movs	r0, #20
 8002562:	f7ff ffcb 	bl	80024fc <MFRC522_ReadRegister>
	if (!(temp & 0x03)) {
 8002566:	0783      	lsls	r3, r0, #30
 8002568:	d105      	bne.n	8002576 <MFRC522_AntennaOn+0x18>
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800256a:	2103      	movs	r1, #3
 800256c:	2014      	movs	r0, #20
	}
}
 800256e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8002572:	f7ff bfe7 	b.w	8002544 <MFRC522_SetBitMask>
 8002576:	bd08      	pop	{r3, pc}

08002578 <MFRC522_Reset>:
void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Reset(void) {
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8002578:	210f      	movs	r1, #15
 800257a:	2001      	movs	r0, #1
 800257c:	f7ff bfa2 	b.w	80024c4 <MFRC522_WriteRegister>

08002580 <MFRC522_Init>:
void MFRC522_Init(void){
 8002580:	b508      	push	{r3, lr}
	MFRC522_Reset();
 8002582:	f7ff fff9 	bl	8002578 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8002586:	218d      	movs	r1, #141	; 0x8d
 8002588:	202a      	movs	r0, #42	; 0x2a
 800258a:	f7ff ff9b 	bl	80024c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800258e:	213e      	movs	r1, #62	; 0x3e
 8002590:	202b      	movs	r0, #43	; 0x2b
 8002592:	f7ff ff97 	bl	80024c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8002596:	211e      	movs	r1, #30
 8002598:	202d      	movs	r0, #45	; 0x2d
 800259a:	f7ff ff93 	bl	80024c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800259e:	2100      	movs	r1, #0
 80025a0:	202c      	movs	r0, #44	; 0x2c
 80025a2:	f7ff ff8f 	bl	80024c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80025a6:	2170      	movs	r1, #112	; 0x70
 80025a8:	2026      	movs	r0, #38	; 0x26
 80025aa:	f7ff ff8b 	bl	80024c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	2015      	movs	r0, #21
 80025b2:	f7ff ff87 	bl	80024c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80025b6:	213d      	movs	r1, #61	; 0x3d
 80025b8:	2011      	movs	r0, #17
 80025ba:	f7ff ff83 	bl	80024c4 <MFRC522_WriteRegister>
}
 80025be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MFRC522_AntennaOn();		//Open the antenna
 80025c2:	f7ff bfcc 	b.w	800255e <MFRC522_AntennaOn>
	...

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_MspInit+0x3c>)
 80025cc:	2100      	movs	r1, #0
 80025ce:	9100      	str	r1, [sp, #0]
 80025d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
 80025d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025de:	9200      	str	r2, [sp, #0]
 80025e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	9101      	str	r1, [sp, #4]
 80025e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025f4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025f8:	f7fe fa32 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fc:	b003      	add	sp, #12
 80025fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002608:	b510      	push	{r4, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	2214      	movs	r2, #20
 8002610:	2100      	movs	r1, #0
 8002612:	a803      	add	r0, sp, #12
 8002614:	f000 f94e 	bl	80028b4 <memset>
  if(hadc->Instance==ADC1)
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_ADC_MspInit+0x5c>)
 800261c:	429a      	cmp	r2, r3
 800261e:	d11e      	bne.n	800265e <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002620:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002624:	2100      	movs	r1, #0
 8002626:	9101      	str	r1, [sp, #4]
 8002628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	480f      	ldr	r0, [pc, #60]	; (8002668 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800262c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
 8002632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002634:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002638:	9201      	str	r2, [sp, #4]
 800263a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	9102      	str	r1, [sp, #8]
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002650:	230e      	movs	r3, #14
 8002652:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002656:	2303      	movs	r3, #3
 8002658:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f7fe fa69 	bl	8000b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800265e:	b008      	add	sp, #32
 8002660:	bd10      	pop	{r4, pc}
 8002662:	bf00      	nop
 8002664:	40012000 	.word	0x40012000
 8002668:	40020000 	.word	0x40020000

0800266c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800266c:	b510      	push	{r4, lr}
 800266e:	4604      	mov	r4, r0
 8002670:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002672:	2214      	movs	r2, #20
 8002674:	2100      	movs	r1, #0
 8002676:	a803      	add	r0, sp, #12
 8002678:	f000 f91c 	bl	80028b4 <memset>
  if(hspi->Instance==SPI1)
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_SPI_MspInit+0x60>)
 8002680:	429a      	cmp	r2, r3
 8002682:	d121      	bne.n	80026c8 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002684:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002688:	2100      	movs	r1, #0
 800268a:	9101      	str	r1, [sp, #4]
 800268c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	4810      	ldr	r0, [pc, #64]	; (80026d0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
 8002696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002698:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800269c:	9201      	str	r2, [sp, #4]
 800269e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	9102      	str	r1, [sp, #8]
 80026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	9302      	str	r3, [sp, #8]
 80026b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026b4:	23e0      	movs	r3, #224	; 0xe0
 80026b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026bc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026c0:	2305      	movs	r3, #5
 80026c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f7fe fa34 	bl	8000b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026c8:	b008      	add	sp, #32
 80026ca:	bd10      	pop	{r4, pc}
 80026cc:	40013000 	.word	0x40013000
 80026d0:	40020000 	.word	0x40020000

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_TIM_Base_MspInit+0x38>)
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d113      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026de:	2200      	movs	r2, #0
 80026e0:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80026e4:	9201      	str	r2, [sp, #4]
 80026e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026e8:	f041 0102 	orr.w	r1, r1, #2
 80026ec:	6419      	str	r1, [r3, #64]	; 0x40
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026f6:	201d      	movs	r0, #29
 80026f8:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026fa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fc:	f7fe f9c2 	bl	8000a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002700:	201d      	movs	r0, #29
 8002702:	f7fe f9f3 	bl	8000aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002706:	b003      	add	sp, #12
 8002708:	f85d fb04 	ldr.w	pc, [sp], #4
 800270c:	40000400 	.word	0x40000400

08002710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4604      	mov	r4, r0
 8002714:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002716:	2214      	movs	r2, #20
 8002718:	2100      	movs	r1, #0
 800271a:	a803      	add	r0, sp, #12
 800271c:	f000 f8ca 	bl	80028b4 <memset>
  if(huart->Instance==UART5)
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_UART_MspInit+0x90>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d139      	bne.n	800279c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002728:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800272c:	2200      	movs	r2, #0
 800272e:	9200      	str	r2, [sp, #0]
 8002730:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002732:	481c      	ldr	r0, [pc, #112]	; (80027a4 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8002734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002738:	6419      	str	r1, [r3, #64]	; 0x40
 800273a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800273c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8002740:	9100      	str	r1, [sp, #0]
 8002742:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	9201      	str	r2, [sp, #4]
 8002746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002748:	f041 0104 	orr.w	r1, r1, #4
 800274c:	6319      	str	r1, [r3, #48]	; 0x30
 800274e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002750:	f001 0104 	and.w	r1, r1, #4
 8002754:	9101      	str	r1, [sp, #4]
 8002756:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002758:	9202      	str	r2, [sp, #8]
 800275a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275c:	f042 0208 	orr.w	r2, r2, #8
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	9302      	str	r3, [sp, #8]
 800276a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002772:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002776:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002778:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800277a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002782:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f7fe f9d4 	bl	8000b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002788:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278a:	a903      	add	r1, sp, #12
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800278e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002792:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002796:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002798:	f7fe f9ca 	bl	8000b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800279c:	b009      	add	sp, #36	; 0x24
 800279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a0:	40005000 	.word	0x40005000
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00

080027ac <NMI_Handler>:
 80027ac:	4770      	bx	lr

080027ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ae:	e7fe      	b.n	80027ae <HardFault_Handler>

080027b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b0:	e7fe      	b.n	80027b0 <MemManage_Handler>

080027b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	e7fe      	b.n	80027b4 <UsageFault_Handler>

080027b6 <SVC_Handler>:
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:
 80027b8:	4770      	bx	lr

080027ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027bc:	f7fd bf1e 	b.w	80005fc <HAL_IncTick>

080027c0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027c0:	4801      	ldr	r0, [pc, #4]	; (80027c8 <TIM3_IRQHandler+0x8>)
 80027c2:	f7fe bffb 	b.w	80017bc <HAL_TIM_IRQHandler>
 80027c6:	bf00      	nop
 80027c8:	20000174 	.word	0x20000174

080027cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	490f      	ldr	r1, [pc, #60]	; (800280c <SystemInit+0x40>)
 80027ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <SystemInit+0x44>)
 80027dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80027e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <SystemInit+0x48>)
 80027f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002800:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002806:	608b      	str	r3, [r1, #8]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	40023800 	.word	0x40023800
 8002814:	24003010 	.word	0x24003010

08002818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800281c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800281e:	e003      	b.n	8002828 <LoopCopyDataInit>

08002820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002826:	3104      	adds	r1, #4

08002828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800282c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002830:	d3f6      	bcc.n	8002820 <CopyDataInit>
  ldr  r2, =_sbss
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002834:	e002      	b.n	800283c <LoopFillZerobss>

08002836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002838:	f842 3b04 	str.w	r3, [r2], #4

0800283c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800283e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002840:	d3f9      	bcc.n	8002836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002842:	f7ff ffc3 	bl	80027cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002846:	f000 f811 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284a:	f7ff fbd9 	bl	8002000 <main>
  bx  lr    
 800284e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002850:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002854:	080031a8 	.word	0x080031a8
  ldr  r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800285c:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8002860:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002864:	20000258 	.word	0x20000258

08002868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>
	...

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4e0d      	ldr	r6, [pc, #52]	; (80028a4 <__libc_init_array+0x38>)
 8002870:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002872:	1ba4      	subs	r4, r4, r6
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	2500      	movs	r5, #0
 8002878:	42a5      	cmp	r5, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	4e0b      	ldr	r6, [pc, #44]	; (80028ac <__libc_init_array+0x40>)
 800287e:	4c0c      	ldr	r4, [pc, #48]	; (80028b0 <__libc_init_array+0x44>)
 8002880:	f000 fc4c 	bl	800311c <_init>
 8002884:	1ba4      	subs	r4, r4, r6
 8002886:	10a4      	asrs	r4, r4, #2
 8002888:	2500      	movs	r5, #0
 800288a:	42a5      	cmp	r5, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002894:	4798      	blx	r3
 8002896:	3501      	adds	r5, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800289e:	4798      	blx	r3
 80028a0:	3501      	adds	r5, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	080031a0 	.word	0x080031a0
 80028a8:	080031a0 	.word	0x080031a0
 80028ac:	080031a0 	.word	0x080031a0
 80028b0:	080031a4 	.word	0x080031a4

080028b4 <memset>:
 80028b4:	4402      	add	r2, r0
 80028b6:	4603      	mov	r3, r0
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <memset+0xa>
 80028bc:	4770      	bx	lr
 80028be:	f803 1b01 	strb.w	r1, [r3], #1
 80028c2:	e7f9      	b.n	80028b8 <memset+0x4>

080028c4 <siprintf>:
 80028c4:	b40e      	push	{r1, r2, r3}
 80028c6:	b500      	push	{lr}
 80028c8:	b09c      	sub	sp, #112	; 0x70
 80028ca:	f44f 7102 	mov.w	r1, #520	; 0x208
 80028ce:	ab1d      	add	r3, sp, #116	; 0x74
 80028d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80028d4:	9002      	str	r0, [sp, #8]
 80028d6:	9006      	str	r0, [sp, #24]
 80028d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028dc:	480a      	ldr	r0, [pc, #40]	; (8002908 <siprintf+0x44>)
 80028de:	9104      	str	r1, [sp, #16]
 80028e0:	9107      	str	r1, [sp, #28]
 80028e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80028ea:	f8ad 1016 	strh.w	r1, [sp, #22]
 80028ee:	6800      	ldr	r0, [r0, #0]
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	a902      	add	r1, sp, #8
 80028f4:	f000 f866 	bl	80029c4 <_svfiprintf_r>
 80028f8:	9b02      	ldr	r3, [sp, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	b01c      	add	sp, #112	; 0x70
 8002900:	f85d eb04 	ldr.w	lr, [sp], #4
 8002904:	b003      	add	sp, #12
 8002906:	4770      	bx	lr
 8002908:	2000004c 	.word	0x2000004c

0800290c <__ssputs_r>:
 800290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002910:	688e      	ldr	r6, [r1, #8]
 8002912:	429e      	cmp	r6, r3
 8002914:	4682      	mov	sl, r0
 8002916:	460c      	mov	r4, r1
 8002918:	4691      	mov	r9, r2
 800291a:	4698      	mov	r8, r3
 800291c:	d835      	bhi.n	800298a <__ssputs_r+0x7e>
 800291e:	898a      	ldrh	r2, [r1, #12]
 8002920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002924:	d031      	beq.n	800298a <__ssputs_r+0x7e>
 8002926:	6825      	ldr	r5, [r4, #0]
 8002928:	6909      	ldr	r1, [r1, #16]
 800292a:	1a6f      	subs	r7, r5, r1
 800292c:	6965      	ldr	r5, [r4, #20]
 800292e:	2302      	movs	r3, #2
 8002930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002934:	fb95 f5f3 	sdiv	r5, r5, r3
 8002938:	f108 0301 	add.w	r3, r8, #1
 800293c:	443b      	add	r3, r7
 800293e:	429d      	cmp	r5, r3
 8002940:	bf38      	it	cc
 8002942:	461d      	movcc	r5, r3
 8002944:	0553      	lsls	r3, r2, #21
 8002946:	d531      	bpl.n	80029ac <__ssputs_r+0xa0>
 8002948:	4629      	mov	r1, r5
 800294a:	f000 fb39 	bl	8002fc0 <_malloc_r>
 800294e:	4606      	mov	r6, r0
 8002950:	b950      	cbnz	r0, 8002968 <__ssputs_r+0x5c>
 8002952:	230c      	movs	r3, #12
 8002954:	f8ca 3000 	str.w	r3, [sl]
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295e:	81a3      	strh	r3, [r4, #12]
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002968:	463a      	mov	r2, r7
 800296a:	6921      	ldr	r1, [r4, #16]
 800296c:	f000 fab4 	bl	8002ed8 <memcpy>
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297a:	81a3      	strh	r3, [r4, #12]
 800297c:	6126      	str	r6, [r4, #16]
 800297e:	6165      	str	r5, [r4, #20]
 8002980:	443e      	add	r6, r7
 8002982:	1bed      	subs	r5, r5, r7
 8002984:	6026      	str	r6, [r4, #0]
 8002986:	60a5      	str	r5, [r4, #8]
 8002988:	4646      	mov	r6, r8
 800298a:	4546      	cmp	r6, r8
 800298c:	bf28      	it	cs
 800298e:	4646      	movcs	r6, r8
 8002990:	4632      	mov	r2, r6
 8002992:	4649      	mov	r1, r9
 8002994:	6820      	ldr	r0, [r4, #0]
 8002996:	f000 faaa 	bl	8002eee <memmove>
 800299a:	68a3      	ldr	r3, [r4, #8]
 800299c:	1b9b      	subs	r3, r3, r6
 800299e:	60a3      	str	r3, [r4, #8]
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	441e      	add	r6, r3
 80029a4:	6026      	str	r6, [r4, #0]
 80029a6:	2000      	movs	r0, #0
 80029a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ac:	462a      	mov	r2, r5
 80029ae:	f000 fb65 	bl	800307c <_realloc_r>
 80029b2:	4606      	mov	r6, r0
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d1e1      	bne.n	800297c <__ssputs_r+0x70>
 80029b8:	6921      	ldr	r1, [r4, #16]
 80029ba:	4650      	mov	r0, sl
 80029bc:	f000 fab2 	bl	8002f24 <_free_r>
 80029c0:	e7c7      	b.n	8002952 <__ssputs_r+0x46>
	...

080029c4 <_svfiprintf_r>:
 80029c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c8:	b09d      	sub	sp, #116	; 0x74
 80029ca:	4680      	mov	r8, r0
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	898b      	ldrh	r3, [r1, #12]
 80029d0:	061c      	lsls	r4, r3, #24
 80029d2:	460d      	mov	r5, r1
 80029d4:	4616      	mov	r6, r2
 80029d6:	d50f      	bpl.n	80029f8 <_svfiprintf_r+0x34>
 80029d8:	690b      	ldr	r3, [r1, #16]
 80029da:	b96b      	cbnz	r3, 80029f8 <_svfiprintf_r+0x34>
 80029dc:	2140      	movs	r1, #64	; 0x40
 80029de:	f000 faef 	bl	8002fc0 <_malloc_r>
 80029e2:	6028      	str	r0, [r5, #0]
 80029e4:	6128      	str	r0, [r5, #16]
 80029e6:	b928      	cbnz	r0, 80029f4 <_svfiprintf_r+0x30>
 80029e8:	230c      	movs	r3, #12
 80029ea:	f8c8 3000 	str.w	r3, [r8]
 80029ee:	f04f 30ff 	mov.w	r0, #4294967295
 80029f2:	e0c5      	b.n	8002b80 <_svfiprintf_r+0x1bc>
 80029f4:	2340      	movs	r3, #64	; 0x40
 80029f6:	616b      	str	r3, [r5, #20]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9309      	str	r3, [sp, #36]	; 0x24
 80029fc:	2320      	movs	r3, #32
 80029fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a02:	2330      	movs	r3, #48	; 0x30
 8002a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a08:	f04f 0b01 	mov.w	fp, #1
 8002a0c:	4637      	mov	r7, r6
 8002a0e:	463c      	mov	r4, r7
 8002a10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d13c      	bne.n	8002a92 <_svfiprintf_r+0xce>
 8002a18:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a1c:	d00b      	beq.n	8002a36 <_svfiprintf_r+0x72>
 8002a1e:	4653      	mov	r3, sl
 8002a20:	4632      	mov	r2, r6
 8002a22:	4629      	mov	r1, r5
 8002a24:	4640      	mov	r0, r8
 8002a26:	f7ff ff71 	bl	800290c <__ssputs_r>
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	f000 80a3 	beq.w	8002b76 <_svfiprintf_r+0x1b2>
 8002a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a32:	4453      	add	r3, sl
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
 8002a36:	783b      	ldrb	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 809c 	beq.w	8002b76 <_svfiprintf_r+0x1b2>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	9304      	str	r3, [sp, #16]
 8002a46:	9307      	str	r3, [sp, #28]
 8002a48:	9205      	str	r2, [sp, #20]
 8002a4a:	9306      	str	r3, [sp, #24]
 8002a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a50:	931a      	str	r3, [sp, #104]	; 0x68
 8002a52:	2205      	movs	r2, #5
 8002a54:	7821      	ldrb	r1, [r4, #0]
 8002a56:	4850      	ldr	r0, [pc, #320]	; (8002b98 <_svfiprintf_r+0x1d4>)
 8002a58:	f7fd fbba 	bl	80001d0 <memchr>
 8002a5c:	1c67      	adds	r7, r4, #1
 8002a5e:	9b04      	ldr	r3, [sp, #16]
 8002a60:	b9d8      	cbnz	r0, 8002a9a <_svfiprintf_r+0xd6>
 8002a62:	06d9      	lsls	r1, r3, #27
 8002a64:	bf44      	itt	mi
 8002a66:	2220      	movmi	r2, #32
 8002a68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a6c:	071a      	lsls	r2, r3, #28
 8002a6e:	bf44      	itt	mi
 8002a70:	222b      	movmi	r2, #43	; 0x2b
 8002a72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a76:	7822      	ldrb	r2, [r4, #0]
 8002a78:	2a2a      	cmp	r2, #42	; 0x2a
 8002a7a:	d016      	beq.n	8002aaa <_svfiprintf_r+0xe6>
 8002a7c:	9a07      	ldr	r2, [sp, #28]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	200a      	movs	r0, #10
 8002a82:	4627      	mov	r7, r4
 8002a84:	3401      	adds	r4, #1
 8002a86:	783b      	ldrb	r3, [r7, #0]
 8002a88:	3b30      	subs	r3, #48	; 0x30
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	d951      	bls.n	8002b32 <_svfiprintf_r+0x16e>
 8002a8e:	b1c9      	cbz	r1, 8002ac4 <_svfiprintf_r+0x100>
 8002a90:	e011      	b.n	8002ab6 <_svfiprintf_r+0xf2>
 8002a92:	2b25      	cmp	r3, #37	; 0x25
 8002a94:	d0c0      	beq.n	8002a18 <_svfiprintf_r+0x54>
 8002a96:	4627      	mov	r7, r4
 8002a98:	e7b9      	b.n	8002a0e <_svfiprintf_r+0x4a>
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <_svfiprintf_r+0x1d4>)
 8002a9c:	1a80      	subs	r0, r0, r2
 8002a9e:	fa0b f000 	lsl.w	r0, fp, r0
 8002aa2:	4318      	orrs	r0, r3
 8002aa4:	9004      	str	r0, [sp, #16]
 8002aa6:	463c      	mov	r4, r7
 8002aa8:	e7d3      	b.n	8002a52 <_svfiprintf_r+0x8e>
 8002aaa:	9a03      	ldr	r2, [sp, #12]
 8002aac:	1d11      	adds	r1, r2, #4
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	9103      	str	r1, [sp, #12]
 8002ab2:	2a00      	cmp	r2, #0
 8002ab4:	db01      	blt.n	8002aba <_svfiprintf_r+0xf6>
 8002ab6:	9207      	str	r2, [sp, #28]
 8002ab8:	e004      	b.n	8002ac4 <_svfiprintf_r+0x100>
 8002aba:	4252      	negs	r2, r2
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	9207      	str	r2, [sp, #28]
 8002ac2:	9304      	str	r3, [sp, #16]
 8002ac4:	783b      	ldrb	r3, [r7, #0]
 8002ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ac8:	d10e      	bne.n	8002ae8 <_svfiprintf_r+0x124>
 8002aca:	787b      	ldrb	r3, [r7, #1]
 8002acc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ace:	f107 0101 	add.w	r1, r7, #1
 8002ad2:	d132      	bne.n	8002b3a <_svfiprintf_r+0x176>
 8002ad4:	9b03      	ldr	r3, [sp, #12]
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	9203      	str	r2, [sp, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bfb8      	it	lt
 8002ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ae4:	3702      	adds	r7, #2
 8002ae6:	9305      	str	r3, [sp, #20]
 8002ae8:	4c2c      	ldr	r4, [pc, #176]	; (8002b9c <_svfiprintf_r+0x1d8>)
 8002aea:	7839      	ldrb	r1, [r7, #0]
 8002aec:	2203      	movs	r2, #3
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7fd fb6e 	bl	80001d0 <memchr>
 8002af4:	b138      	cbz	r0, 8002b06 <_svfiprintf_r+0x142>
 8002af6:	2340      	movs	r3, #64	; 0x40
 8002af8:	1b00      	subs	r0, r0, r4
 8002afa:	fa03 f000 	lsl.w	r0, r3, r0
 8002afe:	9b04      	ldr	r3, [sp, #16]
 8002b00:	4303      	orrs	r3, r0
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	3701      	adds	r7, #1
 8002b06:	7839      	ldrb	r1, [r7, #0]
 8002b08:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <_svfiprintf_r+0x1dc>)
 8002b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b0e:	2206      	movs	r2, #6
 8002b10:	1c7e      	adds	r6, r7, #1
 8002b12:	f7fd fb5d 	bl	80001d0 <memchr>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d035      	beq.n	8002b86 <_svfiprintf_r+0x1c2>
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <_svfiprintf_r+0x1e0>)
 8002b1c:	b9fb      	cbnz	r3, 8002b5e <_svfiprintf_r+0x19a>
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	3307      	adds	r3, #7
 8002b22:	f023 0307 	bic.w	r3, r3, #7
 8002b26:	3308      	adds	r3, #8
 8002b28:	9303      	str	r3, [sp, #12]
 8002b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b2c:	444b      	add	r3, r9
 8002b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b30:	e76c      	b.n	8002a0c <_svfiprintf_r+0x48>
 8002b32:	fb00 3202 	mla	r2, r0, r2, r3
 8002b36:	2101      	movs	r1, #1
 8002b38:	e7a3      	b.n	8002a82 <_svfiprintf_r+0xbe>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9305      	str	r3, [sp, #20]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	240a      	movs	r4, #10
 8002b42:	460f      	mov	r7, r1
 8002b44:	3101      	adds	r1, #1
 8002b46:	783a      	ldrb	r2, [r7, #0]
 8002b48:	3a30      	subs	r2, #48	; 0x30
 8002b4a:	2a09      	cmp	r2, #9
 8002b4c:	d903      	bls.n	8002b56 <_svfiprintf_r+0x192>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0ca      	beq.n	8002ae8 <_svfiprintf_r+0x124>
 8002b52:	9005      	str	r0, [sp, #20]
 8002b54:	e7c8      	b.n	8002ae8 <_svfiprintf_r+0x124>
 8002b56:	fb04 2000 	mla	r0, r4, r0, r2
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e7f1      	b.n	8002b42 <_svfiprintf_r+0x17e>
 8002b5e:	ab03      	add	r3, sp, #12
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	462a      	mov	r2, r5
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <_svfiprintf_r+0x1e4>)
 8002b66:	a904      	add	r1, sp, #16
 8002b68:	4640      	mov	r0, r8
 8002b6a:	f3af 8000 	nop.w
 8002b6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b72:	4681      	mov	r9, r0
 8002b74:	d1d9      	bne.n	8002b2a <_svfiprintf_r+0x166>
 8002b76:	89ab      	ldrh	r3, [r5, #12]
 8002b78:	065b      	lsls	r3, r3, #25
 8002b7a:	f53f af38 	bmi.w	80029ee <_svfiprintf_r+0x2a>
 8002b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b80:	b01d      	add	sp, #116	; 0x74
 8002b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b86:	ab03      	add	r3, sp, #12
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	462a      	mov	r2, r5
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <_svfiprintf_r+0x1e4>)
 8002b8e:	a904      	add	r1, sp, #16
 8002b90:	4640      	mov	r0, r8
 8002b92:	f000 f881 	bl	8002c98 <_printf_i>
 8002b96:	e7ea      	b.n	8002b6e <_svfiprintf_r+0x1aa>
 8002b98:	08003162 	.word	0x08003162
 8002b9c:	08003168 	.word	0x08003168
 8002ba0:	0800316c 	.word	0x0800316c
 8002ba4:	00000000 	.word	0x00000000
 8002ba8:	0800290d 	.word	0x0800290d

08002bac <_printf_common>:
 8002bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb0:	4691      	mov	r9, r2
 8002bb2:	461f      	mov	r7, r3
 8002bb4:	688a      	ldr	r2, [r1, #8]
 8002bb6:	690b      	ldr	r3, [r1, #16]
 8002bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	bfb8      	it	lt
 8002bc0:	4613      	movlt	r3, r2
 8002bc2:	f8c9 3000 	str.w	r3, [r9]
 8002bc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bca:	4606      	mov	r6, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	b112      	cbz	r2, 8002bd6 <_printf_common+0x2a>
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f8c9 3000 	str.w	r3, [r9]
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	0699      	lsls	r1, r3, #26
 8002bda:	bf42      	ittt	mi
 8002bdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002be0:	3302      	addmi	r3, #2
 8002be2:	f8c9 3000 	strmi.w	r3, [r9]
 8002be6:	6825      	ldr	r5, [r4, #0]
 8002be8:	f015 0506 	ands.w	r5, r5, #6
 8002bec:	d107      	bne.n	8002bfe <_printf_common+0x52>
 8002bee:	f104 0a19 	add.w	sl, r4, #25
 8002bf2:	68e3      	ldr	r3, [r4, #12]
 8002bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	429d      	cmp	r5, r3
 8002bfc:	db29      	blt.n	8002c52 <_printf_common+0xa6>
 8002bfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	3300      	adds	r3, #0
 8002c06:	bf18      	it	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	0692      	lsls	r2, r2, #26
 8002c0c:	d42e      	bmi.n	8002c6c <_printf_common+0xc0>
 8002c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c12:	4639      	mov	r1, r7
 8002c14:	4630      	mov	r0, r6
 8002c16:	47c0      	blx	r8
 8002c18:	3001      	adds	r0, #1
 8002c1a:	d021      	beq.n	8002c60 <_printf_common+0xb4>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	68e5      	ldr	r5, [r4, #12]
 8002c20:	f8d9 2000 	ldr.w	r2, [r9]
 8002c24:	f003 0306 	and.w	r3, r3, #6
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	bf08      	it	eq
 8002c2c:	1aad      	subeq	r5, r5, r2
 8002c2e:	68a3      	ldr	r3, [r4, #8]
 8002c30:	6922      	ldr	r2, [r4, #16]
 8002c32:	bf0c      	ite	eq
 8002c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c38:	2500      	movne	r5, #0
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	bfc4      	itt	gt
 8002c3e:	1a9b      	subgt	r3, r3, r2
 8002c40:	18ed      	addgt	r5, r5, r3
 8002c42:	f04f 0900 	mov.w	r9, #0
 8002c46:	341a      	adds	r4, #26
 8002c48:	454d      	cmp	r5, r9
 8002c4a:	d11b      	bne.n	8002c84 <_printf_common+0xd8>
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c52:	2301      	movs	r3, #1
 8002c54:	4652      	mov	r2, sl
 8002c56:	4639      	mov	r1, r7
 8002c58:	4630      	mov	r0, r6
 8002c5a:	47c0      	blx	r8
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d103      	bne.n	8002c68 <_printf_common+0xbc>
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c68:	3501      	adds	r5, #1
 8002c6a:	e7c2      	b.n	8002bf2 <_printf_common+0x46>
 8002c6c:	18e1      	adds	r1, r4, r3
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	2030      	movs	r0, #48	; 0x30
 8002c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c76:	4422      	add	r2, r4
 8002c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c80:	3302      	adds	r3, #2
 8002c82:	e7c4      	b.n	8002c0e <_printf_common+0x62>
 8002c84:	2301      	movs	r3, #1
 8002c86:	4622      	mov	r2, r4
 8002c88:	4639      	mov	r1, r7
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	47c0      	blx	r8
 8002c8e:	3001      	adds	r0, #1
 8002c90:	d0e6      	beq.n	8002c60 <_printf_common+0xb4>
 8002c92:	f109 0901 	add.w	r9, r9, #1
 8002c96:	e7d7      	b.n	8002c48 <_printf_common+0x9c>

08002c98 <_printf_i>:
 8002c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c9c:	4617      	mov	r7, r2
 8002c9e:	7e0a      	ldrb	r2, [r1, #24]
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	2a6e      	cmp	r2, #110	; 0x6e
 8002ca4:	4698      	mov	r8, r3
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	460c      	mov	r4, r1
 8002caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cb0:	f000 80bc 	beq.w	8002e2c <_printf_i+0x194>
 8002cb4:	d81a      	bhi.n	8002cec <_printf_i+0x54>
 8002cb6:	2a63      	cmp	r2, #99	; 0x63
 8002cb8:	d02e      	beq.n	8002d18 <_printf_i+0x80>
 8002cba:	d80a      	bhi.n	8002cd2 <_printf_i+0x3a>
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	f000 80c8 	beq.w	8002e52 <_printf_i+0x1ba>
 8002cc2:	2a58      	cmp	r2, #88	; 0x58
 8002cc4:	f000 808a 	beq.w	8002ddc <_printf_i+0x144>
 8002cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ccc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002cd0:	e02a      	b.n	8002d28 <_printf_i+0x90>
 8002cd2:	2a64      	cmp	r2, #100	; 0x64
 8002cd4:	d001      	beq.n	8002cda <_printf_i+0x42>
 8002cd6:	2a69      	cmp	r2, #105	; 0x69
 8002cd8:	d1f6      	bne.n	8002cc8 <_printf_i+0x30>
 8002cda:	6821      	ldr	r1, [r4, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ce2:	d023      	beq.n	8002d2c <_printf_i+0x94>
 8002ce4:	1d11      	adds	r1, r2, #4
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	6813      	ldr	r3, [r2, #0]
 8002cea:	e027      	b.n	8002d3c <_printf_i+0xa4>
 8002cec:	2a73      	cmp	r2, #115	; 0x73
 8002cee:	f000 80b4 	beq.w	8002e5a <_printf_i+0x1c2>
 8002cf2:	d808      	bhi.n	8002d06 <_printf_i+0x6e>
 8002cf4:	2a6f      	cmp	r2, #111	; 0x6f
 8002cf6:	d02a      	beq.n	8002d4e <_printf_i+0xb6>
 8002cf8:	2a70      	cmp	r2, #112	; 0x70
 8002cfa:	d1e5      	bne.n	8002cc8 <_printf_i+0x30>
 8002cfc:	680a      	ldr	r2, [r1, #0]
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	600a      	str	r2, [r1, #0]
 8002d04:	e003      	b.n	8002d0e <_printf_i+0x76>
 8002d06:	2a75      	cmp	r2, #117	; 0x75
 8002d08:	d021      	beq.n	8002d4e <_printf_i+0xb6>
 8002d0a:	2a78      	cmp	r2, #120	; 0x78
 8002d0c:	d1dc      	bne.n	8002cc8 <_printf_i+0x30>
 8002d0e:	2278      	movs	r2, #120	; 0x78
 8002d10:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d14:	496e      	ldr	r1, [pc, #440]	; (8002ed0 <_printf_i+0x238>)
 8002d16:	e064      	b.n	8002de2 <_printf_i+0x14a>
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d1e:	1d11      	adds	r1, r2, #4
 8002d20:	6019      	str	r1, [r3, #0]
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0a3      	b.n	8002e74 <_printf_i+0x1dc>
 8002d2c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d30:	f102 0104 	add.w	r1, r2, #4
 8002d34:	6019      	str	r1, [r3, #0]
 8002d36:	d0d7      	beq.n	8002ce8 <_printf_i+0x50>
 8002d38:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da03      	bge.n	8002d48 <_printf_i+0xb0>
 8002d40:	222d      	movs	r2, #45	; 0x2d
 8002d42:	425b      	negs	r3, r3
 8002d44:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d48:	4962      	ldr	r1, [pc, #392]	; (8002ed4 <_printf_i+0x23c>)
 8002d4a:	220a      	movs	r2, #10
 8002d4c:	e017      	b.n	8002d7e <_printf_i+0xe6>
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d56:	d003      	beq.n	8002d60 <_printf_i+0xc8>
 8002d58:	1d08      	adds	r0, r1, #4
 8002d5a:	6018      	str	r0, [r3, #0]
 8002d5c:	680b      	ldr	r3, [r1, #0]
 8002d5e:	e006      	b.n	8002d6e <_printf_i+0xd6>
 8002d60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d64:	f101 0004 	add.w	r0, r1, #4
 8002d68:	6018      	str	r0, [r3, #0]
 8002d6a:	d0f7      	beq.n	8002d5c <_printf_i+0xc4>
 8002d6c:	880b      	ldrh	r3, [r1, #0]
 8002d6e:	4959      	ldr	r1, [pc, #356]	; (8002ed4 <_printf_i+0x23c>)
 8002d70:	2a6f      	cmp	r2, #111	; 0x6f
 8002d72:	bf14      	ite	ne
 8002d74:	220a      	movne	r2, #10
 8002d76:	2208      	moveq	r2, #8
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002d7e:	6865      	ldr	r5, [r4, #4]
 8002d80:	60a5      	str	r5, [r4, #8]
 8002d82:	2d00      	cmp	r5, #0
 8002d84:	f2c0 809c 	blt.w	8002ec0 <_printf_i+0x228>
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	f020 0004 	bic.w	r0, r0, #4
 8002d8e:	6020      	str	r0, [r4, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d13f      	bne.n	8002e14 <_printf_i+0x17c>
 8002d94:	2d00      	cmp	r5, #0
 8002d96:	f040 8095 	bne.w	8002ec4 <_printf_i+0x22c>
 8002d9a:	4675      	mov	r5, lr
 8002d9c:	2a08      	cmp	r2, #8
 8002d9e:	d10b      	bne.n	8002db8 <_printf_i+0x120>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	07da      	lsls	r2, r3, #31
 8002da4:	d508      	bpl.n	8002db8 <_printf_i+0x120>
 8002da6:	6923      	ldr	r3, [r4, #16]
 8002da8:	6862      	ldr	r2, [r4, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	bfde      	ittt	le
 8002dae:	2330      	movle	r3, #48	; 0x30
 8002db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002db8:	ebae 0305 	sub.w	r3, lr, r5
 8002dbc:	6123      	str	r3, [r4, #16]
 8002dbe:	f8cd 8000 	str.w	r8, [sp]
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	aa03      	add	r2, sp, #12
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f7ff feef 	bl	8002bac <_printf_common>
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d155      	bne.n	8002e7e <_printf_i+0x1e6>
 8002dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd6:	b005      	add	sp, #20
 8002dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ddc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002de0:	493c      	ldr	r1, [pc, #240]	; (8002ed4 <_printf_i+0x23c>)
 8002de2:	6822      	ldr	r2, [r4, #0]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dea:	f100 0504 	add.w	r5, r0, #4
 8002dee:	601d      	str	r5, [r3, #0]
 8002df0:	d001      	beq.n	8002df6 <_printf_i+0x15e>
 8002df2:	6803      	ldr	r3, [r0, #0]
 8002df4:	e002      	b.n	8002dfc <_printf_i+0x164>
 8002df6:	0655      	lsls	r5, r2, #25
 8002df8:	d5fb      	bpl.n	8002df2 <_printf_i+0x15a>
 8002dfa:	8803      	ldrh	r3, [r0, #0]
 8002dfc:	07d0      	lsls	r0, r2, #31
 8002dfe:	bf44      	itt	mi
 8002e00:	f042 0220 	orrmi.w	r2, r2, #32
 8002e04:	6022      	strmi	r2, [r4, #0]
 8002e06:	b91b      	cbnz	r3, 8002e10 <_printf_i+0x178>
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	f022 0220 	bic.w	r2, r2, #32
 8002e0e:	6022      	str	r2, [r4, #0]
 8002e10:	2210      	movs	r2, #16
 8002e12:	e7b1      	b.n	8002d78 <_printf_i+0xe0>
 8002e14:	4675      	mov	r5, lr
 8002e16:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e1a:	fb02 3310 	mls	r3, r2, r0, r3
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e24:	4603      	mov	r3, r0
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d1f5      	bne.n	8002e16 <_printf_i+0x17e>
 8002e2a:	e7b7      	b.n	8002d9c <_printf_i+0x104>
 8002e2c:	6808      	ldr	r0, [r1, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	6949      	ldr	r1, [r1, #20]
 8002e32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e36:	d004      	beq.n	8002e42 <_printf_i+0x1aa>
 8002e38:	1d10      	adds	r0, r2, #4
 8002e3a:	6018      	str	r0, [r3, #0]
 8002e3c:	6813      	ldr	r3, [r2, #0]
 8002e3e:	6019      	str	r1, [r3, #0]
 8002e40:	e007      	b.n	8002e52 <_printf_i+0x1ba>
 8002e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e46:	f102 0004 	add.w	r0, r2, #4
 8002e4a:	6018      	str	r0, [r3, #0]
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	d0f6      	beq.n	8002e3e <_printf_i+0x1a6>
 8002e50:	8019      	strh	r1, [r3, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	6123      	str	r3, [r4, #16]
 8002e56:	4675      	mov	r5, lr
 8002e58:	e7b1      	b.n	8002dbe <_printf_i+0x126>
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	1d11      	adds	r1, r2, #4
 8002e5e:	6019      	str	r1, [r3, #0]
 8002e60:	6815      	ldr	r5, [r2, #0]
 8002e62:	6862      	ldr	r2, [r4, #4]
 8002e64:	2100      	movs	r1, #0
 8002e66:	4628      	mov	r0, r5
 8002e68:	f7fd f9b2 	bl	80001d0 <memchr>
 8002e6c:	b108      	cbz	r0, 8002e72 <_printf_i+0x1da>
 8002e6e:	1b40      	subs	r0, r0, r5
 8002e70:	6060      	str	r0, [r4, #4]
 8002e72:	6863      	ldr	r3, [r4, #4]
 8002e74:	6123      	str	r3, [r4, #16]
 8002e76:	2300      	movs	r3, #0
 8002e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e7c:	e79f      	b.n	8002dbe <_printf_i+0x126>
 8002e7e:	6923      	ldr	r3, [r4, #16]
 8002e80:	462a      	mov	r2, r5
 8002e82:	4639      	mov	r1, r7
 8002e84:	4630      	mov	r0, r6
 8002e86:	47c0      	blx	r8
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d0a2      	beq.n	8002dd2 <_printf_i+0x13a>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	079b      	lsls	r3, r3, #30
 8002e90:	d507      	bpl.n	8002ea2 <_printf_i+0x20a>
 8002e92:	2500      	movs	r5, #0
 8002e94:	f104 0919 	add.w	r9, r4, #25
 8002e98:	68e3      	ldr	r3, [r4, #12]
 8002e9a:	9a03      	ldr	r2, [sp, #12]
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	429d      	cmp	r5, r3
 8002ea0:	db05      	blt.n	8002eae <_printf_i+0x216>
 8002ea2:	68e0      	ldr	r0, [r4, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4298      	cmp	r0, r3
 8002ea8:	bfb8      	it	lt
 8002eaa:	4618      	movlt	r0, r3
 8002eac:	e793      	b.n	8002dd6 <_printf_i+0x13e>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	464a      	mov	r2, r9
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	47c0      	blx	r8
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d08a      	beq.n	8002dd2 <_printf_i+0x13a>
 8002ebc:	3501      	adds	r5, #1
 8002ebe:	e7eb      	b.n	8002e98 <_printf_i+0x200>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1a7      	bne.n	8002e14 <_printf_i+0x17c>
 8002ec4:	780b      	ldrb	r3, [r1, #0]
 8002ec6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ece:	e765      	b.n	8002d9c <_printf_i+0x104>
 8002ed0:	08003184 	.word	0x08003184
 8002ed4:	08003173 	.word	0x08003173

08002ed8 <memcpy>:
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	1e43      	subs	r3, r0, #1
 8002edc:	440a      	add	r2, r1
 8002ede:	4291      	cmp	r1, r2
 8002ee0:	d100      	bne.n	8002ee4 <memcpy+0xc>
 8002ee2:	bd10      	pop	{r4, pc}
 8002ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002eec:	e7f7      	b.n	8002ede <memcpy+0x6>

08002eee <memmove>:
 8002eee:	4288      	cmp	r0, r1
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	eb01 0302 	add.w	r3, r1, r2
 8002ef6:	d803      	bhi.n	8002f00 <memmove+0x12>
 8002ef8:	1e42      	subs	r2, r0, #1
 8002efa:	4299      	cmp	r1, r3
 8002efc:	d10c      	bne.n	8002f18 <memmove+0x2a>
 8002efe:	bd10      	pop	{r4, pc}
 8002f00:	4298      	cmp	r0, r3
 8002f02:	d2f9      	bcs.n	8002ef8 <memmove+0xa>
 8002f04:	1881      	adds	r1, r0, r2
 8002f06:	1ad2      	subs	r2, r2, r3
 8002f08:	42d3      	cmn	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <memmove+0x20>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f16:	e7f7      	b.n	8002f08 <memmove+0x1a>
 8002f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f20:	e7eb      	b.n	8002efa <memmove+0xc>
	...

08002f24 <_free_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4605      	mov	r5, r0
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	d045      	beq.n	8002fb8 <_free_r+0x94>
 8002f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f30:	1f0c      	subs	r4, r1, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfb8      	it	lt
 8002f36:	18e4      	addlt	r4, r4, r3
 8002f38:	f000 f8d6 	bl	80030e8 <__malloc_lock>
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <_free_r+0x98>)
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	4610      	mov	r0, r2
 8002f42:	b933      	cbnz	r3, 8002f52 <_free_r+0x2e>
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	6014      	str	r4, [r2, #0]
 8002f48:	4628      	mov	r0, r5
 8002f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f4e:	f000 b8cc 	b.w	80030ea <__malloc_unlock>
 8002f52:	42a3      	cmp	r3, r4
 8002f54:	d90c      	bls.n	8002f70 <_free_r+0x4c>
 8002f56:	6821      	ldr	r1, [r4, #0]
 8002f58:	1862      	adds	r2, r4, r1
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	bf04      	itt	eq
 8002f5e:	681a      	ldreq	r2, [r3, #0]
 8002f60:	685b      	ldreq	r3, [r3, #4]
 8002f62:	6063      	str	r3, [r4, #4]
 8002f64:	bf04      	itt	eq
 8002f66:	1852      	addeq	r2, r2, r1
 8002f68:	6022      	streq	r2, [r4, #0]
 8002f6a:	6004      	str	r4, [r0, #0]
 8002f6c:	e7ec      	b.n	8002f48 <_free_r+0x24>
 8002f6e:	4613      	mov	r3, r2
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	b10a      	cbz	r2, 8002f78 <_free_r+0x54>
 8002f74:	42a2      	cmp	r2, r4
 8002f76:	d9fa      	bls.n	8002f6e <_free_r+0x4a>
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	1858      	adds	r0, r3, r1
 8002f7c:	42a0      	cmp	r0, r4
 8002f7e:	d10b      	bne.n	8002f98 <_free_r+0x74>
 8002f80:	6820      	ldr	r0, [r4, #0]
 8002f82:	4401      	add	r1, r0
 8002f84:	1858      	adds	r0, r3, r1
 8002f86:	4282      	cmp	r2, r0
 8002f88:	6019      	str	r1, [r3, #0]
 8002f8a:	d1dd      	bne.n	8002f48 <_free_r+0x24>
 8002f8c:	6810      	ldr	r0, [r2, #0]
 8002f8e:	6852      	ldr	r2, [r2, #4]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	4401      	add	r1, r0
 8002f94:	6019      	str	r1, [r3, #0]
 8002f96:	e7d7      	b.n	8002f48 <_free_r+0x24>
 8002f98:	d902      	bls.n	8002fa0 <_free_r+0x7c>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	e7d3      	b.n	8002f48 <_free_r+0x24>
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	1821      	adds	r1, r4, r0
 8002fa4:	428a      	cmp	r2, r1
 8002fa6:	bf04      	itt	eq
 8002fa8:	6811      	ldreq	r1, [r2, #0]
 8002faa:	6852      	ldreq	r2, [r2, #4]
 8002fac:	6062      	str	r2, [r4, #4]
 8002fae:	bf04      	itt	eq
 8002fb0:	1809      	addeq	r1, r1, r0
 8002fb2:	6021      	streq	r1, [r4, #0]
 8002fb4:	605c      	str	r4, [r3, #4]
 8002fb6:	e7c7      	b.n	8002f48 <_free_r+0x24>
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
 8002fba:	bf00      	nop
 8002fbc:	200000e8 	.word	0x200000e8

08002fc0 <_malloc_r>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	1ccd      	adds	r5, r1, #3
 8002fc4:	f025 0503 	bic.w	r5, r5, #3
 8002fc8:	3508      	adds	r5, #8
 8002fca:	2d0c      	cmp	r5, #12
 8002fcc:	bf38      	it	cc
 8002fce:	250c      	movcc	r5, #12
 8002fd0:	2d00      	cmp	r5, #0
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	db01      	blt.n	8002fda <_malloc_r+0x1a>
 8002fd6:	42a9      	cmp	r1, r5
 8002fd8:	d903      	bls.n	8002fe2 <_malloc_r+0x22>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	6033      	str	r3, [r6, #0]
 8002fde:	2000      	movs	r0, #0
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
 8002fe2:	f000 f881 	bl	80030e8 <__malloc_lock>
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <_malloc_r+0xb4>)
 8002fe8:	6814      	ldr	r4, [r2, #0]
 8002fea:	4621      	mov	r1, r4
 8002fec:	b991      	cbnz	r1, 8003014 <_malloc_r+0x54>
 8002fee:	4c22      	ldr	r4, [pc, #136]	; (8003078 <_malloc_r+0xb8>)
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	b91b      	cbnz	r3, 8002ffc <_malloc_r+0x3c>
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f000 f867 	bl	80030c8 <_sbrk_r>
 8002ffa:	6020      	str	r0, [r4, #0]
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	4630      	mov	r0, r6
 8003000:	f000 f862 	bl	80030c8 <_sbrk_r>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d126      	bne.n	8003056 <_malloc_r+0x96>
 8003008:	230c      	movs	r3, #12
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	4630      	mov	r0, r6
 800300e:	f000 f86c 	bl	80030ea <__malloc_unlock>
 8003012:	e7e4      	b.n	8002fde <_malloc_r+0x1e>
 8003014:	680b      	ldr	r3, [r1, #0]
 8003016:	1b5b      	subs	r3, r3, r5
 8003018:	d41a      	bmi.n	8003050 <_malloc_r+0x90>
 800301a:	2b0b      	cmp	r3, #11
 800301c:	d90f      	bls.n	800303e <_malloc_r+0x7e>
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	50cd      	str	r5, [r1, r3]
 8003022:	18cc      	adds	r4, r1, r3
 8003024:	4630      	mov	r0, r6
 8003026:	f000 f860 	bl	80030ea <__malloc_unlock>
 800302a:	f104 000b 	add.w	r0, r4, #11
 800302e:	1d23      	adds	r3, r4, #4
 8003030:	f020 0007 	bic.w	r0, r0, #7
 8003034:	1ac3      	subs	r3, r0, r3
 8003036:	d01b      	beq.n	8003070 <_malloc_r+0xb0>
 8003038:	425a      	negs	r2, r3
 800303a:	50e2      	str	r2, [r4, r3]
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	428c      	cmp	r4, r1
 8003040:	bf0d      	iteet	eq
 8003042:	6863      	ldreq	r3, [r4, #4]
 8003044:	684b      	ldrne	r3, [r1, #4]
 8003046:	6063      	strne	r3, [r4, #4]
 8003048:	6013      	streq	r3, [r2, #0]
 800304a:	bf18      	it	ne
 800304c:	460c      	movne	r4, r1
 800304e:	e7e9      	b.n	8003024 <_malloc_r+0x64>
 8003050:	460c      	mov	r4, r1
 8003052:	6849      	ldr	r1, [r1, #4]
 8003054:	e7ca      	b.n	8002fec <_malloc_r+0x2c>
 8003056:	1cc4      	adds	r4, r0, #3
 8003058:	f024 0403 	bic.w	r4, r4, #3
 800305c:	42a0      	cmp	r0, r4
 800305e:	d005      	beq.n	800306c <_malloc_r+0xac>
 8003060:	1a21      	subs	r1, r4, r0
 8003062:	4630      	mov	r0, r6
 8003064:	f000 f830 	bl	80030c8 <_sbrk_r>
 8003068:	3001      	adds	r0, #1
 800306a:	d0cd      	beq.n	8003008 <_malloc_r+0x48>
 800306c:	6025      	str	r5, [r4, #0]
 800306e:	e7d9      	b.n	8003024 <_malloc_r+0x64>
 8003070:	bd70      	pop	{r4, r5, r6, pc}
 8003072:	bf00      	nop
 8003074:	200000e8 	.word	0x200000e8
 8003078:	200000ec 	.word	0x200000ec

0800307c <_realloc_r>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	4607      	mov	r7, r0
 8003080:	4614      	mov	r4, r2
 8003082:	460e      	mov	r6, r1
 8003084:	b921      	cbnz	r1, 8003090 <_realloc_r+0x14>
 8003086:	4611      	mov	r1, r2
 8003088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800308c:	f7ff bf98 	b.w	8002fc0 <_malloc_r>
 8003090:	b922      	cbnz	r2, 800309c <_realloc_r+0x20>
 8003092:	f7ff ff47 	bl	8002f24 <_free_r>
 8003096:	4625      	mov	r5, r4
 8003098:	4628      	mov	r0, r5
 800309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309c:	f000 f826 	bl	80030ec <_malloc_usable_size_r>
 80030a0:	4284      	cmp	r4, r0
 80030a2:	d90f      	bls.n	80030c4 <_realloc_r+0x48>
 80030a4:	4621      	mov	r1, r4
 80030a6:	4638      	mov	r0, r7
 80030a8:	f7ff ff8a 	bl	8002fc0 <_malloc_r>
 80030ac:	4605      	mov	r5, r0
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d0f2      	beq.n	8003098 <_realloc_r+0x1c>
 80030b2:	4631      	mov	r1, r6
 80030b4:	4622      	mov	r2, r4
 80030b6:	f7ff ff0f 	bl	8002ed8 <memcpy>
 80030ba:	4631      	mov	r1, r6
 80030bc:	4638      	mov	r0, r7
 80030be:	f7ff ff31 	bl	8002f24 <_free_r>
 80030c2:	e7e9      	b.n	8003098 <_realloc_r+0x1c>
 80030c4:	4635      	mov	r5, r6
 80030c6:	e7e7      	b.n	8003098 <_realloc_r+0x1c>

080030c8 <_sbrk_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4c06      	ldr	r4, [pc, #24]	; (80030e4 <_sbrk_r+0x1c>)
 80030cc:	2300      	movs	r3, #0
 80030ce:	4605      	mov	r5, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	f000 f814 	bl	8003100 <_sbrk>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_sbrk_r+0x1a>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_sbrk_r+0x1a>
 80030e0:	602b      	str	r3, [r5, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000254 	.word	0x20000254

080030e8 <__malloc_lock>:
 80030e8:	4770      	bx	lr

080030ea <__malloc_unlock>:
 80030ea:	4770      	bx	lr

080030ec <_malloc_usable_size_r>:
 80030ec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80030f0:	2800      	cmp	r0, #0
 80030f2:	f1a0 0004 	sub.w	r0, r0, #4
 80030f6:	bfbc      	itt	lt
 80030f8:	580b      	ldrlt	r3, [r1, r0]
 80030fa:	18c0      	addlt	r0, r0, r3
 80030fc:	4770      	bx	lr
	...

08003100 <_sbrk>:
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <_sbrk+0x14>)
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	4602      	mov	r2, r0
 8003106:	b909      	cbnz	r1, 800310c <_sbrk+0xc>
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <_sbrk+0x18>)
 800310a:	6019      	str	r1, [r3, #0]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	4402      	add	r2, r0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	4770      	bx	lr
 8003114:	200000f0 	.word	0x200000f0
 8003118:	20000258 	.word	0x20000258

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
