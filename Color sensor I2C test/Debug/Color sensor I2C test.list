
Color sensor I2C test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001ccc  08001ccc  00011ccc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001cfc  08001cfc  00011cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d00  08001d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  20000004  08001d08  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000d4  08001d08  000200d4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012fc0  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002342  00000000  00000000  00032fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008cd3  00000000  00000000  0003532e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008e0  00000000  00000000  0003e008  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d40  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000058da  00000000  00000000  0003f628  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000351a  00000000  00000000  00044f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004841c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c50  00000000  00000000  00048498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001cb4 	.word	0x08001cb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001cb4 	.word	0x08001cb4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fef0 	bl	800101c <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f866 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 fc01 	bl	8001a70 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000028 	.word	0x20000028

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	680b      	ldr	r3, [r1, #0]
{ 
 800034c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000354:	9a02      	ldr	r2, [sp, #8]
 8000356:	40da      	lsrs	r2, r3
 8000358:	d101      	bne.n	800035e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800035a:	b007      	add	sp, #28
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	9203      	str	r2, [sp, #12]
 8000364:	9903      	ldr	r1, [sp, #12]
 8000366:	9a02      	ldr	r2, [sp, #8]
 8000368:	400a      	ands	r2, r1
 800036a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800036c:	d100      	bne.n	8000370 <HAL_GPIO_Init+0x28>
 800036e:	e08c      	b.n	800048a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000370:	9a01      	ldr	r2, [sp, #4]
 8000372:	2110      	movs	r1, #16
 8000374:	6852      	ldr	r2, [r2, #4]
 8000376:	0016      	movs	r6, r2
 8000378:	438e      	bics	r6, r1
 800037a:	2e02      	cmp	r6, #2
 800037c:	d10e      	bne.n	800039c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800037e:	2507      	movs	r5, #7
 8000380:	401d      	ands	r5, r3
 8000382:	00ad      	lsls	r5, r5, #2
 8000384:	3901      	subs	r1, #1
 8000386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000388:	08dc      	lsrs	r4, r3, #3
 800038a:	00a4      	lsls	r4, r4, #2
 800038c:	1904      	adds	r4, r0, r4
 800038e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000390:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000392:	9901      	ldr	r1, [sp, #4]
 8000394:	6909      	ldr	r1, [r1, #16]
 8000396:	40a9      	lsls	r1, r5
 8000398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800039c:	2403      	movs	r4, #3
 800039e:	005f      	lsls	r7, r3, #1
 80003a0:	40bc      	lsls	r4, r7
 80003a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a8:	4025      	ands	r5, r4
 80003aa:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	2503      	movs	r5, #3
 80003ae:	4015      	ands	r5, r2
 80003b0:	40bd      	lsls	r5, r7
 80003b2:	4661      	mov	r1, ip
 80003b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	2e01      	cmp	r6, #1
 80003ba:	d80f      	bhi.n	80003dc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003be:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ca:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003cc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d2:	2101      	movs	r1, #1
 80003d4:	400d      	ands	r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003dc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003de:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003ec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ee:	420a      	tst	r2, r1
 80003f0:	d04b      	beq.n	800048a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	2101      	movs	r1, #1
 80003f4:	4c26      	ldr	r4, [pc, #152]	; (8000490 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fa:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	430d      	orrs	r5, r1
 80003fe:	61a5      	str	r5, [r4, #24]
 8000400:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000402:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	400c      	ands	r4, r1
 8000406:	9405      	str	r4, [sp, #20]
 8000408:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	240f      	movs	r4, #15
 800040c:	4921      	ldr	r1, [pc, #132]	; (8000494 <HAL_GPIO_Init+0x14c>)
 800040e:	00ad      	lsls	r5, r5, #2
 8000410:	00b6      	lsls	r6, r6, #2
 8000412:	186d      	adds	r5, r5, r1
 8000414:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000418:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041e:	2400      	movs	r4, #0
 8000420:	4288      	cmp	r0, r1
 8000422:	d00c      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 8000424:	491c      	ldr	r1, [pc, #112]	; (8000498 <HAL_GPIO_Init+0x150>)
 8000426:	3401      	adds	r4, #1
 8000428:	4288      	cmp	r0, r1
 800042a:	d008      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 800042c:	491b      	ldr	r1, [pc, #108]	; (800049c <HAL_GPIO_Init+0x154>)
 800042e:	3401      	adds	r4, #1
 8000430:	4288      	cmp	r0, r1
 8000432:	d004      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 8000434:	491a      	ldr	r1, [pc, #104]	; (80004a0 <HAL_GPIO_Init+0x158>)
 8000436:	3403      	adds	r4, #3
 8000438:	4288      	cmp	r0, r1
 800043a:	d100      	bne.n	800043e <HAL_GPIO_Init+0xf6>
 800043c:	3c02      	subs	r4, #2
 800043e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000440:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000444:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000446:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000448:	4c16      	ldr	r4, [pc, #88]	; (80004a4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800044a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800044c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800044e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000450:	03d1      	lsls	r1, r2, #15
 8000452:	d401      	bmi.n	8000458 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000454:	003e      	movs	r6, r7
 8000456:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000458:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800045a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800045c:	9e00      	ldr	r6, [sp, #0]
 800045e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000460:	0391      	lsls	r1, r2, #14
 8000462:	d401      	bmi.n	8000468 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000464:	003e      	movs	r6, r7
 8000466:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000468:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800046a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800046c:	9e00      	ldr	r6, [sp, #0]
 800046e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000470:	02d1      	lsls	r1, r2, #11
 8000472:	d401      	bmi.n	8000478 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000474:	003e      	movs	r6, r7
 8000476:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000478:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800047a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800047c:	9f00      	ldr	r7, [sp, #0]
 800047e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000480:	0292      	lsls	r2, r2, #10
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000484:	402e      	ands	r6, r5
 8000486:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000488:	60e7      	str	r7, [r4, #12]
    position++;
 800048a:	3301      	adds	r3, #1
 800048c:	e762      	b.n	8000354 <HAL_GPIO_Init+0xc>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000
 8000498:	48000400 	.word	0x48000400
 800049c:	48000800 	.word	0x48000800
 80004a0:	48000c00 	.word	0x48000c00
 80004a4:	40010400 	.word	0x40010400

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004b2:	e7fc      	b.n	80004ae <HAL_GPIO_WritePin+0x6>

080004b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80004b4:	6803      	ldr	r3, [r0, #0]
 80004b6:	699a      	ldr	r2, [r3, #24]
 80004b8:	0792      	lsls	r2, r2, #30
 80004ba:	d501      	bpl.n	80004c0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80004c0:	2201      	movs	r2, #1
 80004c2:	6999      	ldr	r1, [r3, #24]
 80004c4:	4211      	tst	r1, r2
 80004c6:	d102      	bne.n	80004ce <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80004c8:	6999      	ldr	r1, [r3, #24]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	619a      	str	r2, [r3, #24]
  }
}
 80004ce:	4770      	bx	lr

080004d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80004d0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80004d2:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004d4:	4806      	ldr	r0, [pc, #24]	; (80004f0 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 80004d6:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004d8:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004da:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004dc:	9d03      	ldr	r5, [sp, #12]
 80004de:	0d89      	lsrs	r1, r1, #22
 80004e0:	432b      	orrs	r3, r5
 80004e2:	4319      	orrs	r1, r3
 80004e4:	0412      	lsls	r2, r2, #16
 80004e6:	430a      	orrs	r2, r1
 80004e8:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80004ea:	6062      	str	r2, [r4, #4]
}
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	fc009800 	.word	0xfc009800

080004f4 <I2C_WaitOnFlagUntilTimeout>:
{
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	0004      	movs	r4, r0
 80004f8:	000e      	movs	r6, r1
 80004fa:	0017      	movs	r7, r2
 80004fc:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80004fe:	6822      	ldr	r2, [r4, #0]
 8000500:	6993      	ldr	r3, [r2, #24]
 8000502:	4033      	ands	r3, r6
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	4259      	negs	r1, r3
 8000508:	414b      	adcs	r3, r1
 800050a:	42bb      	cmp	r3, r7
 800050c:	d001      	beq.n	8000512 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800050e:	2000      	movs	r0, #0
 8000510:	e00e      	b.n	8000530 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000512:	1c6b      	adds	r3, r5, #1
 8000514:	d0f4      	beq.n	8000500 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000516:	2d00      	cmp	r5, #0
 8000518:	d10b      	bne.n	8000532 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 800051a:	0023      	movs	r3, r4
 800051c:	2220      	movs	r2, #32
 800051e:	3341      	adds	r3, #65	; 0x41
 8000520:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000522:	0022      	movs	r2, r4
 8000524:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000526:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000528:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800052a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800052c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800052e:	7023      	strb	r3, [r4, #0]
}
 8000530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000532:	f7ff fea9 	bl	8000288 <HAL_GetTick>
 8000536:	9b06      	ldr	r3, [sp, #24]
 8000538:	1ac0      	subs	r0, r0, r3
 800053a:	4285      	cmp	r5, r0
 800053c:	d2df      	bcs.n	80004fe <I2C_WaitOnFlagUntilTimeout+0xa>
 800053e:	e7ec      	b.n	800051a <I2C_WaitOnFlagUntilTimeout+0x26>

08000540 <I2C_IsAcknowledgeFailed>:
{
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000542:	6803      	ldr	r3, [r0, #0]
{
 8000544:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000546:	6998      	ldr	r0, [r3, #24]
 8000548:	2310      	movs	r3, #16
{
 800054a:	000e      	movs	r6, r1
 800054c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800054e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000550:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000552:	2800      	cmp	r0, #0
 8000554:	d115      	bne.n	8000582 <I2C_IsAcknowledgeFailed+0x42>
}
 8000556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000558:	1c72      	adds	r2, r6, #1
 800055a:	d013      	beq.n	8000584 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800055c:	2e00      	cmp	r6, #0
 800055e:	d10b      	bne.n	8000578 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8000560:	0023      	movs	r3, r4
 8000562:	2220      	movs	r2, #32
 8000564:	3341      	adds	r3, #65	; 0x41
 8000566:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000568:	0022      	movs	r2, r4
 800056a:	2300      	movs	r3, #0
 800056c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800056e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000570:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 8000572:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8000574:	7023      	strb	r3, [r4, #0]
 8000576:	e7ee      	b.n	8000556 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000578:	f7ff fe86 	bl	8000288 <HAL_GetTick>
 800057c:	1bc0      	subs	r0, r0, r7
 800057e:	4286      	cmp	r6, r0
 8000580:	d3ee      	bcc.n	8000560 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	422a      	tst	r2, r5
 8000588:	d0e6      	beq.n	8000558 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800058a:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800058c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800058e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000590:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000592:	f7ff ff8f 	bl	80004b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000596:	6822      	ldr	r2, [r4, #0]
 8000598:	4908      	ldr	r1, [pc, #32]	; (80005bc <I2C_IsAcknowledgeFailed+0x7c>)
 800059a:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 800059c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800059e:	400b      	ands	r3, r1
 80005a0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80005a2:	2304      	movs	r3, #4
 80005a4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80005a6:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a8:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80005aa:	3341      	adds	r3, #65	; 0x41
 80005ac:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005b2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005b4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80005b6:	7023      	strb	r3, [r4, #0]
 80005b8:	e7cd      	b.n	8000556 <I2C_IsAcknowledgeFailed+0x16>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	fe00e800 	.word	0xfe00e800

080005c0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	0004      	movs	r4, r0
 80005c4:	000d      	movs	r5, r1
 80005c6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80005c8:	2702      	movs	r7, #2
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	423b      	tst	r3, r7
 80005d0:	d001      	beq.n	80005d6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80005d2:	2000      	movs	r0, #0
 80005d4:	e018      	b.n	8000608 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80005d6:	0032      	movs	r2, r6
 80005d8:	0029      	movs	r1, r5
 80005da:	0020      	movs	r0, r4
 80005dc:	f7ff ffb0 	bl	8000540 <I2C_IsAcknowledgeFailed>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d118      	bne.n	8000616 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80005e4:	1c6b      	adds	r3, r5, #1
 80005e6:	d0f0      	beq.n	80005ca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d10e      	bne.n	800060a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ec:	2220      	movs	r2, #32
 80005ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80005f0:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005f2:	4313      	orrs	r3, r2
 80005f4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80005f6:	0023      	movs	r3, r4
 80005f8:	3341      	adds	r3, #65	; 0x41
 80005fa:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80005fc:	0022      	movs	r2, r4
 80005fe:	2300      	movs	r3, #0
 8000600:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000602:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000604:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000606:	7023      	strb	r3, [r4, #0]
}
 8000608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800060a:	f7ff fe3d 	bl	8000288 <HAL_GetTick>
 800060e:	1b80      	subs	r0, r0, r6
 8000610:	4285      	cmp	r5, r0
 8000612:	d2da      	bcs.n	80005ca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000614:	e7ea      	b.n	80005ec <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
 8000618:	e7f6      	b.n	8000608 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

0800061a <I2C_RequestMemoryRead>:
{
 800061a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800061c:	0015      	movs	r5, r2
 800061e:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000620:	b2da      	uxtb	r2, r3
 8000622:	2380      	movs	r3, #128	; 0x80
{
 8000624:	0004      	movs	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000626:	019b      	lsls	r3, r3, #6
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	f7ff ff50 	bl	80004d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000630:	9a07      	ldr	r2, [sp, #28]
 8000632:	9906      	ldr	r1, [sp, #24]
 8000634:	0020      	movs	r0, r4
 8000636:	f7ff ffc3 	bl	80005c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800063a:	2800      	cmp	r0, #0
 800063c:	d005      	beq.n	800064a <I2C_RequestMemoryRead+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800063e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000640:	2001      	movs	r0, #1
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000642:	2b04      	cmp	r3, #4
 8000644:	d000      	beq.n	8000648 <I2C_RequestMemoryRead+0x2e>
      return HAL_TIMEOUT;
 8000646:	2003      	movs	r0, #3
}
 8000648:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800064a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800064c:	2e01      	cmp	r6, #1
 800064e:	d10c      	bne.n	800066a <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000650:	b2ed      	uxtb	r5, r5
 8000652:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000654:	9b07      	ldr	r3, [sp, #28]
 8000656:	2200      	movs	r2, #0
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	9b06      	ldr	r3, [sp, #24]
 800065e:	0020      	movs	r0, r4
 8000660:	f7ff ff48 	bl	80004f4 <I2C_WaitOnFlagUntilTimeout>
 8000664:	2800      	cmp	r0, #0
 8000666:	d1ee      	bne.n	8000646 <I2C_RequestMemoryRead+0x2c>
 8000668:	e7ee      	b.n	8000648 <I2C_RequestMemoryRead+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800066a:	0a2a      	lsrs	r2, r5, #8
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800066e:	9906      	ldr	r1, [sp, #24]
 8000670:	9a07      	ldr	r2, [sp, #28]
 8000672:	0020      	movs	r0, r4
 8000674:	f7ff ffa4 	bl	80005c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8000678:	2800      	cmp	r0, #0
 800067a:	d1e0      	bne.n	800063e <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	e7e7      	b.n	8000650 <I2C_RequestMemoryRead+0x36>

08000680 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	0004      	movs	r4, r0
 8000684:	000d      	movs	r5, r1
 8000686:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000688:	2720      	movs	r7, #32
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	423b      	tst	r3, r7
 8000690:	d001      	beq.n	8000696 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000692:	2000      	movs	r0, #0
 8000694:	e016      	b.n	80006c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000696:	0032      	movs	r2, r6
 8000698:	0029      	movs	r1, r5
 800069a:	0020      	movs	r0, r4
 800069c:	f7ff ff50 	bl	8000540 <I2C_IsAcknowledgeFailed>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d116      	bne.n	80006d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80006a4:	2d00      	cmp	r5, #0
 80006a6:	d10e      	bne.n	80006c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006a8:	2220      	movs	r2, #32
 80006aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80006ac:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006ae:	4313      	orrs	r3, r2
 80006b0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80006b2:	0023      	movs	r3, r4
 80006b4:	3341      	adds	r3, #65	; 0x41
 80006b6:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80006b8:	0022      	movs	r2, r4
 80006ba:	2300      	movs	r3, #0
 80006bc:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80006be:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80006c0:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80006c2:	7023      	strb	r3, [r4, #0]
}
 80006c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80006c6:	f7ff fddf 	bl	8000288 <HAL_GetTick>
 80006ca:	1b80      	subs	r0, r0, r6
 80006cc:	4285      	cmp	r5, r0
 80006ce:	d2dc      	bcs.n	800068a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80006d0:	e7ea      	b.n	80006a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 80006d2:	2001      	movs	r0, #1
 80006d4:	e7f6      	b.n	80006c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

080006d8 <HAL_I2C_Init>:
{
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80006de:	2c00      	cmp	r4, #0
 80006e0:	d03f      	beq.n	8000762 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006e2:	0025      	movs	r5, r4
 80006e4:	3541      	adds	r5, #65	; 0x41
 80006e6:	782b      	ldrb	r3, [r5, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d105      	bne.n	80006fa <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80006ee:	0022      	movs	r2, r4
 80006f0:	3240      	adds	r2, #64	; 0x40
 80006f2:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80006f4:	0020      	movs	r0, r4
 80006f6:	f001 f9d3 	bl	8001aa0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006fa:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006fc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006fe:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000700:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000702:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68a6      	ldr	r6, [r4, #8]
 8000708:	438a      	bics	r2, r1
 800070a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800070c:	6861      	ldr	r1, [r4, #4]
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <HAL_I2C_Init+0xa0>)
 8000710:	400a      	ands	r2, r1
 8000712:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000714:	6899      	ldr	r1, [r3, #8]
 8000716:	4a19      	ldr	r2, [pc, #100]	; (800077c <HAL_I2C_Init+0xa4>)
 8000718:	4011      	ands	r1, r2
 800071a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800071c:	2801      	cmp	r0, #1
 800071e:	d121      	bne.n	8000764 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0209      	lsls	r1, r1, #8
 8000724:	4331      	orrs	r1, r6
 8000726:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000728:	6858      	ldr	r0, [r3, #4]
 800072a:	4915      	ldr	r1, [pc, #84]	; (8000780 <HAL_I2C_Init+0xa8>)
 800072c:	4301      	orrs	r1, r0
 800072e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000730:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000732:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000734:	400a      	ands	r2, r1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000738:	6961      	ldr	r1, [r4, #20]
 800073a:	6922      	ldr	r2, [r4, #16]
 800073c:	430a      	orrs	r2, r1
 800073e:	69a1      	ldr	r1, [r4, #24]
 8000740:	0209      	lsls	r1, r1, #8
 8000742:	430a      	orrs	r2, r1
 8000744:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000746:	6a21      	ldr	r1, [r4, #32]
 8000748:	69e2      	ldr	r2, [r4, #28]
 800074a:	430a      	orrs	r2, r1
 800074c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800074e:	2201      	movs	r2, #1
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	430a      	orrs	r2, r1
 8000754:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000756:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000758:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800075a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800075c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800075e:	3442      	adds	r4, #66	; 0x42
 8000760:	7020      	strb	r0, [r4, #0]
}
 8000762:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000764:	2184      	movs	r1, #132	; 0x84
 8000766:	0209      	lsls	r1, r1, #8
 8000768:	4331      	orrs	r1, r6
 800076a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800076c:	2802      	cmp	r0, #2
 800076e:	d1db      	bne.n	8000728 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0109      	lsls	r1, r1, #4
 8000774:	6059      	str	r1, [r3, #4]
 8000776:	e7d7      	b.n	8000728 <HAL_I2C_Init+0x50>
 8000778:	f0ffffff 	.word	0xf0ffffff
 800077c:	ffff7fff 	.word	0xffff7fff
 8000780:	02008000 	.word	0x02008000

08000784 <HAL_I2C_Master_Transmit>:
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000786:	0005      	movs	r5, r0
{
 8000788:	b087      	sub	sp, #28
 800078a:	9103      	str	r1, [sp, #12]
 800078c:	9204      	str	r2, [sp, #16]
 800078e:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000790:	3541      	adds	r5, #65	; 0x41
 8000792:	782b      	ldrb	r3, [r5, #0]
{
 8000794:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000796:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000798:	2b20      	cmp	r3, #32
 800079a:	d157      	bne.n	800084c <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 800079c:	0023      	movs	r3, r4
 800079e:	3340      	adds	r3, #64	; 0x40
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	d052      	beq.n	800084c <HAL_I2C_Master_Transmit+0xc8>
 80007a6:	2601      	movs	r6, #1
 80007a8:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80007aa:	f7ff fd6d 	bl	8000288 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80007ae:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80007b0:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80007b2:	9000      	str	r0, [sp, #0]
 80007b4:	2319      	movs	r3, #25
 80007b6:	0032      	movs	r2, r6
 80007b8:	0209      	lsls	r1, r1, #8
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fe9a 	bl	80004f4 <I2C_WaitOnFlagUntilTimeout>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d142      	bne.n	800084a <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80007c4:	2321      	movs	r3, #33	; 0x21
 80007c6:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80007c8:	3b11      	subs	r3, #17
 80007ca:	19ad      	adds	r5, r5, r6
 80007cc:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 80007ce:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007d0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80007d2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80007d4:	466b      	mov	r3, sp
 80007d6:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 80007d8:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80007da:	8563      	strh	r3, [r4, #42]	; 0x2a
 80007dc:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80007de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007e0:	019b      	lsls	r3, r3, #6
 80007e2:	2aff      	cmp	r2, #255	; 0xff
 80007e4:	d921      	bls.n	800082a <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	045b      	lsls	r3, r3, #17
 80007f0:	9903      	ldr	r1, [sp, #12]
 80007f2:	0020      	movs	r0, r4
 80007f4:	f7ff fe6c 	bl	80004d0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80007f8:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80007fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007fc:	003a      	movs	r2, r7
 80007fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000800:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000802:	2b00      	cmp	r3, #0
 8000804:	d119      	bne.n	800083a <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000806:	f7ff ff3b 	bl	8000680 <I2C_WaitOnSTOPFlagUntilTimeout>
 800080a:	2800      	cmp	r0, #0
 800080c:	d119      	bne.n	8000842 <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800080e:	2120      	movs	r1, #32
 8000810:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000812:	4e27      	ldr	r6, [pc, #156]	; (80008b0 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000814:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	4032      	ands	r2, r6
 800081a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800081c:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800081e:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000820:	3341      	adds	r3, #65	; 0x41
 8000822:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000824:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000826:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000828:	e010      	b.n	800084c <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800082a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800082c:	b292      	uxth	r2, r2
 800082e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	049b      	lsls	r3, r3, #18
 8000838:	e7da      	b.n	80007f0 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800083a:	f7ff fec1 	bl	80005c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800083e:	2800      	cmp	r0, #0
 8000840:	d006      	beq.n	8000850 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000842:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000844:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000846:	2b04      	cmp	r3, #4
 8000848:	d000      	beq.n	800084c <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 800084a:	2003      	movs	r0, #3
}
 800084c:	b007      	add	sp, #28
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000852:	6822      	ldr	r2, [r4, #0]
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	6261      	str	r1, [r4, #36]	; 0x24
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800085c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800085e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000860:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000862:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000864:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000866:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000868:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800086a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800086c:	2a00      	cmp	r2, #0
 800086e:	d1c4      	bne.n	80007fa <HAL_I2C_Master_Transmit+0x76>
 8000870:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0c1      	beq.n	80007fa <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000876:	9700      	str	r7, [sp, #0]
 8000878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0020      	movs	r0, r4
 800087e:	f7ff fe39 	bl	80004f4 <I2C_WaitOnFlagUntilTimeout>
 8000882:	2800      	cmp	r0, #0
 8000884:	d1e1      	bne.n	800084a <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000886:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d909      	bls.n	80008a0 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000890:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000892:	045b      	lsls	r3, r3, #17
 8000894:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000896:	9903      	ldr	r1, [sp, #12]
 8000898:	0020      	movs	r0, r4
 800089a:	f7ff fe19 	bl	80004d0 <I2C_TransferConfig>
 800089e:	e7ac      	b.n	80007fa <HAL_I2C_Master_Transmit+0x76>
 80008a0:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80008a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008a4:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80008a6:	b292      	uxth	r2, r2
 80008a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	9000      	str	r0, [sp, #0]
 80008ae:	e7f2      	b.n	8000896 <HAL_I2C_Master_Transmit+0x112>
 80008b0:	fe00e800 	.word	0xfe00e800

080008b4 <HAL_I2C_Mem_Read>:
{
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	9307      	str	r3, [sp, #28]
 80008ba:	ab0e      	add	r3, sp, #56	; 0x38
 80008bc:	9206      	str	r2, [sp, #24]
 80008be:	cb04      	ldmia	r3!, {r2}
 80008c0:	0004      	movs	r4, r0
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	9203      	str	r2, [sp, #12]
 80008c6:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008c8:	0003      	movs	r3, r0
 80008ca:	3341      	adds	r3, #65	; 0x41
 80008cc:	9305      	str	r3, [sp, #20]
 80008ce:	781b      	ldrb	r3, [r3, #0]
{
 80008d0:	000d      	movs	r5, r1
    return HAL_BUSY;
 80008d2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008d4:	2b20      	cmp	r3, #32
 80008d6:	d102      	bne.n	80008de <HAL_I2C_Mem_Read+0x2a>
    if ((pData == NULL) || (Size == 0U))
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d102      	bne.n	80008e2 <HAL_I2C_Mem_Read+0x2e>
        return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
}
 80008de:	b009      	add	sp, #36	; 0x24
 80008e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 80008e2:	9b04      	ldr	r3, [sp, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f9      	beq.n	80008dc <HAL_I2C_Mem_Read+0x28>
    __HAL_LOCK(hi2c);
 80008e8:	0027      	movs	r7, r4
 80008ea:	3740      	adds	r7, #64	; 0x40
 80008ec:	783b      	ldrb	r3, [r7, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d0f5      	beq.n	80008de <HAL_I2C_Mem_Read+0x2a>
 80008f2:	2301      	movs	r3, #1
 80008f4:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80008f6:	f7ff fcc7 	bl	8000288 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80008fa:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80008fc:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80008fe:	9000      	str	r0, [sp, #0]
 8000900:	2319      	movs	r3, #25
 8000902:	2201      	movs	r2, #1
 8000904:	0209      	lsls	r1, r1, #8
 8000906:	0020      	movs	r0, r4
 8000908:	f7ff fdf4 	bl	80004f4 <I2C_WaitOnFlagUntilTimeout>
 800090c:	1e06      	subs	r6, r0, #0
 800090e:	d11f      	bne.n	8000950 <HAL_I2C_Mem_Read+0x9c>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000910:	2322      	movs	r3, #34	; 0x22
 8000912:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000914:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000916:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000918:	0023      	movs	r3, r4
 800091a:	3342      	adds	r3, #66	; 0x42
 800091c:	9305      	str	r3, [sp, #20]
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	9a05      	ldr	r2, [sp, #20]
 8000922:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8000924:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000926:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000928:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800092a:	466b      	mov	r3, sp
 800092c:	8a1b      	ldrh	r3, [r3, #16]
    hi2c->XferISR   = NULL;
 800092e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000930:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000932:	9b02      	ldr	r3, [sp, #8]
 8000934:	9a06      	ldr	r2, [sp, #24]
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800093a:	0020      	movs	r0, r4
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	9b07      	ldr	r3, [sp, #28]
 8000940:	f7ff fe6b 	bl	800061a <I2C_RequestMemoryRead>
 8000944:	2800      	cmp	r0, #0
 8000946:	d005      	beq.n	8000954 <HAL_I2C_Mem_Read+0xa0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000948:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800094a:	703e      	strb	r6, [r7, #0]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800094c:	2b04      	cmp	r3, #4
 800094e:	d0c5      	beq.n	80008dc <HAL_I2C_Mem_Read+0x28>
        return HAL_TIMEOUT;
 8000950:	2003      	movs	r0, #3
 8000952:	e7c4      	b.n	80008de <HAL_I2C_Mem_Read+0x2a>
 8000954:	2390      	movs	r3, #144	; 0x90
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000956:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	2aff      	cmp	r2, #255	; 0xff
 800095c:	d949      	bls.n	80009f2 <HAL_I2C_Mem_Read+0x13e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000968:	0029      	movs	r1, r5
 800096a:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800096c:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800096e:	f7ff fdaf 	bl	80004d0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000972:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000974:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000976:	9b02      	ldr	r3, [sp, #8]
 8000978:	2200      	movs	r2, #0
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2104      	movs	r1, #4
 800097e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000980:	0020      	movs	r0, r4
 8000982:	f7ff fdb7 	bl	80004f4 <I2C_WaitOnFlagUntilTimeout>
 8000986:	2800      	cmp	r0, #0
 8000988:	d1e2      	bne.n	8000950 <HAL_I2C_Mem_Read+0x9c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800098a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	6262      	str	r2, [r4, #36]	; 0x24
 8000990:	6822      	ldr	r2, [r4, #0]
 8000992:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000994:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000996:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000998:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800099a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800099c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800099e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80009a0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80009a2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80009a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d117      	bne.n	80009da <HAL_I2C_Mem_Read+0x126>
 80009aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d014      	beq.n	80009da <HAL_I2C_Mem_Read+0x126>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80009b0:	9b02      	ldr	r3, [sp, #8]
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	0020      	movs	r0, r4
 80009b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80009ba:	f7ff fd9b 	bl	80004f4 <I2C_WaitOnFlagUntilTimeout>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d1c6      	bne.n	8000950 <HAL_I2C_Mem_Read+0x9c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80009c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009c4:	2bff      	cmp	r3, #255	; 0xff
 80009c6:	d91c      	bls.n	8000a02 <HAL_I2C_Mem_Read+0x14e>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80009cc:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80009ce:	045b      	lsls	r3, r3, #17
 80009d0:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80009d2:	0029      	movs	r1, r5
 80009d4:	0020      	movs	r0, r4
 80009d6:	f7ff fd7b 	bl	80004d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80009da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1ca      	bne.n	8000976 <HAL_I2C_Mem_Read+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009e0:	9a02      	ldr	r2, [sp, #8]
 80009e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80009e4:	0020      	movs	r0, r4
 80009e6:	f7ff fe4b 	bl	8000680 <I2C_WaitOnSTOPFlagUntilTimeout>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d010      	beq.n	8000a10 <HAL_I2C_Mem_Read+0x15c>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009f0:	e7ac      	b.n	800094c <HAL_I2C_Mem_Read+0x98>
      hi2c->XferSize = hi2c->XferCount;
 80009f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009f4:	b292      	uxth	r2, r2
 80009f6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	049b      	lsls	r3, r3, #18
 8000a00:	e7b2      	b.n	8000968 <HAL_I2C_Mem_Read+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8000a02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a04:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8000a06:	b292      	uxth	r2, r2
 8000a08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	9000      	str	r0, [sp, #0]
 8000a0e:	e7e0      	b.n	80009d2 <HAL_I2C_Mem_Read+0x11e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a10:	2120      	movs	r1, #32
 8000a12:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000a14:	4d06      	ldr	r5, [pc, #24]	; (8000a30 <HAL_I2C_Mem_Read+0x17c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a16:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	402a      	ands	r2, r5
 8000a1c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a1e:	0023      	movs	r3, r4
 8000a20:	3341      	adds	r3, #65	; 0x41
 8000a22:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000a24:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 8000a26:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000a28:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a2a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000a2c:	e757      	b.n	80008de <HAL_I2C_Mem_Read+0x2a>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	fe00e800 	.word	0xfe00e800

08000a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a36:	0004      	movs	r4, r0
 8000a38:	3441      	adds	r4, #65	; 0x41
 8000a3a:	7822      	ldrb	r2, [r4, #0]
{
 8000a3c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a3e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a40:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a42:	2a20      	cmp	r2, #32
 8000a44:	d118      	bne.n	8000a78 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000a46:	001d      	movs	r5, r3
 8000a48:	3540      	adds	r5, #64	; 0x40
 8000a4a:	782e      	ldrb	r6, [r5, #0]
 8000a4c:	2e01      	cmp	r6, #1
 8000a4e:	d013      	beq.n	8000a78 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000a50:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a52:	3022      	adds	r0, #34	; 0x22
 8000a54:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000a56:	681e      	ldr	r6, [r3, #0]
 8000a58:	3823      	subs	r0, #35	; 0x23
 8000a5a:	4386      	bics	r6, r0
 8000a5c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a5e:	681e      	ldr	r6, [r3, #0]
 8000a60:	4f06      	ldr	r7, [pc, #24]	; (8000a7c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000a62:	403e      	ands	r6, r7
 8000a64:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a66:	681e      	ldr	r6, [r3, #0]
 8000a68:	4331      	orrs	r1, r6
 8000a6a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	4308      	orrs	r0, r1
 8000a70:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a72:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a74:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000a76:	7028      	strb	r0, [r5, #0]
  }
}
 8000a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	ffffefff 	.word	0xffffefff

08000a80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a82:	0005      	movs	r5, r0
 8000a84:	3541      	adds	r5, #65	; 0x41
 8000a86:	782a      	ldrb	r2, [r5, #0]
{
 8000a88:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a8a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a8c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a8e:	2a20      	cmp	r2, #32
 8000a90:	d117      	bne.n	8000ac2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000a92:	001c      	movs	r4, r3
 8000a94:	3440      	adds	r4, #64	; 0x40
 8000a96:	7826      	ldrb	r6, [r4, #0]
 8000a98:	2e01      	cmp	r6, #1
 8000a9a:	d012      	beq.n	8000ac2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000a9c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a9e:	3022      	adds	r0, #34	; 0x22
 8000aa0:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000aa2:	681e      	ldr	r6, [r3, #0]
 8000aa4:	3823      	subs	r0, #35	; 0x23
 8000aa6:	4386      	bics	r6, r0
 8000aa8:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000aaa:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000aac:	4f05      	ldr	r7, [pc, #20]	; (8000ac4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000aae:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000ab0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000ab2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000ab4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	4308      	orrs	r0, r1
 8000aba:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000abc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000abe:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000ac0:	7020      	strb	r0, [r4, #0]
  }
}
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	fffff0ff 	.word	0xfffff0ff

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aca:	6803      	ldr	r3, [r0, #0]
{
 8000acc:	b085      	sub	sp, #20
 8000ace:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad0:	07db      	lsls	r3, r3, #31
 8000ad2:	d42f      	bmi.n	8000b34 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	079b      	lsls	r3, r3, #30
 8000ad8:	d500      	bpl.n	8000adc <HAL_RCC_OscConfig+0x14>
 8000ada:	e081      	b.n	8000be0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	071b      	lsls	r3, r3, #28
 8000ae0:	d500      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x1c>
 8000ae2:	e0bc      	b.n	8000c5e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	075b      	lsls	r3, r3, #29
 8000ae8:	d500      	bpl.n	8000aec <HAL_RCC_OscConfig+0x24>
 8000aea:	e0df      	b.n	8000cac <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	06db      	lsls	r3, r3, #27
 8000af0:	d51a      	bpl.n	8000b28 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000af2:	696a      	ldr	r2, [r5, #20]
 8000af4:	4cb5      	ldr	r4, [pc, #724]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000af6:	2304      	movs	r3, #4
 8000af8:	2a01      	cmp	r2, #1
 8000afa:	d000      	beq.n	8000afe <HAL_RCC_OscConfig+0x36>
 8000afc:	e14b      	b.n	8000d96 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000afe:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b00:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b0c:	f7ff fbbc 	bl	8000288 <HAL_GetTick>
 8000b10:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b14:	4233      	tst	r3, r6
 8000b16:	d100      	bne.n	8000b1a <HAL_RCC_OscConfig+0x52>
 8000b18:	e136      	b.n	8000d88 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b1a:	21f8      	movs	r1, #248	; 0xf8
 8000b1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000b1e:	69ab      	ldr	r3, [r5, #24]
 8000b20:	438a      	bics	r2, r1
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b28:	6a29      	ldr	r1, [r5, #32]
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d000      	beq.n	8000b30 <HAL_RCC_OscConfig+0x68>
 8000b2e:	e159      	b.n	8000de4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
 8000b32:	e013      	b.n	8000b5c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b34:	210c      	movs	r1, #12
 8000b36:	4ca5      	ldr	r4, [pc, #660]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000b38:	6862      	ldr	r2, [r4, #4]
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	2a04      	cmp	r2, #4
 8000b3e:	d006      	beq.n	8000b4e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b40:	6863      	ldr	r3, [r4, #4]
 8000b42:	400b      	ands	r3, r1
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d10b      	bne.n	8000b60 <HAL_RCC_OscConfig+0x98>
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	03db      	lsls	r3, r3, #15
 8000b4c:	d508      	bpl.n	8000b60 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	039b      	lsls	r3, r3, #14
 8000b52:	d5bf      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0xc>
 8000b54:	686b      	ldr	r3, [r5, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1bc      	bne.n	8000ad4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
}
 8000b5c:	b005      	add	sp, #20
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b60:	686b      	ldr	r3, [r5, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d113      	bne.n	8000b8e <HAL_RCC_OscConfig+0xc6>
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	025b      	lsls	r3, r3, #9
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b70:	f7ff fb8a 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b74:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b76:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b78:	02b6      	lsls	r6, r6, #10
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	4233      	tst	r3, r6
 8000b7e:	d1a9      	bne.n	8000ad4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff fb82 	bl	8000288 <HAL_GetTick>
 8000b84:	1bc0      	subs	r0, r0, r7
 8000b86:	2864      	cmp	r0, #100	; 0x64
 8000b88:	d9f7      	bls.n	8000b7a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	e7e6      	b.n	8000b5c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d116      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xf8>
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	4a8e      	ldr	r2, [pc, #568]	; (8000dd0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b98:	4013      	ands	r3, r2
 8000b9a:	6023      	str	r3, [r4, #0]
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	4a8d      	ldr	r2, [pc, #564]	; (8000dd4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba0:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb6f 	bl	8000288 <HAL_GetTick>
 8000baa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	4233      	tst	r3, r6
 8000bb0:	d100      	bne.n	8000bb4 <HAL_RCC_OscConfig+0xec>
 8000bb2:	e78f      	b.n	8000ad4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fb68 	bl	8000288 <HAL_GetTick>
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	2864      	cmp	r0, #100	; 0x64
 8000bbc:	d9f6      	bls.n	8000bac <HAL_RCC_OscConfig+0xe4>
 8000bbe:	e7e4      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d105      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x108>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	02db      	lsls	r3, r3, #11
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	6023      	str	r3, [r4, #0]
 8000bce:	e7ca      	b.n	8000b66 <HAL_RCC_OscConfig+0x9e>
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	4a7f      	ldr	r2, [pc, #508]	; (8000dd0 <HAL_RCC_OscConfig+0x308>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	6023      	str	r3, [r4, #0]
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	4a7e      	ldr	r2, [pc, #504]	; (8000dd4 <HAL_RCC_OscConfig+0x30c>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	e7c6      	b.n	8000b6e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be0:	220c      	movs	r2, #12
 8000be2:	4c7a      	ldr	r4, [pc, #488]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	4213      	tst	r3, r2
 8000be8:	d006      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bea:	6863      	ldr	r3, [r4, #4]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d110      	bne.n	8000c14 <HAL_RCC_OscConfig+0x14c>
 8000bf2:	6863      	ldr	r3, [r4, #4]
 8000bf4:	03db      	lsls	r3, r3, #15
 8000bf6:	d40d      	bmi.n	8000c14 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	079b      	lsls	r3, r3, #30
 8000bfc:	d502      	bpl.n	8000c04 <HAL_RCC_OscConfig+0x13c>
 8000bfe:	68eb      	ldr	r3, [r5, #12]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d1aa      	bne.n	8000b5a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c04:	21f8      	movs	r1, #248	; 0xf8
 8000c06:	6822      	ldr	r2, [r4, #0]
 8000c08:	692b      	ldr	r3, [r5, #16]
 8000c0a:	438a      	bics	r2, r1
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	6023      	str	r3, [r4, #0]
 8000c12:	e763      	b.n	8000adc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c14:	68ea      	ldr	r2, [r5, #12]
 8000c16:	2301      	movs	r3, #1
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d00f      	beq.n	8000c3c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000c1c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000c20:	4313      	orrs	r3, r2
 8000c22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c24:	f7ff fb30 	bl	8000288 <HAL_GetTick>
 8000c28:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	4233      	tst	r3, r6
 8000c2e:	d1e9      	bne.n	8000c04 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c30:	f7ff fb2a 	bl	8000288 <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9f7      	bls.n	8000c2a <HAL_RCC_OscConfig+0x162>
 8000c3a:	e7a6      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000c3c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000c40:	439a      	bics	r2, r3
 8000c42:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fb20 	bl	8000288 <HAL_GetTick>
 8000c48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	4233      	tst	r3, r6
 8000c4e:	d100      	bne.n	8000c52 <HAL_RCC_OscConfig+0x18a>
 8000c50:	e744      	b.n	8000adc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c52:	f7ff fb19 	bl	8000288 <HAL_GetTick>
 8000c56:	1bc0      	subs	r0, r0, r7
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d9f6      	bls.n	8000c4a <HAL_RCC_OscConfig+0x182>
 8000c5c:	e795      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c5e:	69ea      	ldr	r2, [r5, #28]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4c5a      	ldr	r4, [pc, #360]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d010      	beq.n	8000c8a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000c68:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c6a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c70:	f7ff fb0a 	bl	8000288 <HAL_GetTick>
 8000c74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c78:	4233      	tst	r3, r6
 8000c7a:	d000      	beq.n	8000c7e <HAL_RCC_OscConfig+0x1b6>
 8000c7c:	e732      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7e:	f7ff fb03 	bl	8000288 <HAL_GetTick>
 8000c82:	1bc0      	subs	r0, r0, r7
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9f6      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1ae>
 8000c88:	e77f      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c8e:	439a      	bics	r2, r3
 8000c90:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c92:	f7ff faf9 	bl	8000288 <HAL_GetTick>
 8000c96:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c9a:	4233      	tst	r3, r6
 8000c9c:	d100      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1d8>
 8000c9e:	e721      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca0:	f7ff faf2 	bl	8000288 <HAL_GetTick>
 8000ca4:	1bc0      	subs	r0, r0, r7
 8000ca6:	2802      	cmp	r0, #2
 8000ca8:	d9f6      	bls.n	8000c98 <HAL_RCC_OscConfig+0x1d0>
 8000caa:	e76e      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cac:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000cae:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb0:	4c46      	ldr	r4, [pc, #280]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000cb2:	0552      	lsls	r2, r2, #21
 8000cb4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cb6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb8:	4213      	tst	r3, r2
 8000cba:	d108      	bne.n	8000cce <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	69e3      	ldr	r3, [r4, #28]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61e3      	str	r3, [r4, #28]
 8000cc2:	69e3      	ldr	r3, [r4, #28]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	9303      	str	r3, [sp, #12]
 8000cc8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cce:	2780      	movs	r7, #128	; 0x80
 8000cd0:	4e41      	ldr	r6, [pc, #260]	; (8000dd8 <HAL_RCC_OscConfig+0x310>)
 8000cd2:	007f      	lsls	r7, r7, #1
 8000cd4:	6833      	ldr	r3, [r6, #0]
 8000cd6:	423b      	tst	r3, r7
 8000cd8:	d006      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cda:	68ab      	ldr	r3, [r5, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d113      	bne.n	8000d08 <HAL_RCC_OscConfig+0x240>
 8000ce0:	6a22      	ldr	r2, [r4, #32]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	6223      	str	r3, [r4, #32]
 8000ce6:	e030      	b.n	8000d4a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	433b      	orrs	r3, r7
 8000cec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cee:	f7ff facb 	bl	8000288 <HAL_GetTick>
 8000cf2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	423b      	tst	r3, r7
 8000cf8:	d1ef      	bne.n	8000cda <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cfa:	f7ff fac5 	bl	8000288 <HAL_GetTick>
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	1ac0      	subs	r0, r0, r3
 8000d02:	2864      	cmp	r0, #100	; 0x64
 8000d04:	d9f6      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x22c>
 8000d06:	e740      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
 8000d08:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d114      	bne.n	8000d38 <HAL_RCC_OscConfig+0x270>
 8000d0e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d10:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d12:	4393      	bics	r3, r2
 8000d14:	6223      	str	r3, [r4, #32]
 8000d16:	6a23      	ldr	r3, [r4, #32]
 8000d18:	3203      	adds	r2, #3
 8000d1a:	4393      	bics	r3, r2
 8000d1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fab3 	bl	8000288 <HAL_GetTick>
 8000d22:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d24:	6a23      	ldr	r3, [r4, #32]
 8000d26:	423b      	tst	r3, r7
 8000d28:	d025      	beq.n	8000d76 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f7ff faad 	bl	8000288 <HAL_GetTick>
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_RCC_OscConfig+0x314>)
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x25c>
 8000d36:	e728      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d10b      	bne.n	8000d54 <HAL_RCC_OscConfig+0x28c>
 8000d3c:	6a21      	ldr	r1, [r4, #32]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6223      	str	r3, [r4, #32]
 8000d44:	6a23      	ldr	r3, [r4, #32]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fa9d 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d50:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d52:	e00d      	b.n	8000d70 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	6a23      	ldr	r3, [r4, #32]
 8000d56:	4393      	bics	r3, r2
 8000d58:	2204      	movs	r2, #4
 8000d5a:	6223      	str	r3, [r4, #32]
 8000d5c:	6a23      	ldr	r3, [r4, #32]
 8000d5e:	4393      	bics	r3, r2
 8000d60:	e7c0      	b.n	8000ce4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f7ff fa91 	bl	8000288 <HAL_GetTick>
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_RCC_OscConfig+0x314>)
 8000d68:	1b80      	subs	r0, r0, r6
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d900      	bls.n	8000d70 <HAL_RCC_OscConfig+0x2a8>
 8000d6e:	e70c      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d70:	6a23      	ldr	r3, [r4, #32]
 8000d72:	423b      	tst	r3, r7
 8000d74:	d0f5      	beq.n	8000d62 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000d76:	9b00      	ldr	r3, [sp, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d000      	beq.n	8000d7e <HAL_RCC_OscConfig+0x2b6>
 8000d7c:	e6b6      	b.n	8000aec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d7e:	69e3      	ldr	r3, [r4, #28]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_RCC_OscConfig+0x318>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	61e3      	str	r3, [r4, #28]
 8000d86:	e6b1      	b.n	8000aec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d88:	f7ff fa7e 	bl	8000288 <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d800      	bhi.n	8000d94 <HAL_RCC_OscConfig+0x2cc>
 8000d92:	e6be      	b.n	8000b12 <HAL_RCC_OscConfig+0x4a>
 8000d94:	e6f9      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d96:	3205      	adds	r2, #5
 8000d98:	d103      	bne.n	8000da2 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d9c:	439a      	bics	r2, r3
 8000d9e:	6362      	str	r2, [r4, #52]	; 0x34
 8000da0:	e6bb      	b.n	8000b1a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000da2:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000da4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000da6:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000da8:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000daa:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dae:	4393      	bics	r3, r2
 8000db0:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000db2:	f7ff fa69 	bl	8000288 <HAL_GetTick>
 8000db6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dba:	4233      	tst	r3, r6
 8000dbc:	d100      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x2f8>
 8000dbe:	e6b3      	b.n	8000b28 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000dc0:	f7ff fa62 	bl	8000288 <HAL_GetTick>
 8000dc4:	1bc0      	subs	r0, r0, r7
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
 8000dca:	e6de      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	fffeffff 	.word	0xfffeffff
 8000dd4:	fffbffff 	.word	0xfffbffff
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	00001388 	.word	0x00001388
 8000de0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de4:	220c      	movs	r2, #12
 8000de6:	4c26      	ldr	r4, [pc, #152]	; (8000e80 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x32c>
 8000df2:	e6b3      	b.n	8000b5c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_RCC_OscConfig+0x3bc>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfc:	2902      	cmp	r1, #2
 8000dfe:	d12f      	bne.n	8000e60 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000e00:	f7ff fa42 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e04:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e08:	04b6      	lsls	r6, r6, #18
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	4233      	tst	r3, r6
 8000e0e:	d121      	bne.n	8000e54 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e10:	220f      	movs	r2, #15
 8000e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e14:	4393      	bics	r3, r2
 8000e16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e20:	6862      	ldr	r2, [r4, #4]
 8000e22:	430b      	orrs	r3, r1
 8000e24:	4918      	ldr	r1, [pc, #96]	; (8000e88 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e26:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e28:	400a      	ands	r2, r1
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	045b      	lsls	r3, r3, #17
 8000e34:	4313      	orrs	r3, r2
 8000e36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff fa26 	bl	8000288 <HAL_GetTick>
 8000e3c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e3e:	04ad      	lsls	r5, r5, #18
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	422b      	tst	r3, r5
 8000e44:	d000      	beq.n	8000e48 <HAL_RCC_OscConfig+0x380>
 8000e46:	e673      	b.n	8000b30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e48:	f7ff fa1e 	bl	8000288 <HAL_GetTick>
 8000e4c:	1b80      	subs	r0, r0, r6
 8000e4e:	2802      	cmp	r0, #2
 8000e50:	d9f6      	bls.n	8000e40 <HAL_RCC_OscConfig+0x378>
 8000e52:	e69a      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fa18 	bl	8000288 <HAL_GetTick>
 8000e58:	1bc0      	subs	r0, r0, r7
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d9d5      	bls.n	8000e0a <HAL_RCC_OscConfig+0x342>
 8000e5e:	e694      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000e60:	f7ff fa12 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e66:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e68:	04ad      	lsls	r5, r5, #18
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	422b      	tst	r3, r5
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3aa>
 8000e70:	e65e      	b.n	8000b30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff fa09 	bl	8000288 <HAL_GetTick>
 8000e76:	1b80      	subs	r0, r0, r6
 8000e78:	2802      	cmp	r0, #2
 8000e7a:	d9f6      	bls.n	8000e6a <HAL_RCC_OscConfig+0x3a2>
 8000e7c:	e685      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40021000 	.word	0x40021000
 8000e84:	feffffff 	.word	0xfeffffff
 8000e88:	ffc2ffff 	.word	0xffc2ffff

08000e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e8e:	4c14      	ldr	r4, [pc, #80]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000e90:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e92:	2210      	movs	r2, #16
 8000e94:	0021      	movs	r1, r4
 8000e96:	4668      	mov	r0, sp
 8000e98:	f000 fefa 	bl	8001c90 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	ad04      	add	r5, sp, #16
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	3110      	adds	r1, #16
 8000ea4:	0028      	movs	r0, r5
 8000ea6:	f000 fef3 	bl	8001c90 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eaa:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000eac:	4e0d      	ldr	r6, [pc, #52]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000eae:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	2a08      	cmp	r2, #8
 8000eb4:	d111      	bne.n	8000eda <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	466a      	mov	r2, sp
 8000eba:	0c99      	lsrs	r1, r3, #18
 8000ebc:	4001      	ands	r1, r0
 8000ebe:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ec0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000ec2:	4002      	ands	r2, r0
 8000ec4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ec6:	03db      	lsls	r3, r3, #15
 8000ec8:	d505      	bpl.n	8000ed6 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ecc:	f7ff f926 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000ed0:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ed2:	b008      	add	sp, #32
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_RCC_GetSysClockFreq+0x60>)
 8000ed8:	e7fa      	b.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000edc:	e7f9      	b.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x46>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	08001ccc 	.word	0x08001ccc
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	007a1200 	.word	0x007a1200
 8000eec:	003d0900 	.word	0x003d0900

08000ef0 <HAL_RCC_ClockConfig>:
{
 8000ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4c43      	ldr	r4, [pc, #268]	; (8001004 <HAL_RCC_ClockConfig+0x114>)
{
 8000ef6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ef8:	6823      	ldr	r3, [r4, #0]
{
 8000efa:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000efc:	4013      	ands	r3, r2
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d31c      	bcc.n	8000f3c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f02:	6832      	ldr	r2, [r6, #0]
 8000f04:	0793      	lsls	r3, r2, #30
 8000f06:	d423      	bmi.n	8000f50 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f08:	07d3      	lsls	r3, r2, #31
 8000f0a:	d429      	bmi.n	8000f60 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	401a      	ands	r2, r3
 8000f12:	4297      	cmp	r7, r2
 8000f14:	d367      	bcc.n	8000fe6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f16:	6833      	ldr	r3, [r6, #0]
 8000f18:	4c3b      	ldr	r4, [pc, #236]	; (8001008 <HAL_RCC_ClockConfig+0x118>)
 8000f1a:	075b      	lsls	r3, r3, #29
 8000f1c:	d46a      	bmi.n	8000ff4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f1e:	f7ff ffb5 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	4a39      	ldr	r2, [pc, #228]	; (800100c <HAL_RCC_ClockConfig+0x11c>)
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	0f1b      	lsrs	r3, r3, #28
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	40d8      	lsrs	r0, r3
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_RCC_ClockConfig+0x120>)
 8000f30:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff f97e 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	4393      	bics	r3, r2
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	4013      	ands	r3, r2
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d0da      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
}
 8000f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f50:	20f0      	movs	r0, #240	; 0xf0
 8000f52:	492d      	ldr	r1, [pc, #180]	; (8001008 <HAL_RCC_ClockConfig+0x118>)
 8000f54:	684b      	ldr	r3, [r1, #4]
 8000f56:	4383      	bics	r3, r0
 8000f58:	68b0      	ldr	r0, [r6, #8]
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	604b      	str	r3, [r1, #4]
 8000f5e:	e7d3      	b.n	8000f08 <HAL_RCC_ClockConfig+0x18>
 8000f60:	4d29      	ldr	r5, [pc, #164]	; (8001008 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f62:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f64:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d11a      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	d5ee      	bpl.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f6e:	2103      	movs	r1, #3
 8000f70:	686b      	ldr	r3, [r5, #4]
 8000f72:	438b      	bics	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000f78:	f7ff f986 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f7e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d115      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f84:	220c      	movs	r2, #12
 8000f86:	686b      	ldr	r3, [r5, #4]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d0be      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8e:	f7ff f97b 	bl	8000288 <HAL_GetTick>
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	1ac0      	subs	r0, r0, r3
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_RCC_ClockConfig+0x124>)
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d9f3      	bls.n	8000f84 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	e7d6      	b.n	8000f4e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fa0:	2a02      	cmp	r2, #2
 8000fa2:	d102      	bne.n	8000faa <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	d4e2      	bmi.n	8000f6e <HAL_RCC_ClockConfig+0x7e>
 8000fa8:	e7d0      	b.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000faa:	079b      	lsls	r3, r3, #30
 8000fac:	d4df      	bmi.n	8000f6e <HAL_RCC_ClockConfig+0x7e>
 8000fae:	e7cd      	b.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d012      	beq.n	8000fda <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	686b      	ldr	r3, [r5, #4]
 8000fb8:	4213      	tst	r3, r2
 8000fba:	d0a7      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbc:	f7ff f964 	bl	8000288 <HAL_GetTick>
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	1ac0      	subs	r0, r0, r3
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_RCC_ClockConfig+0x124>)
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d9f4      	bls.n	8000fb4 <HAL_RCC_ClockConfig+0xc4>
 8000fca:	e7e7      	b.n	8000f9c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fcc:	f7ff f95c 	bl	8000288 <HAL_GetTick>
 8000fd0:	9b01      	ldr	r3, [sp, #4]
 8000fd2:	1ac0      	subs	r0, r0, r3
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_RCC_ClockConfig+0x124>)
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d8e0      	bhi.n	8000f9c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	686b      	ldr	r3, [r5, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d1f3      	bne.n	8000fcc <HAL_RCC_ClockConfig+0xdc>
 8000fe4:	e792      	b.n	8000f0c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	439a      	bics	r2, r3
 8000fea:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	421a      	tst	r2, r3
 8000ff0:	d1ac      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
 8000ff2:	e790      	b.n	8000f16 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_RCC_ClockConfig+0x128>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68f2      	ldr	r2, [r6, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	6063      	str	r3, [r4, #4]
 8001000:	e78d      	b.n	8000f1e <HAL_RCC_ClockConfig+0x2e>
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40022000 	.word	0x40022000
 8001008:	40021000 	.word	0x40021000
 800100c:	08001cec 	.word	0x08001cec
 8001010:	20000000 	.word	0x20000000
 8001014:	00001388 	.word	0x00001388
 8001018:	fffff8ff 	.word	0xfffff8ff

0800101c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <HAL_RCC_GetHCLKFreq+0x8>)
 800101e:	6818      	ldr	r0, [r3, #0]
}
 8001020:	4770      	bx	lr
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800102a:	6803      	ldr	r3, [r0, #0]
{
 800102c:	b085      	sub	sp, #20
 800102e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001030:	03db      	lsls	r3, r3, #15
 8001032:	d528      	bpl.n	8001086 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001034:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001036:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001038:	4c3b      	ldr	r4, [pc, #236]	; (8001128 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800103a:	0552      	lsls	r2, r2, #21
 800103c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800103e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001040:	4213      	tst	r3, r2
 8001042:	d108      	bne.n	8001056 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	69e3      	ldr	r3, [r4, #28]
 8001046:	4313      	orrs	r3, r2
 8001048:	61e3      	str	r3, [r4, #28]
 800104a:	69e3      	ldr	r3, [r4, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	9303      	str	r3, [sp, #12]
 8001050:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001052:	2301      	movs	r3, #1
 8001054:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	2780      	movs	r7, #128	; 0x80
 8001058:	4e34      	ldr	r6, [pc, #208]	; (800112c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800105a:	007f      	lsls	r7, r7, #1
 800105c:	6833      	ldr	r3, [r6, #0]
 800105e:	423b      	tst	r3, r7
 8001060:	d02f      	beq.n	80010c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001062:	22c0      	movs	r2, #192	; 0xc0
 8001064:	6a23      	ldr	r3, [r4, #32]
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	4e31      	ldr	r6, [pc, #196]	; (8001130 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800106c:	d13b      	bne.n	80010e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800106e:	6a23      	ldr	r3, [r4, #32]
 8001070:	401e      	ands	r6, r3
 8001072:	686b      	ldr	r3, [r5, #4]
 8001074:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001076:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001078:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800107a:	2b01      	cmp	r3, #1
 800107c:	d103      	bne.n	8001086 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	69e3      	ldr	r3, [r4, #28]
 8001080:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001082:	4013      	ands	r3, r2
 8001084:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001086:	682a      	ldr	r2, [r5, #0]
 8001088:	07d3      	lsls	r3, r2, #31
 800108a:	d506      	bpl.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800108c:	2003      	movs	r0, #3
 800108e:	4926      	ldr	r1, [pc, #152]	; (8001128 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001090:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001092:	4383      	bics	r3, r0
 8001094:	68a8      	ldr	r0, [r5, #8]
 8001096:	4303      	orrs	r3, r0
 8001098:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800109a:	0693      	lsls	r3, r2, #26
 800109c:	d506      	bpl.n	80010ac <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800109e:	2010      	movs	r0, #16
 80010a0:	4921      	ldr	r1, [pc, #132]	; (8001128 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80010a2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010a4:	4383      	bics	r3, r0
 80010a6:	68e8      	ldr	r0, [r5, #12]
 80010a8:	4303      	orrs	r3, r0
 80010aa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80010ac:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80010ae:	0553      	lsls	r3, r2, #21
 80010b0:	d517      	bpl.n	80010e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80010b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b8:	438b      	bics	r3, r1
 80010ba:	6929      	ldr	r1, [r5, #16]
 80010bc:	430b      	orrs	r3, r1
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	e00f      	b.n	80010e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c2:	6833      	ldr	r3, [r6, #0]
 80010c4:	433b      	orrs	r3, r7
 80010c6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010c8:	f7ff f8de 	bl	8000288 <HAL_GetTick>
 80010cc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	6833      	ldr	r3, [r6, #0]
 80010d0:	423b      	tst	r3, r7
 80010d2:	d1c6      	bne.n	8001062 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d4:	f7ff f8d8 	bl	8000288 <HAL_GetTick>
 80010d8:	9b01      	ldr	r3, [sp, #4]
 80010da:	1ac0      	subs	r0, r0, r3
 80010dc:	2864      	cmp	r0, #100	; 0x64
 80010de:	d9f6      	bls.n	80010ce <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 80010e0:	2003      	movs	r0, #3
}
 80010e2:	b005      	add	sp, #20
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010e6:	6869      	ldr	r1, [r5, #4]
 80010e8:	400a      	ands	r2, r1
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d0bf      	beq.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010ee:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010f0:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80010f2:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010f4:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80010f6:	025b      	lsls	r3, r3, #9
 80010f8:	4303      	orrs	r3, r0
 80010fa:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010fc:	6a23      	ldr	r3, [r4, #32]
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001100:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001102:	4003      	ands	r3, r0
 8001104:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001106:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001108:	07d3      	lsls	r3, r2, #31
 800110a:	d5b0      	bpl.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800110c:	f7ff f8bc 	bl	8000288 <HAL_GetTick>
 8001110:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001112:	2202      	movs	r2, #2
 8001114:	6a23      	ldr	r3, [r4, #32]
 8001116:	4213      	tst	r3, r2
 8001118:	d1a9      	bne.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111a:	f7ff f8b5 	bl	8000288 <HAL_GetTick>
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001120:	1bc0      	subs	r0, r0, r7
 8001122:	4298      	cmp	r0, r3
 8001124:	d9f5      	bls.n	8001112 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001126:	e7db      	b.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001128:	40021000 	.word	0x40021000
 800112c:	40007000 	.word	0x40007000
 8001130:	fffffcff 	.word	0xfffffcff
 8001134:	efffffff 	.word	0xefffffff
 8001138:	fffeffff 	.word	0xfffeffff
 800113c:	00001388 	.word	0x00001388

08001140 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001140:	2201      	movs	r2, #1
 8001142:	6a03      	ldr	r3, [r0, #32]
{
 8001144:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001146:	4393      	bics	r3, r2
 8001148:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800114a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800114c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800114e:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001150:	3272      	adds	r2, #114	; 0x72
 8001152:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001154:	680a      	ldr	r2, [r1, #0]
 8001156:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001158:	2202      	movs	r2, #2
 800115a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800115c:	688a      	ldr	r2, [r1, #8]
 800115e:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <TIM_OC1_SetConfig+0x74>)
 8001162:	4290      	cmp	r0, r2
 8001164:	d008      	beq.n	8001178 <TIM_OC1_SetConfig+0x38>
 8001166:	4e14      	ldr	r6, [pc, #80]	; (80011b8 <TIM_OC1_SetConfig+0x78>)
 8001168:	42b0      	cmp	r0, r6
 800116a:	d005      	beq.n	8001178 <TIM_OC1_SetConfig+0x38>
 800116c:	4e13      	ldr	r6, [pc, #76]	; (80011bc <TIM_OC1_SetConfig+0x7c>)
 800116e:	42b0      	cmp	r0, r6
 8001170:	d002      	beq.n	8001178 <TIM_OC1_SetConfig+0x38>
 8001172:	4e13      	ldr	r6, [pc, #76]	; (80011c0 <TIM_OC1_SetConfig+0x80>)
 8001174:	42b0      	cmp	r0, r6
 8001176:	d116      	bne.n	80011a6 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001178:	2608      	movs	r6, #8
 800117a:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800117c:	68ce      	ldr	r6, [r1, #12]
 800117e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001180:	2604      	movs	r6, #4
 8001182:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001184:	4290      	cmp	r0, r2
 8001186:	d008      	beq.n	800119a <TIM_OC1_SetConfig+0x5a>
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <TIM_OC1_SetConfig+0x78>)
 800118a:	4290      	cmp	r0, r2
 800118c:	d005      	beq.n	800119a <TIM_OC1_SetConfig+0x5a>
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <TIM_OC1_SetConfig+0x7c>)
 8001190:	4290      	cmp	r0, r2
 8001192:	d002      	beq.n	800119a <TIM_OC1_SetConfig+0x5a>
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <TIM_OC1_SetConfig+0x80>)
 8001196:	4290      	cmp	r0, r2
 8001198:	d105      	bne.n	80011a6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800119c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800119e:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80011a0:	694c      	ldr	r4, [r1, #20]
 80011a2:	4334      	orrs	r4, r6
 80011a4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011a6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80011a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80011aa:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80011ac:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011ae:	6203      	str	r3, [r0, #32]
}
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	40014000 	.word	0x40014000
 80011bc:	40014400 	.word	0x40014400
 80011c0:	40014800 	.word	0x40014800
 80011c4:	fffffcff 	.word	0xfffffcff

080011c8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011ca:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011cc:	6a03      	ldr	r3, [r0, #32]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <TIM_OC3_SetConfig+0x64>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80011d4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80011d6:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80011d8:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011da:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011dc:	680d      	ldr	r5, [r1, #0]
 80011de:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80011e0:	4d13      	ldr	r5, [pc, #76]	; (8001230 <TIM_OC3_SetConfig+0x68>)
 80011e2:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011e4:	688d      	ldr	r5, [r1, #8]
 80011e6:	022d      	lsls	r5, r5, #8
 80011e8:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80011ea:	4d12      	ldr	r5, [pc, #72]	; (8001234 <TIM_OC3_SetConfig+0x6c>)
 80011ec:	42a8      	cmp	r0, r5
 80011ee:	d10e      	bne.n	800120e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80011f0:	4d11      	ldr	r5, [pc, #68]	; (8001238 <TIM_OC3_SetConfig+0x70>)
 80011f2:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80011f4:	68cb      	ldr	r3, [r1, #12]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80011fa:	4d10      	ldr	r5, [pc, #64]	; (800123c <TIM_OC3_SetConfig+0x74>)
 80011fc:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80011fe:	4d10      	ldr	r5, [pc, #64]	; (8001240 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001200:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001202:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001204:	698a      	ldr	r2, [r1, #24]
 8001206:	4332      	orrs	r2, r6
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	432a      	orrs	r2, r5
 800120c:	e008      	b.n	8001220 <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800120e:	4d0d      	ldr	r5, [pc, #52]	; (8001244 <TIM_OC3_SetConfig+0x7c>)
 8001210:	42a8      	cmp	r0, r5
 8001212:	d0f4      	beq.n	80011fe <TIM_OC3_SetConfig+0x36>
 8001214:	4d0c      	ldr	r5, [pc, #48]	; (8001248 <TIM_OC3_SetConfig+0x80>)
 8001216:	42a8      	cmp	r0, r5
 8001218:	d0f1      	beq.n	80011fe <TIM_OC3_SetConfig+0x36>
 800121a:	4d0c      	ldr	r5, [pc, #48]	; (800124c <TIM_OC3_SetConfig+0x84>)
 800121c:	42a8      	cmp	r0, r5
 800121e:	d0ee      	beq.n	80011fe <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001220:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001222:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001224:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001226:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001228:	6203      	str	r3, [r0, #32]
}
 800122a:	bd70      	pop	{r4, r5, r6, pc}
 800122c:	fffffeff 	.word	0xfffffeff
 8001230:	fffffdff 	.word	0xfffffdff
 8001234:	40012c00 	.word	0x40012c00
 8001238:	fffff7ff 	.word	0xfffff7ff
 800123c:	fffffbff 	.word	0xfffffbff
 8001240:	ffffcfff 	.word	0xffffcfff
 8001244:	40014000 	.word	0x40014000
 8001248:	40014400 	.word	0x40014400
 800124c:	40014800 	.word	0x40014800

08001250 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001250:	6a03      	ldr	r3, [r0, #32]
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <TIM_OC4_SetConfig+0x54>)
{
 8001254:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001256:	4013      	ands	r3, r2
 8001258:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800125a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800125c:	4c12      	ldr	r4, [pc, #72]	; (80012a8 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800125e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001260:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001262:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001264:	680c      	ldr	r4, [r1, #0]
 8001266:	0224      	lsls	r4, r4, #8
 8001268:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800126a:	4c10      	ldr	r4, [pc, #64]	; (80012ac <TIM_OC4_SetConfig+0x5c>)
 800126c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800126e:	688c      	ldr	r4, [r1, #8]
 8001270:	0324      	lsls	r4, r4, #12
 8001272:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001274:	4c0e      	ldr	r4, [pc, #56]	; (80012b0 <TIM_OC4_SetConfig+0x60>)
 8001276:	42a0      	cmp	r0, r4
 8001278:	d008      	beq.n	800128c <TIM_OC4_SetConfig+0x3c>
 800127a:	4c0e      	ldr	r4, [pc, #56]	; (80012b4 <TIM_OC4_SetConfig+0x64>)
 800127c:	42a0      	cmp	r0, r4
 800127e:	d005      	beq.n	800128c <TIM_OC4_SetConfig+0x3c>
 8001280:	4c0d      	ldr	r4, [pc, #52]	; (80012b8 <TIM_OC4_SetConfig+0x68>)
 8001282:	42a0      	cmp	r0, r4
 8001284:	d002      	beq.n	800128c <TIM_OC4_SetConfig+0x3c>
 8001286:	4c0d      	ldr	r4, [pc, #52]	; (80012bc <TIM_OC4_SetConfig+0x6c>)
 8001288:	42a0      	cmp	r0, r4
 800128a:	d104      	bne.n	8001296 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800128c:	4c0c      	ldr	r4, [pc, #48]	; (80012c0 <TIM_OC4_SetConfig+0x70>)
 800128e:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001290:	694c      	ldr	r4, [r1, #20]
 8001292:	01a4      	lsls	r4, r4, #6
 8001294:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001296:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001298:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800129a:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800129c:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800129e:	6202      	str	r2, [r0, #32]
}
 80012a0:	bd30      	pop	{r4, r5, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	ffffefff 	.word	0xffffefff
 80012a8:	ffff8cff 	.word	0xffff8cff
 80012ac:	ffffdfff 	.word	0xffffdfff
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	40014000 	.word	0x40014000
 80012b8:	40014400 	.word	0x40014400
 80012bc:	40014800 	.word	0x40014800
 80012c0:	ffffbfff 	.word	0xffffbfff

080012c4 <HAL_TIM_PWM_MspInit>:
 80012c4:	4770      	bx	lr
	...

080012c8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <TIM_Base_SetConfig+0x84>)
{
 80012ca:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80012cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012ce:	4290      	cmp	r0, r2
 80012d0:	d006      	beq.n	80012e0 <TIM_Base_SetConfig+0x18>
 80012d2:	2480      	movs	r4, #128	; 0x80
 80012d4:	05e4      	lsls	r4, r4, #23
 80012d6:	42a0      	cmp	r0, r4
 80012d8:	d002      	beq.n	80012e0 <TIM_Base_SetConfig+0x18>
 80012da:	4c1d      	ldr	r4, [pc, #116]	; (8001350 <TIM_Base_SetConfig+0x88>)
 80012dc:	42a0      	cmp	r0, r4
 80012de:	d10c      	bne.n	80012fa <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e0:	2470      	movs	r4, #112	; 0x70
 80012e2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80012e4:	684c      	ldr	r4, [r1, #4]
 80012e6:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012e8:	4290      	cmp	r0, r2
 80012ea:	d012      	beq.n	8001312 <TIM_Base_SetConfig+0x4a>
 80012ec:	2480      	movs	r4, #128	; 0x80
 80012ee:	05e4      	lsls	r4, r4, #23
 80012f0:	42a0      	cmp	r0, r4
 80012f2:	d00e      	beq.n	8001312 <TIM_Base_SetConfig+0x4a>
 80012f4:	4c16      	ldr	r4, [pc, #88]	; (8001350 <TIM_Base_SetConfig+0x88>)
 80012f6:	42a0      	cmp	r0, r4
 80012f8:	d00b      	beq.n	8001312 <TIM_Base_SetConfig+0x4a>
 80012fa:	4c16      	ldr	r4, [pc, #88]	; (8001354 <TIM_Base_SetConfig+0x8c>)
 80012fc:	42a0      	cmp	r0, r4
 80012fe:	d008      	beq.n	8001312 <TIM_Base_SetConfig+0x4a>
 8001300:	4c15      	ldr	r4, [pc, #84]	; (8001358 <TIM_Base_SetConfig+0x90>)
 8001302:	42a0      	cmp	r0, r4
 8001304:	d005      	beq.n	8001312 <TIM_Base_SetConfig+0x4a>
 8001306:	4c15      	ldr	r4, [pc, #84]	; (800135c <TIM_Base_SetConfig+0x94>)
 8001308:	42a0      	cmp	r0, r4
 800130a:	d002      	beq.n	8001312 <TIM_Base_SetConfig+0x4a>
 800130c:	4c14      	ldr	r4, [pc, #80]	; (8001360 <TIM_Base_SetConfig+0x98>)
 800130e:	42a0      	cmp	r0, r4
 8001310:	d103      	bne.n	800131a <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001312:	4c14      	ldr	r4, [pc, #80]	; (8001364 <TIM_Base_SetConfig+0x9c>)
 8001314:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001316:	68cc      	ldr	r4, [r1, #12]
 8001318:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800131a:	2480      	movs	r4, #128	; 0x80
 800131c:	43a3      	bics	r3, r4
 800131e:	694c      	ldr	r4, [r1, #20]
 8001320:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001322:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001324:	688b      	ldr	r3, [r1, #8]
 8001326:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001328:	680b      	ldr	r3, [r1, #0]
 800132a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800132c:	4290      	cmp	r0, r2
 800132e:	d008      	beq.n	8001342 <TIM_Base_SetConfig+0x7a>
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <TIM_Base_SetConfig+0x90>)
 8001332:	4298      	cmp	r0, r3
 8001334:	d005      	beq.n	8001342 <TIM_Base_SetConfig+0x7a>
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <TIM_Base_SetConfig+0x94>)
 8001338:	4298      	cmp	r0, r3
 800133a:	d002      	beq.n	8001342 <TIM_Base_SetConfig+0x7a>
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <TIM_Base_SetConfig+0x98>)
 800133e:	4298      	cmp	r0, r3
 8001340:	d101      	bne.n	8001346 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001342:	690b      	ldr	r3, [r1, #16]
 8001344:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001346:	2301      	movs	r3, #1
 8001348:	6143      	str	r3, [r0, #20]
}
 800134a:	bd10      	pop	{r4, pc}
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40000400 	.word	0x40000400
 8001354:	40002000 	.word	0x40002000
 8001358:	40014000 	.word	0x40014000
 800135c:	40014400 	.word	0x40014400
 8001360:	40014800 	.word	0x40014800
 8001364:	fffffcff 	.word	0xfffffcff

08001368 <HAL_TIM_Base_Init>:
{
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
  if(htim == NULL)
 800136e:	2c00      	cmp	r4, #0
 8001370:	d014      	beq.n	800139c <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001372:	0025      	movs	r5, r4
 8001374:	353d      	adds	r5, #61	; 0x3d
 8001376:	782b      	ldrb	r3, [r5, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800137e:	0022      	movs	r2, r4
 8001380:	323c      	adds	r2, #60	; 0x3c
 8001382:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001384:	0020      	movs	r0, r4
 8001386:	f000 fbbf 	bl	8001b08 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800138a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800138c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800138e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001390:	1d21      	adds	r1, r4, #4
 8001392:	f7ff ff99 	bl	80012c8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001396:	2301      	movs	r3, #1
  return HAL_OK;
 8001398:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800139a:	702b      	strb	r3, [r5, #0]
}
 800139c:	bd70      	pop	{r4, r5, r6, pc}

0800139e <HAL_TIM_PWM_Init>:
{
 800139e:	b570      	push	{r4, r5, r6, lr}
 80013a0:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013a2:	2001      	movs	r0, #1
  if(htim == NULL)
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d014      	beq.n	80013d2 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80013a8:	0025      	movs	r5, r4
 80013aa:	353d      	adds	r5, #61	; 0x3d
 80013ac:	782b      	ldrb	r3, [r5, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80013b4:	0022      	movs	r2, r4
 80013b6:	323c      	adds	r2, #60	; 0x3c
 80013b8:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80013ba:	0020      	movs	r0, r4
 80013bc:	f7ff ff82 	bl	80012c4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80013c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80013c4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c6:	1d21      	adds	r1, r4, #4
 80013c8:	f7ff ff7e 	bl	80012c8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80013cc:	2301      	movs	r3, #1
  return HAL_OK;
 80013ce:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80013d0:	702b      	strb	r3, [r5, #0]
}
 80013d2:	bd70      	pop	{r4, r5, r6, pc}

080013d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013d4:	2210      	movs	r2, #16
 80013d6:	6a03      	ldr	r3, [r0, #32]
{
 80013d8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013da:	4393      	bics	r3, r2
 80013dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80013de:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80013e0:	4d16      	ldr	r5, [pc, #88]	; (800143c <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 80013e2:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80013e4:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80013e6:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013e8:	680d      	ldr	r5, [r1, #0]
 80013ea:	022d      	lsls	r5, r5, #8
 80013ec:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80013ee:	2520      	movs	r5, #32
 80013f0:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80013f2:	688d      	ldr	r5, [r1, #8]
 80013f4:	012d      	lsls	r5, r5, #4
 80013f6:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80013f8:	4d11      	ldr	r5, [pc, #68]	; (8001440 <TIM_OC2_SetConfig+0x6c>)
 80013fa:	42a8      	cmp	r0, r5
 80013fc:	d10f      	bne.n	800141e <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80013fe:	2580      	movs	r5, #128	; 0x80
 8001400:	43aa      	bics	r2, r5
 8001402:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001404:	68ca      	ldr	r2, [r1, #12]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800140a:	2540      	movs	r5, #64	; 0x40
 800140c:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800140e:	4d0d      	ldr	r5, [pc, #52]	; (8001444 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001410:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001412:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001414:	698b      	ldr	r3, [r1, #24]
 8001416:	4333      	orrs	r3, r6
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	432b      	orrs	r3, r5
 800141c:	e008      	b.n	8001430 <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800141e:	4d0a      	ldr	r5, [pc, #40]	; (8001448 <TIM_OC2_SetConfig+0x74>)
 8001420:	42a8      	cmp	r0, r5
 8001422:	d0f4      	beq.n	800140e <TIM_OC2_SetConfig+0x3a>
 8001424:	4d09      	ldr	r5, [pc, #36]	; (800144c <TIM_OC2_SetConfig+0x78>)
 8001426:	42a8      	cmp	r0, r5
 8001428:	d0f1      	beq.n	800140e <TIM_OC2_SetConfig+0x3a>
 800142a:	4d09      	ldr	r5, [pc, #36]	; (8001450 <TIM_OC2_SetConfig+0x7c>)
 800142c:	42a8      	cmp	r0, r5
 800142e:	d0ee      	beq.n	800140e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8001430:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001432:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001434:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001436:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001438:	6202      	str	r2, [r0, #32]
}
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	ffff8cff 	.word	0xffff8cff
 8001440:	40012c00 	.word	0x40012c00
 8001444:	fffff3ff 	.word	0xfffff3ff
 8001448:	40014000 	.word	0x40014000
 800144c:	40014400 	.word	0x40014400
 8001450:	40014800 	.word	0x40014800

08001454 <HAL_TIM_PWM_ConfigChannel>:
{
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001456:	0006      	movs	r6, r0
 8001458:	2302      	movs	r3, #2
 800145a:	363c      	adds	r6, #60	; 0x3c
{
 800145c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800145e:	7831      	ldrb	r1, [r6, #0]
{
 8001460:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001462:	0018      	movs	r0, r3
 8001464:	2901      	cmp	r1, #1
 8001466:	d025      	beq.n	80014b4 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001468:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 800146a:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800146c:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 800146e:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001470:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8001472:	2a0c      	cmp	r2, #12
 8001474:	d81a      	bhi.n	80014ac <HAL_TIM_PWM_ConfigChannel+0x58>
 8001476:	0010      	movs	r0, r2
 8001478:	f7fe fe46 	bl	8000108 <__gnu_thumb1_case_uqi>
 800147c:	18181807 	.word	0x18181807
 8001480:	1818181d 	.word	0x1818181d
 8001484:	1818182f 	.word	0x1818182f
 8001488:	41          	.byte	0x41
 8001489:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800148a:	0029      	movs	r1, r5
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f7ff fe57 	bl	8001140 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001492:	2208      	movs	r2, #8
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	6999      	ldr	r1, [r3, #24]
 8001498:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800149a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800149c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800149e:	699a      	ldr	r2, [r3, #24]
 80014a0:	438a      	bics	r2, r1
 80014a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014a8:	430a      	orrs	r2, r1
 80014aa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80014ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80014ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014b0:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 80014b2:	7030      	strb	r0, [r6, #0]
}
 80014b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80014b6:	0029      	movs	r1, r5
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f7ff ff8b 	bl	80013d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	6999      	ldr	r1, [r3, #24]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	4915      	ldr	r1, [pc, #84]	; (8001524 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014d2:	692a      	ldr	r2, [r5, #16]
 80014d4:	6999      	ldr	r1, [r3, #24]
 80014d6:	0212      	lsls	r2, r2, #8
 80014d8:	e7e6      	b.n	80014a8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014da:	0029      	movs	r1, r5
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	f7ff fe73 	bl	80011c8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014e2:	2208      	movs	r2, #8
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	69d9      	ldr	r1, [r3, #28]
 80014e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80014ea:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	438a      	bics	r2, r1
 80014f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80014f8:	430a      	orrs	r2, r1
 80014fa:	61da      	str	r2, [r3, #28]
    break;
 80014fc:	e7d6      	b.n	80014ac <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80014fe:	0029      	movs	r1, r5
 8001500:	6820      	ldr	r0, [r4, #0]
 8001502:	f7ff fea5 	bl	8001250 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	69d9      	ldr	r1, [r3, #28]
 800150e:	430a      	orrs	r2, r1
 8001510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8001516:	400a      	ands	r2, r1
 8001518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800151a:	692a      	ldr	r2, [r5, #16]
 800151c:	69d9      	ldr	r1, [r3, #28]
 800151e:	0212      	lsls	r2, r2, #8
 8001520:	e7ea      	b.n	80014f8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	fffffbff 	.word	0xfffffbff

08001528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001528:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800152a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800152c:	4d03      	ldr	r5, [pc, #12]	; (800153c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800152e:	430a      	orrs	r2, r1
 8001530:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001532:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001534:	4313      	orrs	r3, r2
 8001536:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001538:	6083      	str	r3, [r0, #8]
}
 800153a:	bd30      	pop	{r4, r5, pc}
 800153c:	ffff00ff 	.word	0xffff00ff

08001540 <HAL_TIM_ConfigClockSource>:
{
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001542:	0005      	movs	r5, r0
 8001544:	2302      	movs	r3, #2
 8001546:	353c      	adds	r5, #60	; 0x3c
 8001548:	782a      	ldrb	r2, [r5, #0]
{
 800154a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800154c:	0018      	movs	r0, r3
 800154e:	2a01      	cmp	r2, #1
 8001550:	d019      	beq.n	8001586 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001552:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001554:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8001556:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001558:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 800155a:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800155c:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800155e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001560:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_TIM_ConfigClockSource+0x160>)
 8001562:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001564:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001566:	680b      	ldr	r3, [r1, #0]
 8001568:	2b40      	cmp	r3, #64	; 0x40
 800156a:	d100      	bne.n	800156e <HAL_TIM_ConfigClockSource+0x2e>
 800156c:	e06f      	b.n	800164e <HAL_TIM_ConfigClockSource+0x10e>
 800156e:	d816      	bhi.n	800159e <HAL_TIM_ConfigClockSource+0x5e>
 8001570:	2b10      	cmp	r3, #16
 8001572:	d100      	bne.n	8001576 <HAL_TIM_ConfigClockSource+0x36>
 8001574:	e087      	b.n	8001686 <HAL_TIM_ConfigClockSource+0x146>
 8001576:	d807      	bhi.n	8001588 <HAL_TIM_ConfigClockSource+0x48>
 8001578:	2b00      	cmp	r3, #0
 800157a:	d100      	bne.n	800157e <HAL_TIM_ConfigClockSource+0x3e>
 800157c:	e07d      	b.n	800167a <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 800157e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001580:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001582:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001584:	7028      	strb	r0, [r5, #0]
}
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001588:	2b20      	cmp	r3, #32
 800158a:	d100      	bne.n	800158e <HAL_TIM_ConfigClockSource+0x4e>
 800158c:	e081      	b.n	8001692 <HAL_TIM_ConfigClockSource+0x152>
 800158e:	2b30      	cmp	r3, #48	; 0x30
 8001590:	d1f5      	bne.n	800157e <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001592:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001594:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001596:	4393      	bics	r3, r2
 8001598:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800159a:	2337      	movs	r3, #55	; 0x37
 800159c:	e055      	b.n	800164a <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 800159e:	2b70      	cmp	r3, #112	; 0x70
 80015a0:	d033      	beq.n	800160a <HAL_TIM_ConfigClockSource+0xca>
 80015a2:	d81b      	bhi.n	80015dc <HAL_TIM_ConfigClockSource+0x9c>
 80015a4:	2b50      	cmp	r3, #80	; 0x50
 80015a6:	d03b      	beq.n	8001620 <HAL_TIM_ConfigClockSource+0xe0>
 80015a8:	2b60      	cmp	r3, #96	; 0x60
 80015aa:	d1e8      	bne.n	800157e <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ac:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015ae:	684b      	ldr	r3, [r1, #4]
 80015b0:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015b2:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015b4:	4f3b      	ldr	r7, [pc, #236]	; (80016a4 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015b6:	43a1      	bics	r1, r4
 80015b8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015ba:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015bc:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015be:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015c0:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015c2:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80015c4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80015c6:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015c8:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015ca:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 80015d0:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80015d2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015d4:	4393      	bics	r3, r2
 80015d6:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015d8:	2367      	movs	r3, #103	; 0x67
 80015da:	e036      	b.n	800164a <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0152      	lsls	r2, r2, #5
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_TIM_ConfigClockSource+0xc0>
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	0192      	lsls	r2, r2, #6
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d1c8      	bne.n	800157e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 80015ec:	68cb      	ldr	r3, [r1, #12]
 80015ee:	684a      	ldr	r2, [r1, #4]
 80015f0:	6889      	ldr	r1, [r1, #8]
 80015f2:	f7ff ff99 	bl	8001528 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	01db      	lsls	r3, r3, #7
 80015fc:	6891      	ldr	r1, [r2, #8]
 80015fe:	e00c      	b.n	800161a <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001600:	2207      	movs	r2, #7
 8001602:	6883      	ldr	r3, [r0, #8]
 8001604:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8001606:	6083      	str	r3, [r0, #8]
 8001608:	e7b9      	b.n	800157e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800160a:	68cb      	ldr	r3, [r1, #12]
 800160c:	684a      	ldr	r2, [r1, #4]
 800160e:	6889      	ldr	r1, [r1, #8]
 8001610:	f7ff ff8a 	bl	8001528 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001614:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800161a:	430b      	orrs	r3, r1
 800161c:	6093      	str	r3, [r2, #8]
    break;
 800161e:	e7ae      	b.n	800157e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001620:	684a      	ldr	r2, [r1, #4]
 8001622:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001624:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001626:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001628:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800162a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800162c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800162e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001630:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001632:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001634:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001636:	240a      	movs	r4, #10
 8001638:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800163a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800163c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800163e:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001640:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001642:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001644:	4393      	bics	r3, r2
 8001646:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001648:	2357      	movs	r3, #87	; 0x57
 800164a:	4313      	orrs	r3, r2
 800164c:	e7db      	b.n	8001606 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800164e:	684a      	ldr	r2, [r1, #4]
 8001650:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001652:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001654:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001656:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001658:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800165a:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800165c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800165e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001660:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001662:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001664:	240a      	movs	r4, #10
 8001666:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001668:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800166a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800166c:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 800166e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001670:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001672:	4393      	bics	r3, r2
 8001674:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001676:	2347      	movs	r3, #71	; 0x47
 8001678:	e7e7      	b.n	800164a <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800167a:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800167c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800167e:	4393      	bics	r3, r2
 8001680:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001682:	2307      	movs	r3, #7
 8001684:	e7e1      	b.n	800164a <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001686:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001688:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800168a:	4393      	bics	r3, r2
 800168c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800168e:	2317      	movs	r3, #23
 8001690:	e7db      	b.n	800164a <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001692:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001694:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001696:	4393      	bics	r3, r2
 8001698:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800169a:	2327      	movs	r3, #39	; 0x27
 800169c:	e7d5      	b.n	800164a <HAL_TIM_ConfigClockSource+0x10a>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	ffff0088 	.word	0xffff0088
 80016a4:	ffff0fff 	.word	0xffff0fff

080016a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80016a8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80016aa:	2401      	movs	r4, #1
 80016ac:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80016ae:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80016b0:	6a03      	ldr	r3, [r0, #32]
 80016b2:	43a3      	bics	r3, r4
 80016b4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80016b6:	6a03      	ldr	r3, [r0, #32]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	6202      	str	r2, [r0, #32]
}
 80016bc:	bd10      	pop	{r4, pc}
	...

080016c0 <HAL_TIM_PWM_Start>:
{
 80016c0:	b510      	push	{r4, lr}
 80016c2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6800      	ldr	r0, [r0, #0]
 80016c8:	f7ff ffee 	bl	80016a8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_TIM_PWM_Start+0x3c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d008      	beq.n	80016e6 <HAL_TIM_PWM_Start+0x26>
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_TIM_PWM_Start+0x40>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d005      	beq.n	80016e6 <HAL_TIM_PWM_Start+0x26>
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_TIM_PWM_Start+0x44>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <HAL_TIM_PWM_Start+0x26>
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_TIM_PWM_Start+0x48>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d104      	bne.n	80016f0 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016ea:	0212      	lsls	r2, r2, #8
 80016ec:	430a      	orrs	r2, r1
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80016f0:	2201      	movs	r2, #1
 80016f2:	6819      	ldr	r1, [r3, #0]
}
 80016f4:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
}
 80016fa:	bd10      	pop	{r4, pc}
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40014000 	.word	0x40014000
 8001704:	40014400 	.word	0x40014400
 8001708:	40014800 	.word	0x40014800

0800170c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800170c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800170e:	0004      	movs	r4, r0
 8001710:	343c      	adds	r4, #60	; 0x3c
 8001712:	7822      	ldrb	r2, [r4, #0]
{
 8001714:	0003      	movs	r3, r0
 8001716:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001718:	2a01      	cmp	r2, #1
 800171a:	d017      	beq.n	800174c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800171c:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800171e:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001720:	353d      	adds	r5, #61	; 0x3d
 8001722:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	306e      	adds	r0, #110	; 0x6e
 8001728:	4382      	bics	r2, r0
 800172a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001730:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001732:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001734:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001736:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4382      	bics	r2, r0
 800173c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800173e:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001740:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001742:	430a      	orrs	r2, r1
 8001744:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001746:	2301      	movs	r3, #1
 8001748:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800174a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800174c:	bd30      	pop	{r4, r5, pc}
	...

08001750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001750:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001752:	0004      	movs	r4, r0
 8001754:	343c      	adds	r4, #60	; 0x3c
 8001756:	7823      	ldrb	r3, [r4, #0]
{
 8001758:	0002      	movs	r2, r0
 800175a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800175c:	2b01      	cmp	r3, #1
 800175e:	d024      	beq.n	80017aa <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8001760:	0015      	movs	r5, r2
 8001762:	353d      	adds	r5, #61	; 0x3d
 8001764:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8001768:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800176a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800176c:	4003      	ands	r3, r0
 800176e:	6888      	ldr	r0, [r1, #8]
 8001770:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001772:	480f      	ldr	r0, [pc, #60]	; (80017b0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8001774:	4003      	ands	r3, r0
 8001776:	6848      	ldr	r0, [r1, #4]
 8001778:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 800177c:	4003      	ands	r3, r0
 800177e:	6808      	ldr	r0, [r1, #0]
 8001780:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8001784:	4003      	ands	r3, r0
 8001786:	6908      	ldr	r0, [r1, #16]
 8001788:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 800178c:	4003      	ands	r3, r0
 800178e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001790:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001792:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001794:	480a      	ldr	r0, [pc, #40]	; (80017c0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8001796:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800179a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800179c:	4003      	ands	r3, r0
 800179e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80017a2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017a4:	2301      	movs	r3, #1
 80017a6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80017a8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80017aa:	bd30      	pop	{r4, r5, pc}
 80017ac:	fffffcff 	.word	0xfffffcff
 80017b0:	fffffbff 	.word	0xfffffbff
 80017b4:	fffff7ff 	.word	0xfffff7ff
 80017b8:	ffffefff 	.word	0xffffefff
 80017bc:	ffffdfff 	.word	0xffffdfff
 80017c0:	ffffbfff 	.word	0xffffbfff
 80017c4:	ffff7fff 	.word	0xffff7fff

080017c8 <read_sensor_data>:
/* USER CODE BEGIN 0 */

short read_sensor_data(uint8_t color_reg){
	uint8_t read_buff[2];
	short ret_data;
	HAL_I2C_Mem_Read(&hi2c1, COLOR_ADDR, (uint16_t)color_reg, I2C_MEMADD_SIZE_8BIT, read_buff, 2, HAL_MAX_DELAY);
 80017c8:	2301      	movs	r3, #1
short read_sensor_data(uint8_t color_reg){
 80017ca:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Read(&hi2c1, COLOR_ADDR, (uint16_t)color_reg, I2C_MEMADD_SIZE_8BIT, read_buff, 2, HAL_MAX_DELAY);
 80017cc:	425b      	negs	r3, r3
short read_sensor_data(uint8_t color_reg){
 80017ce:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c1, COLOR_ADDR, (uint16_t)color_reg, I2C_MEMADD_SIZE_8BIT, read_buff, 2, HAL_MAX_DELAY);
 80017d0:	ac05      	add	r4, sp, #20
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	3303      	adds	r3, #3
 80017d6:	b282      	uxth	r2, r0
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	9400      	str	r4, [sp, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	2120      	movs	r1, #32
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <read_sensor_data+0x2c>)
 80017e2:	f7ff f867 	bl	80008b4 <HAL_I2C_Mem_Read>
	ret_data = read_buff[1] << 8 | read_buff[0];
 80017e6:	7863      	ldrb	r3, [r4, #1]
 80017e8:	7820      	ldrb	r0, [r4, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	4318      	orrs	r0, r3
 80017ee:	b200      	sxth	r0, r0

	return ret_data;
}
 80017f0:	b006      	add	sp, #24
 80017f2:	bd10      	pop	{r4, pc}
 80017f4:	2000002c 	.word	0x2000002c

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fa:	2610      	movs	r6, #16
{
 80017fc:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	2230      	movs	r2, #48	; 0x30
 8001800:	2100      	movs	r1, #0
 8001802:	a80a      	add	r0, sp, #40	; 0x28
 8001804:	f000 fa4d 	bl	8001ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	0032      	movs	r2, r6
 800180a:	2100      	movs	r1, #0
 800180c:	a801      	add	r0, sp, #4
 800180e:	f000 fa48 	bl	8001ca2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001812:	2214      	movs	r2, #20
 8001814:	2100      	movs	r1, #0
 8001816:	a805      	add	r0, sp, #20
 8001818:	f000 fa43 	bl	8001ca2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800181c:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001820:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001822:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001826:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001828:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800182a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182e:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f7ff f94a 	bl	8000ac8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001838:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800183a:	0029      	movs	r1, r5
 800183c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001842:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001844:	f7ff fb54 	bl	8000ef0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001848:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800184c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800184e:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f7ff fbea 	bl	8001028 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001854:	b016      	add	sp, #88	; 0x58
 8001856:	bd70      	pop	{r4, r5, r6, pc}

08001858 <main>:
{
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 800185c:	f7fe fcfc 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 8001860:	f7ff ffca 	bl	80017f8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	2214      	movs	r2, #20
 8001866:	2100      	movs	r1, #0
 8001868:	a813      	add	r0, sp, #76	; 0x4c
 800186a:	f000 fa1a 	bl	8001ca2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2080      	movs	r0, #128	; 0x80
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <main+0x1dc>)
 8001872:	0280      	lsls	r0, r0, #10
 8001874:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001876:	26c0      	movs	r6, #192	; 0xc0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4301      	orrs	r1, r0
 800187a:	6159      	str	r1, [r3, #20]
 800187c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800187e:	00b6      	lsls	r6, r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4002      	ands	r2, r0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	9203      	str	r2, [sp, #12]
 8001886:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	0300      	lsls	r0, r0, #12
 800188c:	4301      	orrs	r1, r0
 800188e:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4002      	ands	r2, r0
 8001898:	9204      	str	r2, [sp, #16]
 800189a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800189e:	4866      	ldr	r0, [pc, #408]	; (8001a38 <main+0x1e0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	430a      	orrs	r2, r1
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	400b      	ands	r3, r1
 80018aa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80018ac:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80018b0:	f7fe fdfa 	bl	80004a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 80018b8:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <main+0x1e4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018bc:	a913      	add	r1, sp, #76	; 0x4c
 80018be:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c0:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = B1_Pin;
 80018c2:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f7fe fd3f 	bl	8000348 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	a913      	add	r1, sp, #76	; 0x4c
 80018cc:	485a      	ldr	r0, [pc, #360]	; (8001a38 <main+0x1e0>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80018ce:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d6:	f7fe fd37 	bl	8000348 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80018da:	4e59      	ldr	r6, [pc, #356]	; (8001a40 <main+0x1e8>)
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <main+0x1ec>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018de:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80018e0:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <main+0x1f0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e4:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.Timing = 0x2000090E;
 80018e6:	6073      	str	r3, [r6, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018e8:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ea:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018ec:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ee:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f2:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f4:	f7fe fef0 	bl	80006d8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f8:	0021      	movs	r1, r4
 80018fa:	0030      	movs	r0, r6
 80018fc:	f7ff f89a 	bl	8000a34 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001900:	0021      	movs	r1, r4
 8001902:	0030      	movs	r0, r6
 8001904:	f7ff f8bc 	bl	8000a80 <HAL_I2CEx_ConfigDigitalFilter>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001908:	2210      	movs	r2, #16
 800190a:	0021      	movs	r1, r4
 800190c:	a808      	add	r0, sp, #32
 800190e:	f000 f9c8 	bl	8001ca2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	2208      	movs	r2, #8
 8001914:	0021      	movs	r1, r4
 8001916:	a806      	add	r0, sp, #24
 8001918:	f000 f9c3 	bl	8001ca2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191c:	221c      	movs	r2, #28
 800191e:	0021      	movs	r1, r4
 8001920:	a80c      	add	r0, sp, #48	; 0x30
 8001922:	f000 f9be 	bl	8001ca2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001926:	221c      	movs	r2, #28
 8001928:	0021      	movs	r1, r4
 800192a:	a813      	add	r0, sp, #76	; 0x4c
 800192c:	f000 f9b9 	bl	8001ca2 <memset>
  htim1.Instance = TIM1;
 8001930:	4d46      	ldr	r5, [pc, #280]	; (8001a4c <main+0x1f4>)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <main+0x1f8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001934:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 8001936:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 10-1;
 8001938:	2309      	movs	r3, #9
 800193a:	606b      	str	r3, [r5, #4]
  htim1.Init.Period = 65536-1;
 800193c:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <main+0x1fc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65536-1;
 8001940:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001944:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001948:	f7ff fd0e 	bl	8001368 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800194e:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001952:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001956:	f7ff fdf3 	bl	8001540 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195a:	0028      	movs	r0, r5
 800195c:	f7ff fd1f 	bl	800139e <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001960:	a906      	add	r1, sp, #24
 8001962:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001968:	f7ff fed0 	bl	800170c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196e:	0022      	movs	r2, r4
 8001970:	a90c      	add	r1, sp, #48	; 0x30
 8001972:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001976:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001978:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197a:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197c:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197e:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001980:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001982:	f7ff fd67 	bl	8001454 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001986:	2204      	movs	r2, #4
 8001988:	a90c      	add	r1, sp, #48	; 0x30
 800198a:	0028      	movs	r0, r5
 800198c:	f7ff fd62 	bl	8001454 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001990:	2208      	movs	r2, #8
 8001992:	a90c      	add	r1, sp, #48	; 0x30
 8001994:	0028      	movs	r0, r5
 8001996:	f7ff fd5d 	bl	8001454 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199c:	a913      	add	r1, sp, #76	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199e:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019a0:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a2:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a4:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a6:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a8:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80019aa:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ae:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b0:	f7ff fece 	bl	8001750 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80019b4:	0028      	movs	r0, r5
 80019b6:	f000 f8bd 	bl	8001b34 <HAL_TIM_MspPostInit>
  buffer[1] = 0x50; //config settings
 80019ba:	2350      	movs	r3, #80	; 0x50
  buffer[0] = 0x00; //pointer to config reg
 80019bc:	4f26      	ldr	r7, [pc, #152]	; (8001a58 <main+0x200>)
  HAL_Delay(200);
 80019be:	20c8      	movs	r0, #200	; 0xc8
  buffer[1] = 0x50; //config settings
 80019c0:	707b      	strb	r3, [r7, #1]
  buffer[0] = 0x00; //pointer to config reg
 80019c2:	703c      	strb	r4, [r7, #0]
  HAL_Delay(200);
 80019c4:	f7fe fc66 	bl	8000294 <HAL_Delay>
  if(HAL_I2C_Master_Transmit(&hi2c1, COLOR_ADDR, buffer, 2, HAL_MAX_DELAY) != HAL_OK){
 80019c8:	2301      	movs	r3, #1
 80019ca:	425b      	negs	r3, r3
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	003a      	movs	r2, r7
 80019d0:	3303      	adds	r3, #3
 80019d2:	2120      	movs	r1, #32
 80019d4:	0030      	movs	r0, r6
 80019d6:	f7fe fed5 	bl	8000784 <HAL_I2C_Master_Transmit>
 80019da:	42a0      	cmp	r0, r4
 80019dc:	d002      	beq.n	80019e4 <main+0x18c>
	  error_msg[0] = 'A';
 80019de:	2241      	movs	r2, #65	; 0x41
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <main+0x204>)
 80019e2:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019e4:	2100      	movs	r1, #0
 80019e6:	0028      	movs	r0, r5
 80019e8:	f7ff fe6a 	bl	80016c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019ec:	2104      	movs	r1, #4
 80019ee:	0028      	movs	r0, r5
 80019f0:	f7ff fe66 	bl	80016c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019f4:	2108      	movs	r1, #8
 80019f6:	0028      	movs	r0, r5
 80019f8:	f7ff fe62 	bl	80016c0 <HAL_TIM_PWM_Start>
	  HAL_Delay(1500);
 80019fc:	4818      	ldr	r0, [pc, #96]	; (8001a60 <main+0x208>)
 80019fe:	f7fe fc49 	bl	8000294 <HAL_Delay>
	  red_data = read_sensor_data(R_DATA);
 8001a02:	2008      	movs	r0, #8
 8001a04:	f7ff fee0 	bl	80017c8 <read_sensor_data>
 8001a08:	4c16      	ldr	r4, [pc, #88]	; (8001a64 <main+0x20c>)
 8001a0a:	8020      	strh	r0, [r4, #0]
	  grn_data = read_sensor_data(G_DATA);
 8001a0c:	2009      	movs	r0, #9
 8001a0e:	f7ff fedb 	bl	80017c8 <read_sensor_data>
 8001a12:	4e15      	ldr	r6, [pc, #84]	; (8001a68 <main+0x210>)
 8001a14:	8030      	strh	r0, [r6, #0]
	  blu_data = read_sensor_data(B_DATA);
 8001a16:	200a      	movs	r0, #10
 8001a18:	f7ff fed6 	bl	80017c8 <read_sensor_data>
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <main+0x214>)
	htim1.Instance->CCR1 = red;
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5e61      	ldrsh	r1, [r4, r1]
	  blu_data = read_sensor_data(B_DATA);
 8001a22:	8018      	strh	r0, [r3, #0]
	  set_rgb(red_data, grn_data, blu_data);
 8001a24:	2300      	movs	r3, #0
 8001a26:	5ef2      	ldrsh	r2, [r6, r3]
	htim1.Instance->CCR1 = red;
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	6359      	str	r1, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = green;
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = blue;
 8001a2e:	63d8      	str	r0, [r3, #60]	; 0x3c
 8001a30:	e7e4      	b.n	80019fc <main+0x1a4>
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	10120000 	.word	0x10120000
 8001a40:	2000002c 	.word	0x2000002c
 8001a44:	40005400 	.word	0x40005400
 8001a48:	2000090e 	.word	0x2000090e
 8001a4c:	2000007c 	.word	0x2000007c
 8001a50:	40012c00 	.word	0x40012c00
 8001a54:	0000ffff 	.word	0x0000ffff
 8001a58:	20000020 	.word	0x20000020
 8001a5c:	200000be 	.word	0x200000be
 8001a60:	000005dc 	.word	0x000005dc
 8001a64:	2000007a 	.word	0x2000007a
 8001a68:	20000078 	.word	0x20000078
 8001a6c:	200000bc 	.word	0x200000bc

08001a70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	2001      	movs	r0, #1
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_MspInit+0x2c>)
{
 8001a74:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	6999      	ldr	r1, [r3, #24]
 8001a78:	4301      	orrs	r1, r0
 8001a7a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4002      	ands	r2, r0
 8001a84:	9200      	str	r2, [sp, #0]
 8001a86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	61da      	str	r2, [r3, #28]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	400b      	ands	r3, r1
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	b002      	add	sp, #8
 8001a98:	4770      	bx	lr
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	0004      	movs	r4, r0
 8001aa4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	2214      	movs	r2, #20
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	a803      	add	r0, sp, #12
 8001aac:	f000 f8f9 	bl	8001ca2 <memset>
  if(hi2c->Instance==I2C1)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_I2C_MspInit+0x5c>)
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d11f      	bne.n	8001af8 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	4c11      	ldr	r4, [pc, #68]	; (8001b00 <HAL_I2C_MspInit+0x60>)
 8001abc:	02c9      	lsls	r1, r1, #11
 8001abe:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	6162      	str	r2, [r4, #20]
 8001ac6:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac8:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	400b      	ands	r3, r1
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad4:	3bae      	subs	r3, #174	; 0xae
 8001ad6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ada:	3b11      	subs	r3, #17
 8001adc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ade:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001ae0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f7fe fc31 	bl	8000348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	69e2      	ldr	r2, [r4, #28]
 8001aea:	0389      	lsls	r1, r1, #14
 8001aec:	430a      	orrs	r2, r1
 8001aee:	61e2      	str	r2, [r4, #28]
 8001af0:	69e3      	ldr	r3, [r4, #28]
 8001af2:	400b      	ands	r3, r1
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001af8:	b008      	add	sp, #32
 8001afa:	bd10      	pop	{r4, pc}
 8001afc:	40005400 	.word	0x40005400
 8001b00:	40021000 	.word	0x40021000
 8001b04:	48000400 	.word	0x48000400

08001b08 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_TIM_Base_MspInit+0x24>)
 8001b0a:	6802      	ldr	r2, [r0, #0]
{
 8001b0c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d109      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	2080      	movs	r0, #128	; 0x80
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_TIM_Base_MspInit+0x28>)
 8001b16:	0100      	lsls	r0, r0, #4
 8001b18:	6991      	ldr	r1, [r2, #24]
 8001b1a:	4301      	orrs	r1, r0
 8001b1c:	6191      	str	r1, [r2, #24]
 8001b1e:	6993      	ldr	r3, [r2, #24]
 8001b20:	4003      	ands	r3, r0
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b26:	b002      	add	sp, #8
 8001b28:	4770      	bx	lr
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b510      	push	{r4, lr}
 8001b36:	0004      	movs	r4, r0
 8001b38:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	2214      	movs	r2, #20
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	a801      	add	r0, sp, #4
 8001b40:	f000 f8af 	bl	8001ca2 <memset>
  if(htim->Instance==TIM1)
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_TIM_MspPostInit+0x48>)
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d114      	bne.n	8001b76 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	2080      	movs	r0, #128	; 0x80
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <HAL_TIM_MspPostInit+0x4c>)
 8001b50:	0280      	lsls	r0, r0, #10
 8001b52:	6951      	ldr	r1, [r2, #20]
 8001b54:	4301      	orrs	r1, r0
 8001b56:	6151      	str	r1, [r2, #20]
 8001b58:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4003      	ands	r3, r0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b62:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f7fe fbe9 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b76:	b006      	add	sp, #24
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40021000 	.word	0x40021000

08001b84 <NMI_Handler>:
 8001b84:	4770      	bx	lr

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler>

08001b88 <SVC_Handler>:
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8e:	f7fe fb73 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b92:	bd10      	pop	{r4, pc}

08001b94 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001b94:	2101      	movs	r1, #1
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4002      	ands	r2, r0
 8001ba4:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <SystemInit+0x50>)
 8001baa:	4002      	ands	r2, r0
 8001bac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <SystemInit+0x54>)
 8001bb2:	4002      	ands	r2, r0
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <SystemInit+0x58>)
 8001bba:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001bbc:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001bbe:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	4382      	bics	r2, r0
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <SystemInit+0x5c>)
 8001bca:	4002      	ands	r2, r0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]

}
 8001bd8:	4770      	bx	lr
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	f8ffb80c 	.word	0xf8ffb80c
 8001be4:	fef6ffff 	.word	0xfef6ffff
 8001be8:	fffbffff 	.word	0xfffbffff
 8001bec:	ffc0ffff 	.word	0xffc0ffff
 8001bf0:	fffffeac 	.word	0xfffffeac

08001bf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfa:	490e      	ldr	r1, [pc, #56]	; (8001c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <LoopForever+0xe>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c10:	4c0b      	ldr	r4, [pc, #44]	; (8001c40 <LoopForever+0x16>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c1e:	f7ff ffb9 	bl	8001b94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c22:	f000 f811 	bl	8001c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c26:	f7ff fe17 	bl	8001858 <main>

08001c2a <LoopForever>:

LoopForever:
    b LoopForever
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
  ldr   r0, =_estack
 8001c2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001c38:	08001d04 	.word	0x08001d04
  ldr r2, =_sbss
 8001c3c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001c40:	200000d4 	.word	0x200000d4

08001c44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_COMP_IRQHandler>
	...

08001c48 <__libc_init_array>:
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	2600      	movs	r6, #0
 8001c4c:	4d0c      	ldr	r5, [pc, #48]	; (8001c80 <__libc_init_array+0x38>)
 8001c4e:	4c0d      	ldr	r4, [pc, #52]	; (8001c84 <__libc_init_array+0x3c>)
 8001c50:	1b64      	subs	r4, r4, r5
 8001c52:	10a4      	asrs	r4, r4, #2
 8001c54:	42a6      	cmp	r6, r4
 8001c56:	d109      	bne.n	8001c6c <__libc_init_array+0x24>
 8001c58:	2600      	movs	r6, #0
 8001c5a:	f000 f82b 	bl	8001cb4 <_init>
 8001c5e:	4d0a      	ldr	r5, [pc, #40]	; (8001c88 <__libc_init_array+0x40>)
 8001c60:	4c0a      	ldr	r4, [pc, #40]	; (8001c8c <__libc_init_array+0x44>)
 8001c62:	1b64      	subs	r4, r4, r5
 8001c64:	10a4      	asrs	r4, r4, #2
 8001c66:	42a6      	cmp	r6, r4
 8001c68:	d105      	bne.n	8001c76 <__libc_init_array+0x2e>
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
 8001c6c:	00b3      	lsls	r3, r6, #2
 8001c6e:	58eb      	ldr	r3, [r5, r3]
 8001c70:	4798      	blx	r3
 8001c72:	3601      	adds	r6, #1
 8001c74:	e7ee      	b.n	8001c54 <__libc_init_array+0xc>
 8001c76:	00b3      	lsls	r3, r6, #2
 8001c78:	58eb      	ldr	r3, [r5, r3]
 8001c7a:	4798      	blx	r3
 8001c7c:	3601      	adds	r6, #1
 8001c7e:	e7f2      	b.n	8001c66 <__libc_init_array+0x1e>
 8001c80:	08001cfc 	.word	0x08001cfc
 8001c84:	08001cfc 	.word	0x08001cfc
 8001c88:	08001cfc 	.word	0x08001cfc
 8001c8c:	08001d00 	.word	0x08001d00

08001c90 <memcpy>:
 8001c90:	2300      	movs	r3, #0
 8001c92:	b510      	push	{r4, lr}
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d100      	bne.n	8001c9a <memcpy+0xa>
 8001c98:	bd10      	pop	{r4, pc}
 8001c9a:	5ccc      	ldrb	r4, [r1, r3]
 8001c9c:	54c4      	strb	r4, [r0, r3]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	e7f8      	b.n	8001c94 <memcpy+0x4>

08001ca2 <memset>:
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	1882      	adds	r2, r0, r2
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d100      	bne.n	8001cac <memset+0xa>
 8001caa:	4770      	bx	lr
 8001cac:	7019      	strb	r1, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	e7f9      	b.n	8001ca6 <memset+0x4>
	...

08001cb4 <_init>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr

08001cc0 <_fini>:
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc6:	bc08      	pop	{r3}
 8001cc8:	469e      	mov	lr, r3
 8001cca:	4770      	bx	lr
