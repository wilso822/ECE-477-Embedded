
RFID Reader Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001edc  08001edc  00011edc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f0  200000f0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000131ae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000023f3  00000000  00000000  000331ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000066fe  00000000  00000000  000355dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0003bce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  0003c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004b54  00000000  00000000  0003d168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000038de  00000000  00000000  00041cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004559a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b4c  00000000  00000000  00045618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ec4 	.word	0x08001ec4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001ec4 	.word	0x08001ec4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f894 	bl	800061c <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f84a 	bl	800059c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f81b 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fbbc 	bl	8001cc4 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c

08000578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000580:	041b      	lsls	r3, r3, #16
 8000582:	0c1b      	lsrs	r3, r3, #16
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000588:	0200      	lsls	r0, r0, #8
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000592:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000594:	60d3      	str	r3, [r2, #12]
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	68dc      	ldr	r4, [r3, #12]
 80005a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	bf28      	it	cs
 80005b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 0501 	mov.w	r5, #1
 80005b8:	fa05 f303 	lsl.w	r3, r5, r3
 80005bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	bf8c      	ite	hi
 80005c2:	3c03      	subhi	r4, #3
 80005c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	4019      	ands	r1, r3
 80005c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	fa05 f404 	lsl.w	r4, r5, r4
 80005ce:	3c01      	subs	r4, #1
 80005d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	ea42 0201 	orr.w	r2, r2, r1
 80005d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfaf      	iteee	ge
 80005de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	f000 000f 	andlt.w	r0, r0, #15
 80005e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000600 <HAL_NVIC_SetPriority+0x64>)
 80005e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	bfa5      	ittet	ge
 80005ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	e000ed14 	.word	0xe000ed14

08000604 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000604:	0942      	lsrs	r2, r0, #5
 8000606:	2301      	movs	r3, #1
 8000608:	f000 001f 	and.w	r0, r0, #31
 800060c:	fa03 f000 	lsl.w	r0, r3, r0
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <HAL_NVIC_EnableIRQ+0x14>)
 8000612:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100

0800061c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800061c:	3801      	subs	r0, #1
 800061e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000622:	d20a      	bcs.n	800063a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000628:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	21f0      	movs	r1, #240	; 0xf0
 800062c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000634:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800063a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800064c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000800 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000654:	4a68      	ldr	r2, [pc, #416]	; (80007f8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000656:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000804 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800065c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800065e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000662:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000664:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000668:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800066c:	45b6      	cmp	lr, r6
 800066e:	f040 80ae 	bne.w	80007ce <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000672:	684c      	ldr	r4, [r1, #4]
 8000674:	f024 0710 	bic.w	r7, r4, #16
 8000678:	2f02      	cmp	r7, #2
 800067a:	d116      	bne.n	80006aa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800067c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000680:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000684:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000688:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800068c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000690:	f04f 0c0f 	mov.w	ip, #15
 8000694:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000698:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800069c:	690d      	ldr	r5, [r1, #16]
 800069e:	fa05 f50b 	lsl.w	r5, r5, fp
 80006a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006a6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006aa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006b0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b4:	fa05 f50a 	lsl.w	r5, r5, sl
 80006b8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006cc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ce:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d2:	d811      	bhi.n	80006f8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006da:	68cf      	ldr	r7, [r1, #12]
 80006dc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006e0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006e8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006f0:	409f      	lsls	r7, r3
 80006f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006fc:	688f      	ldr	r7, [r1, #8]
 80006fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8000702:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000704:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000706:	00e5      	lsls	r5, r4, #3
 8000708:	d561      	bpl.n	80007ce <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	f04f 0b00 	mov.w	fp, #0
 800070e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000712:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000716:	4d39      	ldr	r5, [pc, #228]	; (80007fc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800071c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000720:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000724:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000728:	9703      	str	r7, [sp, #12]
 800072a:	9f03      	ldr	r7, [sp, #12]
 800072c:	f023 0703 	bic.w	r7, r3, #3
 8000730:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000734:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000738:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800073c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000740:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000744:	f04f 0e0f 	mov.w	lr, #15
 8000748:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800074e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000752:	d043      	beq.n	80007dc <HAL_GPIO_Init+0x194>
 8000754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000758:	42a8      	cmp	r0, r5
 800075a:	d041      	beq.n	80007e0 <HAL_GPIO_Init+0x198>
 800075c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000760:	42a8      	cmp	r0, r5
 8000762:	d03f      	beq.n	80007e4 <HAL_GPIO_Init+0x19c>
 8000764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000768:	42a8      	cmp	r0, r5
 800076a:	d03d      	beq.n	80007e8 <HAL_GPIO_Init+0x1a0>
 800076c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000770:	42a8      	cmp	r0, r5
 8000772:	d03b      	beq.n	80007ec <HAL_GPIO_Init+0x1a4>
 8000774:	4548      	cmp	r0, r9
 8000776:	d03b      	beq.n	80007f0 <HAL_GPIO_Init+0x1a8>
 8000778:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800077c:	42a8      	cmp	r0, r5
 800077e:	d039      	beq.n	80007f4 <HAL_GPIO_Init+0x1ac>
 8000780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000784:	42a8      	cmp	r0, r5
 8000786:	bf14      	ite	ne
 8000788:	2508      	movne	r5, #8
 800078a:	2507      	moveq	r5, #7
 800078c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000790:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000794:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000796:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000798:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800079a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800079e:	bf0c      	ite	eq
 80007a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007a2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007a4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007a6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ac:	bf0c      	ite	eq
 80007ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007b0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007b2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007ba:	bf0c      	ite	eq
 80007bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007be:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007c0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007c2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf54      	ite	pl
 80007c8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ca:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007cc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ce:	3301      	adds	r3, #1
 80007d0:	2b10      	cmp	r3, #16
 80007d2:	f47f af44 	bne.w	800065e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007d6:	b005      	add	sp, #20
 80007d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007dc:	465d      	mov	r5, fp
 80007de:	e7d5      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007e0:	2501      	movs	r5, #1
 80007e2:	e7d3      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007e4:	2502      	movs	r5, #2
 80007e6:	e7d1      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007e8:	2503      	movs	r5, #3
 80007ea:	e7cf      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007ec:	2504      	movs	r5, #4
 80007ee:	e7cd      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007f0:	2505      	movs	r5, #5
 80007f2:	e7cb      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007f4:	2506      	movs	r5, #6
 80007f6:	e7c9      	b.n	800078c <HAL_GPIO_Init+0x144>
 80007f8:	40013c00 	.word	0x40013c00
 80007fc:	40020000 	.word	0x40020000
 8000800:	40023800 	.word	0x40023800
 8000804:	40021400 	.word	0x40021400

08000808 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000808:	b10a      	cbz	r2, 800080e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800080a:	6181      	str	r1, [r0, #24]
 800080c:	4770      	bx	lr
 800080e:	0409      	lsls	r1, r1, #16
 8000810:	e7fb      	b.n	800080a <HAL_GPIO_WritePin+0x2>
	...

08000814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000818:	4604      	mov	r4, r0
 800081a:	b918      	cbnz	r0, 8000824 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800081c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800081e:	b002      	add	sp, #8
 8000820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000824:	6803      	ldr	r3, [r0, #0]
 8000826:	07dd      	lsls	r5, r3, #31
 8000828:	d410      	bmi.n	800084c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	0798      	lsls	r0, r3, #30
 800082e:	d458      	bmi.n	80008e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	071a      	lsls	r2, r3, #28
 8000834:	f100 809a 	bmi.w	800096c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	075b      	lsls	r3, r3, #29
 800083c:	f100 80b8 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000840:	69a2      	ldr	r2, [r4, #24]
 8000842:	2a00      	cmp	r2, #0
 8000844:	f040 8119 	bne.w	8000a7a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000848:	2000      	movs	r0, #0
 800084a:	e7e8      	b.n	800081e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800084c:	4ba6      	ldr	r3, [pc, #664]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	f002 020c 	and.w	r2, r2, #12
 8000854:	2a04      	cmp	r2, #4
 8000856:	d007      	beq.n	8000868 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800085e:	2a08      	cmp	r2, #8
 8000860:	d10a      	bne.n	8000878 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	0259      	lsls	r1, r3, #9
 8000866:	d507      	bpl.n	8000878 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000868:	4b9f      	ldr	r3, [pc, #636]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	039a      	lsls	r2, r3, #14
 800086e:	d5dc      	bpl.n	800082a <HAL_RCC_OscConfig+0x16>
 8000870:	6863      	ldr	r3, [r4, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1d9      	bne.n	800082a <HAL_RCC_OscConfig+0x16>
 8000876:	e7d1      	b.n	800081c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	4d9b      	ldr	r5, [pc, #620]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 800087c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000880:	d111      	bne.n	80008a6 <HAL_RCC_OscConfig+0x92>
 8000882:	682b      	ldr	r3, [r5, #0]
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800088a:	f7ff fe6f 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088e:	4d96      	ldr	r5, [pc, #600]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000890:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	039b      	lsls	r3, r3, #14
 8000896:	d4c8      	bmi.n	800082a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000898:	f7ff fe68 	bl	800056c <HAL_GetTick>
 800089c:	1b80      	subs	r0, r0, r6
 800089e:	2864      	cmp	r0, #100	; 0x64
 80008a0:	d9f7      	bls.n	8000892 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80008a2:	2003      	movs	r0, #3
 80008a4:	e7bb      	b.n	800081e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008aa:	d104      	bne.n	80008b6 <HAL_RCC_OscConfig+0xa2>
 80008ac:	682b      	ldr	r3, [r5, #0]
 80008ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b2:	602b      	str	r3, [r5, #0]
 80008b4:	e7e5      	b.n	8000882 <HAL_RCC_OscConfig+0x6e>
 80008b6:	682a      	ldr	r2, [r5, #0]
 80008b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008bc:	602a      	str	r2, [r5, #0]
 80008be:	682a      	ldr	r2, [r5, #0]
 80008c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1df      	bne.n	800088a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80008ca:	f7ff fe4f 	bl	800056c <HAL_GetTick>
 80008ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	039f      	lsls	r7, r3, #14
 80008d4:	d5a9      	bpl.n	800082a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d6:	f7ff fe49 	bl	800056c <HAL_GetTick>
 80008da:	1b80      	subs	r0, r0, r6
 80008dc:	2864      	cmp	r0, #100	; 0x64
 80008de:	d9f7      	bls.n	80008d0 <HAL_RCC_OscConfig+0xbc>
 80008e0:	e7df      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008e2:	4b81      	ldr	r3, [pc, #516]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	f012 0f0c 	tst.w	r2, #12
 80008ea:	d007      	beq.n	80008fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008f2:	2a08      	cmp	r2, #8
 80008f4:	d111      	bne.n	800091a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	025e      	lsls	r6, r3, #9
 80008fa:	d40e      	bmi.n	800091a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fc:	4b7a      	ldr	r3, [pc, #488]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	0795      	lsls	r5, r2, #30
 8000902:	d502      	bpl.n	800090a <HAL_RCC_OscConfig+0xf6>
 8000904:	68e2      	ldr	r2, [r4, #12]
 8000906:	2a01      	cmp	r2, #1
 8000908:	d188      	bne.n	800081c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	6921      	ldr	r1, [r4, #16]
 800090e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000912:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000916:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000918:	e78a      	b.n	8000830 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800091a:	68e2      	ldr	r2, [r4, #12]
 800091c:	4b73      	ldr	r3, [pc, #460]	; (8000aec <HAL_RCC_OscConfig+0x2d8>)
 800091e:	b1b2      	cbz	r2, 800094e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000924:	f7ff fe22 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000928:	4d6f      	ldr	r5, [pc, #444]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800092a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	0798      	lsls	r0, r3, #30
 8000930:	d507      	bpl.n	8000942 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000932:	682b      	ldr	r3, [r5, #0]
 8000934:	6922      	ldr	r2, [r4, #16]
 8000936:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800093a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800093e:	602b      	str	r3, [r5, #0]
 8000940:	e776      	b.n	8000830 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000942:	f7ff fe13 	bl	800056c <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2802      	cmp	r0, #2
 800094a:	d9ef      	bls.n	800092c <HAL_RCC_OscConfig+0x118>
 800094c:	e7a9      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800094e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000950:	f7ff fe0c 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000954:	4d64      	ldr	r5, [pc, #400]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000956:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	0799      	lsls	r1, r3, #30
 800095c:	f57f af68 	bpl.w	8000830 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000960:	f7ff fe04 	bl	800056c <HAL_GetTick>
 8000964:	1b80      	subs	r0, r0, r6
 8000966:	2802      	cmp	r0, #2
 8000968:	d9f6      	bls.n	8000958 <HAL_RCC_OscConfig+0x144>
 800096a:	e79a      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800096c:	6962      	ldr	r2, [r4, #20]
 800096e:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <HAL_RCC_OscConfig+0x2dc>)
 8000970:	b17a      	cbz	r2, 8000992 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000976:	f7ff fdf9 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	4d5b      	ldr	r5, [pc, #364]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800097c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000980:	079f      	lsls	r7, r3, #30
 8000982:	f53f af59 	bmi.w	8000838 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000986:	f7ff fdf1 	bl	800056c <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2802      	cmp	r0, #2
 800098e:	d9f6      	bls.n	800097e <HAL_RCC_OscConfig+0x16a>
 8000990:	e787      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000992:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000994:	f7ff fdea 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000998:	4d53      	ldr	r5, [pc, #332]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800099e:	0798      	lsls	r0, r3, #30
 80009a0:	f57f af4a 	bpl.w	8000838 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a4:	f7ff fde2 	bl	800056c <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9f6      	bls.n	800099c <HAL_RCC_OscConfig+0x188>
 80009ae:	e778      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b0:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 80009b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009b8:	d128      	bne.n	8000a0c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	9201      	str	r2, [sp, #4]
 80009bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009c2:	641a      	str	r2, [r3, #64]	; 0x40
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d0:	4d48      	ldr	r5, [pc, #288]	; (8000af4 <HAL_RCC_OscConfig+0x2e0>)
 80009d2:	682b      	ldr	r3, [r5, #0]
 80009d4:	05d9      	lsls	r1, r3, #23
 80009d6:	d51b      	bpl.n	8000a10 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d8:	68a3      	ldr	r3, [r4, #8]
 80009da:	4d43      	ldr	r5, [pc, #268]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d127      	bne.n	8000a30 <HAL_RCC_OscConfig+0x21c>
 80009e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009e8:	f7ff fdc0 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ec:	4d3e      	ldr	r5, [pc, #248]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009f0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009f6:	079b      	lsls	r3, r3, #30
 80009f8:	d539      	bpl.n	8000a6e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009fa:	2e00      	cmp	r6, #0
 80009fc:	f43f af20 	beq.w	8000840 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a00:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 8000a02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	e719      	b.n	8000840 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	e7df      	b.n	80009d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a18:	f7ff fda8 	bl	800056c <HAL_GetTick>
 8000a1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	05da      	lsls	r2, r3, #23
 8000a22:	d4d9      	bmi.n	80009d8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a24:	f7ff fda2 	bl	800056c <HAL_GetTick>
 8000a28:	1bc0      	subs	r0, r0, r7
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9f7      	bls.n	8000a1e <HAL_RCC_OscConfig+0x20a>
 8000a2e:	e738      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d104      	bne.n	8000a3e <HAL_RCC_OscConfig+0x22a>
 8000a34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a3c:	e7d0      	b.n	80009e0 <HAL_RCC_OscConfig+0x1cc>
 8000a3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a40:	f022 0201 	bic.w	r2, r2, #1
 8000a44:	672a      	str	r2, [r5, #112]	; 0x70
 8000a46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a48:	f022 0204 	bic.w	r2, r2, #4
 8000a4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1ca      	bne.n	80009e8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a52:	f7ff fd8b 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	d5cb      	bpl.n	80009fa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a62:	f7ff fd83 	bl	800056c <HAL_GetTick>
 8000a66:	1bc0      	subs	r0, r0, r7
 8000a68:	4540      	cmp	r0, r8
 8000a6a:	d9f7      	bls.n	8000a5c <HAL_RCC_OscConfig+0x248>
 8000a6c:	e719      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6e:	f7ff fd7d 	bl	800056c <HAL_GetTick>
 8000a72:	1bc0      	subs	r0, r0, r7
 8000a74:	4540      	cmp	r0, r8
 8000a76:	d9bd      	bls.n	80009f4 <HAL_RCC_OscConfig+0x1e0>
 8000a78:	e713      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a7a:	4d1b      	ldr	r5, [pc, #108]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
 8000a7c:	68ab      	ldr	r3, [r5, #8]
 8000a7e:	f003 030c 	and.w	r3, r3, #12
 8000a82:	2b08      	cmp	r3, #8
 8000a84:	f43f aeca 	beq.w	800081c <HAL_RCC_OscConfig+0x8>
 8000a88:	4e1b      	ldr	r6, [pc, #108]	; (8000af8 <HAL_RCC_OscConfig+0x2e4>)
 8000a8a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a8e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a90:	d134      	bne.n	8000afc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a92:	f7ff fd6b 	bl	800056c <HAL_GetTick>
 8000a96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	0199      	lsls	r1, r3, #6
 8000a9c:	d41e      	bmi.n	8000adc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a9e:	6a22      	ldr	r2, [r4, #32]
 8000aa0:	69e3      	ldr	r3, [r4, #28]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aa6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ab0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ab2:	4c0d      	ldr	r4, [pc, #52]	; (8000ae8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ab4:	0852      	lsrs	r2, r2, #1
 8000ab6:	3a01      	subs	r2, #1
 8000ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000abc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000abe:	2301      	movs	r3, #1
 8000ac0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fd53 	bl	800056c <HAL_GetTick>
 8000ac6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	019a      	lsls	r2, r3, #6
 8000acc:	f53f aebc 	bmi.w	8000848 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad0:	f7ff fd4c 	bl	800056c <HAL_GetTick>
 8000ad4:	1b40      	subs	r0, r0, r5
 8000ad6:	2802      	cmp	r0, #2
 8000ad8:	d9f6      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x2b4>
 8000ada:	e6e2      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000adc:	f7ff fd46 	bl	800056c <HAL_GetTick>
 8000ae0:	1bc0      	subs	r0, r0, r7
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9d8      	bls.n	8000a98 <HAL_RCC_OscConfig+0x284>
 8000ae6:	e6dc      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	42470000 	.word	0x42470000
 8000af0:	42470e80 	.word	0x42470e80
 8000af4:	40007000 	.word	0x40007000
 8000af8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000afc:	f7ff fd36 	bl	800056c <HAL_GetTick>
 8000b00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b02:	682b      	ldr	r3, [r5, #0]
 8000b04:	019b      	lsls	r3, r3, #6
 8000b06:	f57f ae9f 	bpl.w	8000848 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fd2f 	bl	800056c <HAL_GetTick>
 8000b0e:	1b00      	subs	r0, r0, r4
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f6      	bls.n	8000b02 <HAL_RCC_OscConfig+0x2ee>
 8000b14:	e6c5      	b.n	80008a2 <HAL_RCC_OscConfig+0x8e>
 8000b16:	bf00      	nop

08000b18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b18:	4913      	ldr	r1, [pc, #76]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b1c:	688b      	ldr	r3, [r1, #8]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d003      	beq.n	8000b2e <HAL_RCC_GetSysClockFreq+0x16>
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d003      	beq.n	8000b32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b30:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b34:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3c:	bf14      	ite	ne
 8000b3e:	480c      	ldrne	r0, [pc, #48]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b40:	480a      	ldreq	r0, [pc, #40]	; (8000b6c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b46:	bf18      	it	ne
 8000b48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b52:	f7ff fb39 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b5e:	3301      	adds	r3, #1
 8000b60:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b66:	bd08      	pop	{r3, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	00f42400 	.word	0x00f42400
 8000b70:	007a1200 	.word	0x007a1200

08000b74 <HAL_RCC_ClockConfig>:
{
 8000b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	b910      	cbnz	r0, 8000b84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
 8000b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <HAL_RCC_ClockConfig+0x124>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f002 020f 	and.w	r2, r2, #15
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	d328      	bcc.n	8000be2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b90:	6821      	ldr	r1, [r4, #0]
 8000b92:	078f      	lsls	r7, r1, #30
 8000b94:	d42d      	bmi.n	8000bf2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b96:	07c8      	lsls	r0, r1, #31
 8000b98:	d440      	bmi.n	8000c1c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <HAL_RCC_ClockConfig+0x124>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	f002 020f 	and.w	r2, r2, #15
 8000ba2:	4295      	cmp	r5, r2
 8000ba4:	d366      	bcc.n	8000c74 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	0751      	lsls	r1, r2, #29
 8000baa:	d46c      	bmi.n	8000c86 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bac:	0713      	lsls	r3, r2, #28
 8000bae:	d507      	bpl.n	8000bc0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <HAL_RCC_ClockConfig+0x128>)
 8000bb2:	6921      	ldr	r1, [r4, #16]
 8000bb4:	6893      	ldr	r3, [r2, #8]
 8000bb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bc0:	f7ff ffaa 	bl	8000b18 <HAL_RCC_GetSysClockFreq>
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <HAL_RCC_ClockConfig+0x128>)
 8000bc6:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <HAL_RCC_ClockConfig+0x12c>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	40d8      	lsrs	r0, r3
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <HAL_RCC_ClockConfig+0x130>)
 8000bd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fc7e 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d1c6      	bne.n	8000b7e <HAL_RCC_ClockConfig+0xa>
 8000bf0:	e7ce      	b.n	8000b90 <HAL_RCC_ClockConfig+0x1c>
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	689a      	ldrne	r2, [r3, #8]
 8000bfc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c04:	bf42      	ittt	mi
 8000c06:	689a      	ldrmi	r2, [r3, #8]
 8000c08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	68a0      	ldr	r0, [r4, #8]
 8000c12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c16:	4302      	orrs	r2, r0
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	e7bc      	b.n	8000b96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c1c:	6862      	ldr	r2, [r4, #4]
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_RCC_ClockConfig+0x128>)
 8000c20:	2a01      	cmp	r2, #1
 8000c22:	d11d      	bne.n	8000c60 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2a:	d0a8      	beq.n	8000b7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c2c:	4e1b      	ldr	r6, [pc, #108]	; (8000c9c <HAL_RCC_ClockConfig+0x128>)
 8000c2e:	68b3      	ldr	r3, [r6, #8]
 8000c30:	f023 0303 	bic.w	r3, r3, #3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c38:	f7ff fc98 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c42:	68b3      	ldr	r3, [r6, #8]
 8000c44:	6862      	ldr	r2, [r4, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c4e:	d0a4      	beq.n	8000b9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c50:	f7ff fc8c 	bl	800056c <HAL_GetTick>
 8000c54:	1bc0      	subs	r0, r0, r7
 8000c56:	4540      	cmp	r0, r8
 8000c58:	d9f3      	bls.n	8000c42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
}
 8000c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c60:	1e91      	subs	r1, r2, #2
 8000c62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c64:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c66:	d802      	bhi.n	8000c6e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c6c:	e7dd      	b.n	8000c2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	f013 0f02 	tst.w	r3, #2
 8000c72:	e7da      	b.n	8000c2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c74:	b2ea      	uxtb	r2, r5
 8000c76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	429d      	cmp	r5, r3
 8000c80:	f47f af7d 	bne.w	8000b7e <HAL_RCC_ClockConfig+0xa>
 8000c84:	e78f      	b.n	8000ba6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c86:	4905      	ldr	r1, [pc, #20]	; (8000c9c <HAL_RCC_ClockConfig+0x128>)
 8000c88:	68e0      	ldr	r0, [r4, #12]
 8000c8a:	688b      	ldr	r3, [r1, #8]
 8000c8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c90:	4303      	orrs	r3, r0
 8000c92:	608b      	str	r3, [r1, #8]
 8000c94:	e78a      	b.n	8000bac <HAL_RCC_ClockConfig+0x38>
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	08001edc 	.word	0x08001edc
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cac:	9e06      	ldr	r6, [sp, #24]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000cb6:	6822      	ldr	r2, [r4, #0]
 8000cb8:	6893      	ldr	r3, [r2, #8]
 8000cba:	ea38 0303 	bics.w	r3, r8, r3
 8000cbe:	bf0c      	ite	eq
 8000cc0:	2301      	moveq	r3, #1
 8000cc2:	2300      	movne	r3, #0
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	d102      	bne.n	8000cce <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000cc8:	2000      	movs	r0, #0
}
 8000cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000cce:	1c6b      	adds	r3, r5, #1
 8000cd0:	d0f2      	beq.n	8000cb8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000cd2:	bb55      	cbnz	r5, 8000d2a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000cdc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000cde:	6862      	ldr	r2, [r4, #4]
 8000ce0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ce4:	d10a      	bne.n	8000cfc <SPI_WaitFlagStateUntilTimeout+0x54>
 8000ce6:	68a2      	ldr	r2, [r4, #8]
 8000ce8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000cec:	d002      	beq.n	8000cf4 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000cee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000cf2:	d103      	bne.n	8000cfc <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cfa:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000cfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cfe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d02:	d109      	bne.n	8000d18 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d0a:	0412      	lsls	r2, r2, #16
 8000d0c:	0c12      	lsrs	r2, r2, #16
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d16:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000d24:	2003      	movs	r0, #3
 8000d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000d2a:	f7ff fc1f 	bl	800056c <HAL_GetTick>
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	4285      	cmp	r5, r0
 8000d32:	d8c0      	bhi.n	8000cb6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000d34:	e7ce      	b.n	8000cd4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000d36 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d36:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d38:	460b      	mov	r3, r1
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	2200      	movs	r2, #0
{
 8000d40:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d42:	f7ff ffb1 	bl	8000ca8 <SPI_WaitFlagStateUntilTimeout>
 8000d46:	b120      	cbz	r0, 8000d52 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000d50:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000d52:	b002      	add	sp, #8
 8000d54:	bd10      	pop	{r4, pc}

08000d56 <HAL_SPI_Init>:
{
 8000d56:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000d58:	4604      	mov	r4, r0
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d036      	beq.n	8000dcc <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d62:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d6a:	b91b      	cbnz	r3, 8000d74 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000d6c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000d70:	f000 ffc8 	bl	8001d04 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000d74:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d76:	68a0      	ldr	r0, [r4, #8]
 8000d78:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d80:	680b      	ldr	r3, [r1, #0]
 8000d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d86:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	68e0      	ldr	r0, [r4, #12]
 8000d8e:	4303      	orrs	r3, r0
 8000d90:	6920      	ldr	r0, [r4, #16]
 8000d92:	4303      	orrs	r3, r0
 8000d94:	6960      	ldr	r0, [r4, #20]
 8000d96:	4303      	orrs	r3, r0
 8000d98:	69e0      	ldr	r0, [r4, #28]
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	6a20      	ldr	r0, [r4, #32]
 8000d9e:	4303      	orrs	r3, r0
 8000da0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000da2:	4303      	orrs	r3, r0
 8000da4:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000da8:	4303      	orrs	r3, r0
 8000daa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000dac:	0c12      	lsrs	r2, r2, #16
 8000dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000db0:	f002 0204 	and.w	r2, r2, #4
 8000db4:	431a      	orrs	r2, r3
 8000db6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000db8:	69cb      	ldr	r3, [r1, #28]
 8000dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dbe:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dc0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dc4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000dca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
}
 8000dce:	bd10      	pop	{r4, pc}

08000dd0 <HAL_SPI_Transmit>:
{
 8000dd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000dd4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000dd6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000dda:	2b01      	cmp	r3, #1
{
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460d      	mov	r5, r1
 8000de0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000de2:	f000 809c 	beq.w	8000f1e <HAL_SPI_Transmit+0x14e>
 8000de6:	2301      	movs	r3, #1
 8000de8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000dec:	f7ff fbbe 	bl	800056c <HAL_GetTick>
 8000df0:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000df2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000df6:	b2c0      	uxtb	r0, r0
 8000df8:	2801      	cmp	r0, #1
 8000dfa:	f040 808e 	bne.w	8000f1a <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d04e      	beq.n	8000ea0 <HAL_SPI_Transmit+0xd0>
 8000e02:	f1b8 0f00 	cmp.w	r8, #0
 8000e06:	d04b      	beq.n	8000ea0 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e12:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000e14:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000e18:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000e1c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000e1e:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e20:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e22:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e28:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000e2a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000e2e:	bf02      	ittt	eq
 8000e30:	681a      	ldreq	r2, [r3, #0]
 8000e32:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000e36:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000e3c:	bf5e      	ittt	pl
 8000e3e:	681a      	ldrpl	r2, [r3, #0]
 8000e40:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000e44:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e46:	68e2      	ldr	r2, [r4, #12]
 8000e48:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000e4c:	6862      	ldr	r2, [r4, #4]
 8000e4e:	d138      	bne.n	8000ec2 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000e50:	b11a      	cbz	r2, 8000e5a <HAL_SPI_Transmit+0x8a>
 8000e52:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000e54:	b292      	uxth	r2, r2
 8000e56:	2a01      	cmp	r2, #1
 8000e58:	d106      	bne.n	8000e68 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e5a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e5e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000e60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000e68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b993      	cbnz	r3, 8000e94 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000e6e:	9700      	str	r7, [sp, #0]
 8000e70:	4633      	mov	r3, r6
 8000e72:	2201      	movs	r2, #1
 8000e74:	2102      	movs	r1, #2
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff ff16 	bl	8000ca8 <SPI_WaitFlagStateUntilTimeout>
 8000e7c:	b978      	cbnz	r0, 8000e9e <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000e7e:	463a      	mov	r2, r7
 8000e80:	4631      	mov	r1, r6
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff ff57 	bl	8000d36 <SPI_CheckFlag_BSY>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d038      	beq.n	8000efe <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000e90:	2001      	movs	r0, #1
    goto error;
 8000e92:	e005      	b.n	8000ea0 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	0790      	lsls	r0, r2, #30
 8000e9a:	d4de      	bmi.n	8000e5a <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000e9c:	b94e      	cbnz	r6, 8000eb2 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000e9e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000eac:	b004      	add	sp, #16
 8000eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000eb2:	1c71      	adds	r1, r6, #1
 8000eb4:	d0d8      	beq.n	8000e68 <HAL_SPI_Transmit+0x98>
 8000eb6:	f7ff fb59 	bl	800056c <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	4286      	cmp	r6, r0
 8000ebe:	d8d3      	bhi.n	8000e68 <HAL_SPI_Transmit+0x98>
 8000ec0:	e7ed      	b.n	8000e9e <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000ec2:	b11a      	cbz	r2, 8000ecc <HAL_SPI_Transmit+0xfc>
 8000ec4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	2a01      	cmp	r2, #1
 8000eca:	d106      	bne.n	8000eda <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000ecc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000ed0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000ed2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000eda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0c5      	beq.n	8000e6e <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	0792      	lsls	r2, r2, #30
 8000ee8:	d4f0      	bmi.n	8000ecc <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d0d7      	beq.n	8000e9e <HAL_SPI_Transmit+0xce>
 8000eee:	1c73      	adds	r3, r6, #1
 8000ef0:	d0f3      	beq.n	8000eda <HAL_SPI_Transmit+0x10a>
 8000ef2:	f7ff fb3b 	bl	800056c <HAL_GetTick>
 8000ef6:	1bc0      	subs	r0, r0, r7
 8000ef8:	4286      	cmp	r6, r0
 8000efa:	d8ee      	bhi.n	8000eda <HAL_SPI_Transmit+0x10a>
 8000efc:	e7cf      	b.n	8000e9e <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000efe:	68a3      	ldr	r3, [r4, #8]
 8000f00:	b933      	cbnz	r3, 8000f10 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f02:	9303      	str	r3, [sp, #12]
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	9203      	str	r2, [sp, #12]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f12:	3000      	adds	r0, #0
 8000f14:	bf18      	it	ne
 8000f16:	2001      	movne	r0, #1
 8000f18:	e7c2      	b.n	8000ea0 <HAL_SPI_Transmit+0xd0>
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	e7c0      	b.n	8000ea0 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	e7c4      	b.n	8000eac <HAL_SPI_Transmit+0xdc>

08000f22 <HAL_SPI_TransmitReceive>:
{
 8000f22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f26:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000f28:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f2c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000f2e:	2b01      	cmp	r3, #1
{
 8000f30:	4604      	mov	r4, r0
 8000f32:	460d      	mov	r5, r1
 8000f34:	4616      	mov	r6, r2
 8000f36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000f38:	f000 80ed 	beq.w	8001116 <HAL_SPI_TransmitReceive+0x1f4>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f42:	f7ff fb13 	bl	800056c <HAL_GetTick>
  tmp  = hspi->State;
 8000f46:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8000f4a:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000f4c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f4e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f50:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f52:	d00a      	beq.n	8000f6a <HAL_SPI_TransmitReceive+0x48>
 8000f54:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f58:	f040 80db 	bne.w	8001112 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000f5c:	68a2      	ldr	r2, [r4, #8]
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	f040 80d7 	bne.w	8001112 <HAL_SPI_TransmitReceive+0x1f0>
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	f040 80d4 	bne.w	8001112 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	d04e      	beq.n	800100c <HAL_SPI_TransmitReceive+0xea>
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d04c      	beq.n	800100c <HAL_SPI_TransmitReceive+0xea>
 8000f72:	f1b9 0f00 	cmp.w	r9, #0
 8000f76:	d049      	beq.n	800100c <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000f78:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f7c:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000f7e:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f80:	bf04      	itt	eq
 8000f82:	2305      	moveq	r3, #5
 8000f84:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f8c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f8e:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f90:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f92:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f96:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f9a:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f9c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fa0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000fa2:	bf58      	it	pl
 8000fa4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fa6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000fa8:	bf58      	it	pl
 8000faa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000fae:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000fb2:	bf58      	it	pl
 8000fb4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fb6:	68e2      	ldr	r2, [r4, #12]
 8000fb8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fbc:	d15d      	bne.n	800107a <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000fbe:	b119      	cbz	r1, 8000fc8 <HAL_SPI_TransmitReceive+0xa6>
 8000fc0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	2a01      	cmp	r2, #1
 8000fc6:	d106      	bne.n	8000fd6 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fc8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fcc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000fd6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b9bb      	cbnz	r3, 8001010 <HAL_SPI_TransmitReceive+0xee>
 8000fe0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b9a3      	cbnz	r3, 8001010 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000fe6:	f8cd 8000 	str.w	r8, [sp]
 8000fea:	463b      	mov	r3, r7
 8000fec:	2201      	movs	r2, #1
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff fe59 	bl	8000ca8 <SPI_WaitFlagStateUntilTimeout>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d135      	bne.n	8001066 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	4620      	mov	r0, r4
 8001000:	f7ff fe99 	bl	8000d36 <SPI_CheckFlag_BSY>
 8001004:	2800      	cmp	r0, #0
 8001006:	d079      	beq.n	80010fc <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001008:	2320      	movs	r3, #32
 800100a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800100c:	2001      	movs	r0, #1
 800100e:	e02b      	b.n	8001068 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001010:	f1b9 0f00 	cmp.w	r9, #0
 8001014:	d00f      	beq.n	8001036 <HAL_SPI_TransmitReceive+0x114>
 8001016:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001018:	b29b      	uxth	r3, r3
 800101a:	b163      	cbz	r3, 8001036 <HAL_SPI_TransmitReceive+0x114>
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	0791      	lsls	r1, r2, #30
 8001022:	d508      	bpl.n	8001036 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001024:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001028:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800102a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800102c:	3b01      	subs	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001032:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001036:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001038:	b29b      	uxth	r3, r3
 800103a:	b163      	cbz	r3, 8001056 <HAL_SPI_TransmitReceive+0x134>
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	07d2      	lsls	r2, r2, #31
 8001042:	d508      	bpl.n	8001056 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800104a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104c:	3b01      	subs	r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001052:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001056:	1c78      	adds	r0, r7, #1
 8001058:	d0bf      	beq.n	8000fda <HAL_SPI_TransmitReceive+0xb8>
 800105a:	f7ff fa87 	bl	800056c <HAL_GetTick>
 800105e:	eba0 0008 	sub.w	r0, r0, r8
 8001062:	4287      	cmp	r7, r0
 8001064:	d8b9      	bhi.n	8000fda <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001066:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001068:	2301      	movs	r3, #1
 800106a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800106e:	2300      	movs	r3, #0
 8001070:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001074:	b005      	add	sp, #20
 8001076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800107a:	b119      	cbz	r1, 8001084 <HAL_SPI_TransmitReceive+0x162>
 800107c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800107e:	b292      	uxth	r2, r2
 8001080:	2a01      	cmp	r2, #1
 8001082:	d106      	bne.n	8001092 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001084:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001088:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800108a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800108c:	3b01      	subs	r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001092:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001096:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001098:	b29b      	uxth	r3, r3
 800109a:	b91b      	cbnz	r3, 80010a4 <HAL_SPI_TransmitReceive+0x182>
 800109c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0a0      	beq.n	8000fe6 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010a4:	f1b9 0f00 	cmp.w	r9, #0
 80010a8:	d00f      	beq.n	80010ca <HAL_SPI_TransmitReceive+0x1a8>
 80010aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b163      	cbz	r3, 80010ca <HAL_SPI_TransmitReceive+0x1a8>
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	0791      	lsls	r1, r2, #30
 80010b6:	d508      	bpl.n	80010ca <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010b8:	782a      	ldrb	r2, [r5, #0]
 80010ba:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80010bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010be:	3b01      	subs	r3, #1
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010c4:	3501      	adds	r5, #1
        txallowed = 0U;
 80010c6:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b163      	cbz	r3, 80010ea <HAL_SPI_TransmitReceive+0x1c8>
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	07d2      	lsls	r2, r2, #31
 80010d6:	d508      	bpl.n	80010ea <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80010dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010de:	3b01      	subs	r3, #1
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80010e4:	3601      	adds	r6, #1
        txallowed = 1U;
 80010e6:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80010ea:	1c7b      	adds	r3, r7, #1
 80010ec:	d0d3      	beq.n	8001096 <HAL_SPI_TransmitReceive+0x174>
 80010ee:	f7ff fa3d 	bl	800056c <HAL_GetTick>
 80010f2:	eba0 0008 	sub.w	r0, r0, r8
 80010f6:	4287      	cmp	r7, r0
 80010f8:	d8cd      	bhi.n	8001096 <HAL_SPI_TransmitReceive+0x174>
 80010fa:	e7b4      	b.n	8001066 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80010fc:	68a3      	ldr	r3, [r4, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1b2      	bne.n	8001068 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	9003      	str	r0, [sp, #12]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	9203      	str	r2, [sp, #12]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	9b03      	ldr	r3, [sp, #12]
 8001110:	e7aa      	b.n	8001068 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001112:	2002      	movs	r0, #2
 8001114:	e7a8      	b.n	8001068 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001116:	2002      	movs	r0, #2
 8001118:	e7ac      	b.n	8001074 <HAL_SPI_TransmitReceive+0x152>

0800111a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800111a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800111e:	2b01      	cmp	r3, #1
{
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001126:	d01c      	beq.n	8001162 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001128:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800112c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800112e:	2201      	movs	r2, #1
 8001130:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001134:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001136:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800113a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800113e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001140:	680a      	ldr	r2, [r1, #0]
 8001142:	2a40      	cmp	r2, #64	; 0x40
 8001144:	d079      	beq.n	800123a <HAL_TIM_ConfigClockSource+0x120>
 8001146:	d819      	bhi.n	800117c <HAL_TIM_ConfigClockSource+0x62>
 8001148:	2a10      	cmp	r2, #16
 800114a:	f000 8093 	beq.w	8001274 <HAL_TIM_ConfigClockSource+0x15a>
 800114e:	d80a      	bhi.n	8001166 <HAL_TIM_ConfigClockSource+0x4c>
 8001150:	2a00      	cmp	r2, #0
 8001152:	f000 8089 	beq.w	8001268 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001156:	2301      	movs	r3, #1
 8001158:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800115c:	2300      	movs	r3, #0
 800115e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001162:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8001164:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001166:	2a20      	cmp	r2, #32
 8001168:	f000 808a 	beq.w	8001280 <HAL_TIM_ConfigClockSource+0x166>
 800116c:	2a30      	cmp	r2, #48	; 0x30
 800116e:	d1f2      	bne.n	8001156 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001170:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001172:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001176:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800117a:	e036      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800117c:	2a70      	cmp	r2, #112	; 0x70
 800117e:	d036      	beq.n	80011ee <HAL_TIM_ConfigClockSource+0xd4>
 8001180:	d81b      	bhi.n	80011ba <HAL_TIM_ConfigClockSource+0xa0>
 8001182:	2a50      	cmp	r2, #80	; 0x50
 8001184:	d042      	beq.n	800120c <HAL_TIM_ConfigClockSource+0xf2>
 8001186:	2a60      	cmp	r2, #96	; 0x60
 8001188:	d1e5      	bne.n	8001156 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800118a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800118c:	684d      	ldr	r5, [r1, #4]
 800118e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001190:	f024 0410 	bic.w	r4, r4, #16
 8001194:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001196:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001198:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800119a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800119e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80011a2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80011a6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80011aa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80011ac:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80011ae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80011b4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80011b8:	e017      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80011ba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011be:	d011      	beq.n	80011e4 <HAL_TIM_ConfigClockSource+0xca>
 80011c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80011c4:	d1c7      	bne.n	8001156 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011c6:	688a      	ldr	r2, [r1, #8]
 80011c8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80011ca:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011cc:	68c9      	ldr	r1, [r1, #12]
 80011ce:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011d0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011d8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011da:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011e2:	e002      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e7b3      	b.n	8001156 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011ee:	688a      	ldr	r2, [r1, #8]
 80011f0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80011f2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011f4:	68c9      	ldr	r1, [r1, #12]
 80011f6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001200:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001202:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001204:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001206:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800120a:	e7ee      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800120c:	684c      	ldr	r4, [r1, #4]
 800120e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001210:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001212:	6a1d      	ldr	r5, [r3, #32]
 8001214:	f025 0501 	bic.w	r5, r5, #1
 8001218:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800121a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800121c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001220:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001224:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001228:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800122a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800122c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800122e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001234:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001238:	e7d7      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800123a:	684c      	ldr	r4, [r1, #4]
 800123c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800123e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001240:	6a1d      	ldr	r5, [r3, #32]
 8001242:	f025 0501 	bic.w	r5, r5, #1
 8001246:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001248:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800124a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800124e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001252:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001256:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800125a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800125c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800125e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001262:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001266:	e7c0      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001268:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800126a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800126e:	f042 0207 	orr.w	r2, r2, #7
 8001272:	e7ba      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001274:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001276:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800127a:	f042 0217 	orr.w	r2, r2, #23
 800127e:	e7b4      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001280:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001282:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001286:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800128a:	e7ae      	b.n	80011ea <HAL_TIM_ConfigClockSource+0xd0>

0800128c <HAL_TIM_OC_DelayElapsedCallback>:
 800128c:	4770      	bx	lr

0800128e <HAL_TIM_IC_CaptureCallback>:
 800128e:	4770      	bx	lr

08001290 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001290:	4770      	bx	lr

08001292 <HAL_TIM_TriggerCallback>:
 8001292:	4770      	bx	lr

08001294 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001294:	6803      	ldr	r3, [r0, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	0791      	lsls	r1, r2, #30
{
 800129a:	b510      	push	{r4, lr}
 800129c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800129e:	d50e      	bpl.n	80012be <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	0792      	lsls	r2, r2, #30
 80012a4:	d50b      	bpl.n	80012be <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012a6:	f06f 0202 	mvn.w	r2, #2
 80012aa:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012ac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ae:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012b0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012b2:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012b4:	d077      	beq.n	80013a6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80012b6:	f7ff ffea 	bl	800128e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ba:	2300      	movs	r3, #0
 80012bc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	0750      	lsls	r0, r2, #29
 80012c4:	d510      	bpl.n	80012e8 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	0751      	lsls	r1, r2, #29
 80012ca:	d50d      	bpl.n	80012e8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012cc:	f06f 0204 	mvn.w	r2, #4
 80012d0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012d2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012d4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012da:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80012dc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012de:	d068      	beq.n	80013b2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80012e0:	f7ff ffd5 	bl	800128e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012e4:	2300      	movs	r3, #0
 80012e6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	0712      	lsls	r2, r2, #28
 80012ee:	d50f      	bpl.n	8001310 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	0710      	lsls	r0, r2, #28
 80012f4:	d50c      	bpl.n	8001310 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012f6:	f06f 0208 	mvn.w	r2, #8
 80012fa:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012fe:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001300:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001302:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001304:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001306:	d05a      	beq.n	80013be <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001308:	f7ff ffc1 	bl	800128e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130c:	2300      	movs	r3, #0
 800130e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	06d2      	lsls	r2, r2, #27
 8001316:	d510      	bpl.n	800133a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	06d0      	lsls	r0, r2, #27
 800131c:	d50d      	bpl.n	800133a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800131e:	f06f 0210 	mvn.w	r2, #16
 8001322:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001324:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001326:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001328:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800132c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800132e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001330:	d04b      	beq.n	80013ca <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001332:	f7ff ffac 	bl	800128e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001336:	2300      	movs	r3, #0
 8001338:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	07d1      	lsls	r1, r2, #31
 8001340:	d508      	bpl.n	8001354 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	07d2      	lsls	r2, r2, #31
 8001346:	d505      	bpl.n	8001354 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001348:	f06f 0201 	mvn.w	r2, #1
 800134c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800134e:	4620      	mov	r0, r4
 8001350:	f000 f922 	bl	8001598 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	0610      	lsls	r0, r2, #24
 800135a:	d508      	bpl.n	800136e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	0611      	lsls	r1, r2, #24
 8001360:	d505      	bpl.n	800136e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001362:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001366:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001368:	4620      	mov	r0, r4
 800136a:	f000 f8d6 	bl	800151a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	0652      	lsls	r2, r2, #25
 8001374:	d508      	bpl.n	8001388 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	0650      	lsls	r0, r2, #25
 800137a:	d505      	bpl.n	8001388 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800137c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001380:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff ff85 	bl	8001292 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	0691      	lsls	r1, r2, #26
 800138e:	d522      	bpl.n	80013d6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	0692      	lsls	r2, r2, #26
 8001394:	d51f      	bpl.n	80013d6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001396:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800139a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800139c:	611a      	str	r2, [r3, #16]
}
 800139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80013a2:	f000 b8b9 	b.w	8001518 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013a6:	f7ff ff71 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ff70 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013b0:	e783      	b.n	80012ba <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013b2:	f7ff ff6b 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff6a 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013bc:	e792      	b.n	80012e4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013be:	f7ff ff65 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff ff64 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013c8:	e7a0      	b.n	800130c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ca:	f7ff ff5f 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff ff5e 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013d4:	e7af      	b.n	8001336 <HAL_TIM_IRQHandler+0xa2>
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80013d8:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80013da:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80013dc:	4290      	cmp	r0, r2
 80013de:	d012      	beq.n	8001406 <TIM_Base_SetConfig+0x2e>
 80013e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013e4:	d00f      	beq.n	8001406 <TIM_Base_SetConfig+0x2e>
 80013e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d00b      	beq.n	8001406 <TIM_Base_SetConfig+0x2e>
 80013ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f2:	4290      	cmp	r0, r2
 80013f4:	d007      	beq.n	8001406 <TIM_Base_SetConfig+0x2e>
 80013f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013fa:	4290      	cmp	r0, r2
 80013fc:	d003      	beq.n	8001406 <TIM_Base_SetConfig+0x2e>
 80013fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001402:	4290      	cmp	r0, r2
 8001404:	d11d      	bne.n	8001442 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001406:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800140c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <TIM_Base_SetConfig+0xbc>)
 8001410:	4290      	cmp	r0, r2
 8001412:	d104      	bne.n	800141e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001414:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800141a:	4313      	orrs	r3, r2
 800141c:	e028      	b.n	8001470 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800141e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001422:	d0f7      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <TIM_Base_SetConfig+0xc0>)
 8001426:	4290      	cmp	r0, r2
 8001428:	d0f4      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 800142a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800142e:	4290      	cmp	r0, r2
 8001430:	d0f0      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001436:	4290      	cmp	r0, r2
 8001438:	d0ec      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 800143a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800143e:	4290      	cmp	r0, r2
 8001440:	d0e8      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <TIM_Base_SetConfig+0xc4>)
 8001444:	4290      	cmp	r0, r2
 8001446:	d0e5      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001448:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144c:	4290      	cmp	r0, r2
 800144e:	d0e1      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001454:	4290      	cmp	r0, r2
 8001456:	d0dd      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001458:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800145c:	4290      	cmp	r0, r2
 800145e:	d0d9      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001464:	4290      	cmp	r0, r2
 8001466:	d0d5      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
 8001468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800146c:	4290      	cmp	r0, r2
 800146e:	d0d1      	beq.n	8001414 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001470:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001472:	688b      	ldr	r3, [r1, #8]
 8001474:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001476:	680b      	ldr	r3, [r1, #0]
 8001478:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <TIM_Base_SetConfig+0xbc>)
 800147c:	4298      	cmp	r0, r3
 800147e:	d006      	beq.n	800148e <TIM_Base_SetConfig+0xb6>
 8001480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001484:	4298      	cmp	r0, r3
 8001486:	d002      	beq.n	800148e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001488:	2301      	movs	r3, #1
 800148a:	6143      	str	r3, [r0, #20]
}
 800148c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800148e:	690b      	ldr	r3, [r1, #16]
 8001490:	6303      	str	r3, [r0, #48]	; 0x30
 8001492:	e7f9      	b.n	8001488 <TIM_Base_SetConfig+0xb0>
 8001494:	40010000 	.word	0x40010000
 8001498:	40000400 	.word	0x40000400
 800149c:	40014000 	.word	0x40014000

080014a0 <HAL_TIM_Base_Init>:
{ 
 80014a0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014a2:	4604      	mov	r4, r0
 80014a4:	b1a0      	cbz	r0, 80014d0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ae:	b91b      	cbnz	r3, 80014b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80014b4:	f000 fc5c 	bl	8001d70 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80014be:	6820      	ldr	r0, [r4, #0]
 80014c0:	1d21      	adds	r1, r4, #4
 80014c2:	f7ff ff89 	bl	80013d8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80014cc:	2000      	movs	r0, #0
 80014ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
}
 80014d2:	bd10      	pop	{r4, pc}

080014d4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80014d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014d8:	2b01      	cmp	r3, #1
{
 80014da:	b510      	push	{r4, lr}
 80014dc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80014e0:	d018      	beq.n	8001514 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80014e2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014e6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80014e8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014ea:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014ec:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014f2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4322      	orrs	r2, r4
 80014f8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001500:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001508:	2301      	movs	r3, #1
 800150a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800150e:	2300      	movs	r3, #0
 8001510:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001514:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001516:	bd10      	pop	{r4, pc}

08001518 <HAL_TIMEx_CommutationCallback>:
 8001518:	4770      	bx	lr

0800151a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800151a:	4770      	bx	lr

0800151c <LED_Off.part.1>:
	}
}

void LED_Off(uint8_t led){
	switch(led){
		case LED_GREEN:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <LED_Off.part.1+0xc>)
 8001524:	f7ff b970 	b.w	8000808 <HAL_GPIO_WritePin>
 8001528:	40020c00 	.word	0x40020c00

0800152c <LED_On>:
	switch(led){
 800152c:	2803      	cmp	r0, #3
 800152e:	d815      	bhi.n	800155c <LED_On+0x30>
 8001530:	e8df f000 	tbb	[pc, r0]
 8001534:	100c0802 	.word	0x100c0802
		case LED_GREEN: 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <LED_On+0x34>)
 8001540:	f7ff b962 	b.w	8000808 <HAL_GPIO_WritePin>
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	e7f8      	b.n	800153e <LED_On+0x12>
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001552:	e7f4      	b.n	800153e <LED_On+0x12>
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	e7f0      	b.n	800153e <LED_On+0x12>
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40020c00 	.word	0x40020c00

08001564 <LED_Off>:
	switch(led){
 8001564:	2803      	cmp	r0, #3
 8001566:	d813      	bhi.n	8001590 <LED_Off+0x2c>
 8001568:	e8df f000 	tbb	[pc, r0]
 800156c:	0e0a0402 	.word	0x0e0a0402
 8001570:	f7ff bfd4 	b.w	800151c <LED_Off.part.1>
					break;
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
					break;
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
					break;
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <LED_Off+0x30>)
 800157c:	f7ff b944 	b.w	8000808 <HAL_GPIO_WritePin>
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001586:	e7f8      	b.n	800157a <LED_Off+0x16>
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	e7f4      	b.n	800157a <LED_Off+0x16>
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40020c00 	.word	0x40020c00

08001598 <HAL_TIM_PeriodElapsedCallback>:
					break;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	count++;
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x14>)
	if(count > 1000000){
 800159a:	4905      	ldr	r1, [pc, #20]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x18>)
	count++;
 800159c:	6813      	ldr	r3, [r2, #0]
 800159e:	3301      	adds	r3, #1
	if(count > 1000000){
 80015a0:	428b      	cmp	r3, r1
		count = 0;
 80015a2:	bfc8      	it	gt
 80015a4:	2300      	movgt	r3, #0
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000028 	.word	0x20000028
 80015b0:	000f4240 	.word	0x000f4240

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b508      	push	{r3, lr}
 80015b6:	f7ff ffb1 	bl	800151c <LED_Off.part.1>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	LED_Off(LED_GREEN);
	LED_Off(LED_BLUE);
 80015ba:	2002      	movs	r0, #2
 80015bc:	f7ff ffd2 	bl	8001564 <LED_Off>
	LED_Off(LED_ORANGE);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f7ff ffcf 	bl	8001564 <LED_Off>
	LED_On(LED_RED);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff ffb0 	bl	800152c <LED_On>
 80015cc:	e7fe      	b.n	80015cc <Error_Handler+0x18>
	...

080015d0 <SystemClock_Config>:
{
 80015d0:	b510      	push	{r4, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d4:	2230      	movs	r2, #48	; 0x30
 80015d6:	2100      	movs	r1, #0
 80015d8:	a808      	add	r0, sp, #32
 80015da:	f000 fc6b 	bl	8001eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015de:	2214      	movs	r2, #20
 80015e0:	2100      	movs	r1, #0
 80015e2:	a803      	add	r0, sp, #12
 80015e4:	f000 fc66 	bl	8001eb4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <SystemClock_Config+0x98>)
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80015f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80015f4:	6411      	str	r1, [r2, #64]	; 0x40
 80015f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	4a1a      	ldr	r2, [pc, #104]	; (800166c <SystemClock_Config+0x9c>)
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	6811      	ldr	r1, [r2, #0]
 8001606:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800160a:	6011      	str	r1, [r2, #0]
 800160c:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160e:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001614:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001616:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001618:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800161a:	2332      	movs	r3, #50	; 0x32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 50;
 800161e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001622:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001624:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001626:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001628:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162a:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800162c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001630:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001632:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001634:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001636:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f7ff f8ec 	bl	8000814 <HAL_RCC_OscConfig>
 800163c:	4601      	mov	r1, r0
 800163e:	b108      	cbz	r0, 8001644 <SystemClock_Config+0x74>
    Error_Handler();
 8001640:	f7ff ffb8 	bl	80015b4 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001648:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800164e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001650:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001652:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001656:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001658:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800165a:	f7ff fa8b 	bl	8000b74 <HAL_RCC_ClockConfig>
 800165e:	2800      	cmp	r0, #0
 8001660:	d1ee      	bne.n	8001640 <SystemClock_Config+0x70>
}
 8001662:	b014      	add	sp, #80	; 0x50
 8001664:	bd10      	pop	{r4, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <main>:
{
 8001670:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001674:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001676:	f7fe ff53 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 800167a:	f7ff ffa9 	bl	80015d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	2214      	movs	r2, #20
 8001680:	2100      	movs	r1, #0
 8001682:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001684:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f000 fc15 	bl	8001eb4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4ba2      	ldr	r3, [pc, #648]	; (8001914 <main+0x2a4>)
 800168c:	9403      	str	r4, [sp, #12]
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001690:	48a1      	ldr	r0, [pc, #644]	; (8001918 <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001692:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8001940 <main+0x2d0>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001696:	f042 0210 	orr.w	r2, r2, #16
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
 800169c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169e:	f002 0210 	and.w	r2, r2, #16
 80016a2:	9203      	str	r2, [sp, #12]
 80016a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	9404      	str	r4, [sp, #16]
 80016a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016aa:	f042 0204 	orr.w	r2, r2, #4
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
 80016b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b2:	f002 0204 	and.w	r2, r2, #4
 80016b6:	9204      	str	r2, [sp, #16]
 80016b8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	9405      	str	r4, [sp, #20]
 80016bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
 80016c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80016ca:	9205      	str	r2, [sp, #20]
 80016cc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	9406      	str	r4, [sp, #24]
 80016d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
 80016d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016da:	f002 0201 	and.w	r2, r2, #1
 80016de:	9206      	str	r2, [sp, #24]
 80016e0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	9407      	str	r4, [sp, #28]
 80016e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e6:	f042 0202 	orr.w	r2, r2, #2
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
 80016ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ee:	f002 0202 	and.w	r2, r2, #2
 80016f2:	9207      	str	r2, [sp, #28]
 80016f4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	9408      	str	r4, [sp, #32]
 80016f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001708:	4622      	mov	r2, r4
 800170a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800170e:	f7ff f87b 	bl	8000808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001712:	4622      	mov	r2, r4
 8001714:	2101      	movs	r1, #1
 8001716:	4881      	ldr	r0, [pc, #516]	; (800191c <main+0x2ac>)
 8001718:	f7ff f876 	bl	8000808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800171c:	4622      	mov	r2, r4
 800171e:	2110      	movs	r1, #16
 8001720:	487f      	ldr	r0, [pc, #508]	; (8001920 <main+0x2b0>)
 8001722:	f7ff f871 	bl	8000808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8001726:	4622      	mov	r2, r4
 8001728:	f24f 0110 	movw	r1, #61456	; 0xf010
 800172c:	487d      	ldr	r0, [pc, #500]	; (8001924 <main+0x2b4>)
 800172e:	f7ff f86b 	bl	8000808 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001734:	2608      	movs	r6, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001736:	a90b      	add	r1, sp, #44	; 0x2c
 8001738:	4877      	ldr	r0, [pc, #476]	; (8001918 <main+0x2a8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800173a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f7fe ff81 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	a90b      	add	r1, sp, #44	; 0x2c
 8001748:	4874      	ldr	r0, [pc, #464]	; (800191c <main+0x2ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174a:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174c:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f7fe ff77 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	486e      	ldr	r0, [pc, #440]	; (800191c <main+0x2ac>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001762:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f7fe ff6c 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	a90b      	add	r1, sp, #44	; 0x2c
 8001772:	486b      	ldr	r0, [pc, #428]	; (8001920 <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001774:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001776:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800177c:	2710      	movs	r7, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f7fe ff63 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	a90b      	add	r1, sp, #44	; 0x2c
 8001784:	4866      	ldr	r0, [pc, #408]	; (8001920 <main+0x2b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001788:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800178c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f7fe ff59 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	a90b      	add	r1, sp, #44	; 0x2c
 8001798:	4863      	ldr	r0, [pc, #396]	; (8001928 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800179a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f7fe ff51 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	a90b      	add	r1, sp, #44	; 0x2c
 80017ac:	485e      	ldr	r0, [pc, #376]	; (8001928 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f7fe ff45 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80017be:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	a90b      	add	r1, sp, #44	; 0x2c
 80017c4:	4857      	ldr	r0, [pc, #348]	; (8001924 <main+0x2b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80017c6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f7fe ff3b 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80017d2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017d6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017da:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	484f      	ldr	r0, [pc, #316]	; (800191c <main+0x2ac>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017de:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e0:	f44f 7900 	mov.w	r9, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f7fe ff2d 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	a90b      	add	r1, sp, #44	; 0x2c
 80017f0:	484b      	ldr	r0, [pc, #300]	; (8001920 <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f7fe ff25 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001802:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001804:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	a90b      	add	r1, sp, #44	; 0x2c
 800180c:	4844      	ldr	r0, [pc, #272]	; (8001920 <main+0x2b0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	930e      	str	r3, [sp, #56]	; 0x38
 8001810:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001816:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f7fe ff15 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800181e:	2220      	movs	r2, #32
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	a90b      	add	r1, sp, #44	; 0x2c
 8001822:	4840      	ldr	r0, [pc, #256]	; (8001924 <main+0x2b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001824:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f7fe ff0d 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800182e:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001834:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001838:	2212      	movs	r2, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	483b      	ldr	r0, [pc, #236]	; (8001928 <main+0x2b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001840:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001842:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f7fe feff 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184a:	a90b      	add	r1, sp, #44	; 0x2c
 800184c:	4832      	ldr	r0, [pc, #200]	; (8001918 <main+0x2a8>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800184e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001850:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001856:	f7fe fef7 	bl	8000648 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800185a:	4834      	ldr	r0, [pc, #208]	; (800192c <main+0x2bc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800185c:	4934      	ldr	r1, [pc, #208]	; (8001930 <main+0x2c0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001860:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001864:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001868:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800186a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001870:	f8c0 9018 	str.w	r9, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001874:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001876:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800187c:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001880:	f7ff fa69 	bl	8000d56 <HAL_SPI_Init>
 8001884:	4605      	mov	r5, r0
 8001886:	b108      	cbz	r0, 800188c <main+0x21c>
    Error_Handler();
 8001888:	f7ff fe94 	bl	80015b4 <Error_Handler>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188c:	463a      	mov	r2, r7
 800188e:	4601      	mov	r1, r0
 8001890:	a80b      	add	r0, sp, #44	; 0x2c
 8001892:	f000 fb0f 	bl	8001eb4 <memset>
  htim3.Instance = TIM3;
 8001896:	4c27      	ldr	r4, [pc, #156]	; (8001934 <main+0x2c4>)
  htim3.Init.Prescaler = 625-1;
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <main+0x2c8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189a:	9509      	str	r5, [sp, #36]	; 0x24
  htim3.Init.Prescaler = 625-1;
 800189c:	f44f 731c 	mov.w	r3, #624	; 0x270
 80018a0:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018a4:	4620      	mov	r0, r4
  htim3.Init.Period = 10-1;
 80018a6:	2309      	movs	r3, #9
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	950a      	str	r5, [sp, #40]	; 0x28
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 10-1;
 80018ac:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018b0:	f7ff fdf6 	bl	80014a0 <HAL_TIM_Base_Init>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d1e7      	bne.n	8001888 <main+0x218>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018bc:	a90b      	add	r1, sp, #44	; 0x2c
 80018be:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018c2:	f7ff fc2a 	bl	800111a <HAL_TIM_ConfigClockSource>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d1de      	bne.n	8001888 <main+0x218>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ca:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ce:	a909      	add	r1, sp, #36	; 0x24
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff fdff 	bl	80014d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1d6      	bne.n	8001888 <main+0x218>
  nss_inactive();
 80018da:	f000 f83b 	bl	8001954 <nss_inactive>
  MFRC522_Init();
 80018de:	f000 f8ac 	bl	8001a3a <MFRC522_Init>
	  if(MFRC522_Check(CardID) == MI_OK){
 80018e2:	4c16      	ldr	r4, [pc, #88]	; (800193c <main+0x2cc>)
		case LED_GREEN: 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80018e4:	4d0f      	ldr	r5, [pc, #60]	; (8001924 <main+0x2b4>)
	  if(MFRC522_Check(CardID) == MI_OK){
 80018e6:	4620      	mov	r0, r4
 80018e8:	f000 f9dc 	bl	8001ca4 <MFRC522_Check>
 80018ec:	b960      	cbnz	r0, 8001908 <main+0x298>
		  LED_Off(LED_RED);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fe38 	bl	8001564 <LED_Off>
		case LED_GREEN: 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7fe ff84 	bl	8000808 <HAL_GPIO_WritePin>
	  LED_On(LED_BLUE);
 8001900:	2002      	movs	r0, #2
 8001902:	f7ff fe13 	bl	800152c <LED_On>
	  if(MFRC522_Check(CardID) == MI_OK){
 8001906:	e7ee      	b.n	80018e6 <main+0x276>
 8001908:	f7ff fe08 	bl	800151c <LED_Off.part.1>
		  LED_On(LED_RED);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff fe0d 	bl	800152c <LED_On>
 8001912:	e7f5      	b.n	8001900 <main+0x290>
 8001914:	40023800 	.word	0x40023800
 8001918:	40021000 	.word	0x40021000
 800191c:	40020800 	.word	0x40020800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40020400 	.word	0x40020400
 800192c:	20000090 	.word	0x20000090
 8001930:	40013000 	.word	0x40013000
 8001934:	20000044 	.word	0x20000044
 8001938:	40000400 	.word	0x40000400
 800193c:	200000e8 	.word	0x200000e8
 8001940:	10110000 	.word	0x10110000

08001944 <nss_active>:
#include "main.h"
#include "mfrc522.h"


void nss_active(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2110      	movs	r1, #16
 8001948:	4801      	ldr	r0, [pc, #4]	; (8001950 <nss_active+0xc>)
 800194a:	f7fe bf5d 	b.w	8000808 <HAL_GPIO_WritePin>
 800194e:	bf00      	nop
 8001950:	40020000 	.word	0x40020000

08001954 <nss_inactive>:
}

void nss_inactive(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4801      	ldr	r0, [pc, #4]	; (8001960 <nss_inactive+0xc>)
 800195a:	f7fe bf55 	b.w	8000808 <HAL_GPIO_WritePin>
 800195e:	bf00      	nop
 8001960:	40020000 	.word	0x40020000

08001964 <MFRC522_WriteRegister>:
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);

	MFRC522_AntennaOn();		//Open the antenna
}

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001964:	b510      	push	{r4, lr}
	//Set address and data
	txbuff[0] = (addr << 1) & 0x7E;
 8001966:	0040      	lsls	r0, r0, #1
 8001968:	4c0a      	ldr	r4, [pc, #40]	; (8001994 <MFRC522_WriteRegister+0x30>)
 800196a:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 800196e:	7020      	strb	r0, [r4, #0]
	txbuff[1] = val;
 8001970:	7061      	strb	r1, [r4, #1]
	//NSS low
	nss_active();
 8001972:	f7ff ffe7 	bl	8001944 <nss_active>
	//Send address and data
	if(HAL_SPI_Transmit(&hspi1, txbuff, 2, 5000) != HAL_OK){
 8001976:	f241 3388 	movw	r3, #5000	; 0x1388
 800197a:	2202      	movs	r2, #2
 800197c:	4621      	mov	r1, r4
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <MFRC522_WriteRegister+0x34>)
 8001980:	f7ff fa26 	bl	8000dd0 <HAL_SPI_Transmit>
 8001984:	b108      	cbz	r0, 800198a <MFRC522_WriteRegister+0x26>
	  Error_Handler();
 8001986:	f7ff fe15 	bl	80015b4 <Error_Handler>
	}
	//NSS high
	nss_inactive();
}
 800198a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nss_inactive();
 800198e:	f7ff bfe1 	b.w	8001954 <nss_inactive>
 8001992:	bf00      	nop
 8001994:	20000030 	.word	0x20000030
 8001998:	20000090 	.word	0x20000090

0800199c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800199c:	b513      	push	{r0, r1, r4, lr}
	//set address
	txbuff[0] = ((addr << 1) & 0x7E) | 0x80;
 800199e:	0040      	lsls	r0, r0, #1
 80019a0:	4c0d      	ldr	r4, [pc, #52]	; (80019d8 <MFRC522_ReadRegister+0x3c>)
 80019a2:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 80019a6:	f060 007f 	orn	r0, r0, #127	; 0x7f
	txbuff[1] = 0;
 80019aa:	2300      	movs	r3, #0
	txbuff[0] = ((addr << 1) & 0x7E) | 0x80;
 80019ac:	7020      	strb	r0, [r4, #0]
	txbuff[1] = 0;
 80019ae:	7063      	strb	r3, [r4, #1]
	//NSS low
	nss_active();
 80019b0:	f7ff ffc8 	bl	8001944 <nss_active>
	//send and recieve via SPI
	if(HAL_SPI_TransmitReceive(&hspi1, txbuff, rxbuff, 2, 5000) != HAL_OK){
 80019b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <MFRC522_ReadRegister+0x40>)
 80019bc:	4808      	ldr	r0, [pc, #32]	; (80019e0 <MFRC522_ReadRegister+0x44>)
 80019be:	2302      	movs	r3, #2
 80019c0:	4621      	mov	r1, r4
 80019c2:	f7ff faae 	bl	8000f22 <HAL_SPI_TransmitReceive>
 80019c6:	b108      	cbz	r0, 80019cc <MFRC522_ReadRegister+0x30>
	  Error_Handler();
 80019c8:	f7ff fdf4 	bl	80015b4 <Error_Handler>
	}
	//NSS high
	nss_inactive();
 80019cc:	f7ff ffc2 	bl	8001954 <nss_inactive>

	return rxbuff[1];
}
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <MFRC522_ReadRegister+0x40>)
 80019d2:	7858      	ldrb	r0, [r3, #1]
 80019d4:	b002      	add	sp, #8
 80019d6:	bd10      	pop	{r4, pc}
 80019d8:	20000030 	.word	0x20000030
 80019dc:	20000080 	.word	0x20000080
 80019e0:	20000090 	.word	0x20000090

080019e4 <MFRC522_SetBitMask>:
		}
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4605      	mov	r5, r0
 80019e8:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80019ea:	f7ff ffd7 	bl	800199c <MFRC522_ReadRegister>
 80019ee:	ea40 0104 	orr.w	r1, r0, r4
 80019f2:	b2c9      	uxtb	r1, r1
 80019f4:	4628      	mov	r0, r5
}
 80019f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80019fa:	f7ff bfb3 	b.w	8001964 <MFRC522_WriteRegister>

080019fe <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80019fe:	b538      	push	{r3, r4, r5, lr}
 8001a00:	4605      	mov	r5, r0
 8001a02:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001a04:	f7ff ffca 	bl	800199c <MFRC522_ReadRegister>
 8001a08:	ea20 0104 	bic.w	r1, r0, r4
 8001a0c:	b2c9      	uxtb	r1, r1
 8001a0e:	4628      	mov	r0, r5
}
 8001a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001a14:	f7ff bfa6 	b.w	8001964 <MFRC522_WriteRegister>

08001a18 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001a18:	b508      	push	{r3, lr}
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001a1a:	2014      	movs	r0, #20
 8001a1c:	f7ff ffbe 	bl	800199c <MFRC522_ReadRegister>
	if (!(temp & 0x03)) {
 8001a20:	0783      	lsls	r3, r0, #30
 8001a22:	d105      	bne.n	8001a30 <MFRC522_AntennaOn+0x18>
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001a24:	2103      	movs	r1, #3
 8001a26:	2014      	movs	r0, #20
	}
}
 8001a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001a2c:	f7ff bfda 	b.w	80019e4 <MFRC522_SetBitMask>
 8001a30:	bd08      	pop	{r3, pc}

08001a32 <MFRC522_Reset>:
void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Reset(void) {
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001a32:	210f      	movs	r1, #15
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff bf95 	b.w	8001964 <MFRC522_WriteRegister>

08001a3a <MFRC522_Init>:
void MFRC522_Init(void){
 8001a3a:	b508      	push	{r3, lr}
	MFRC522_Reset();
 8001a3c:	f7ff fff9 	bl	8001a32 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001a40:	218d      	movs	r1, #141	; 0x8d
 8001a42:	202a      	movs	r0, #42	; 0x2a
 8001a44:	f7ff ff8e 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001a48:	213e      	movs	r1, #62	; 0x3e
 8001a4a:	202b      	movs	r0, #43	; 0x2b
 8001a4c:	f7ff ff8a 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8001a50:	211e      	movs	r1, #30
 8001a52:	202d      	movs	r0, #45	; 0x2d
 8001a54:	f7ff ff86 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	202c      	movs	r0, #44	; 0x2c
 8001a5c:	f7ff ff82 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8001a60:	2170      	movs	r1, #112	; 0x70
 8001a62:	2026      	movs	r0, #38	; 0x26
 8001a64:	f7ff ff7e 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001a68:	2140      	movs	r1, #64	; 0x40
 8001a6a:	2015      	movs	r0, #21
 8001a6c:	f7ff ff7a 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001a70:	213d      	movs	r1, #61	; 0x3d
 8001a72:	2011      	movs	r0, #17
 8001a74:	f7ff ff76 	bl	8001964 <MFRC522_WriteRegister>
}
 8001a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MFRC522_AntennaOn();		//Open the antenna
 8001a7c:	f7ff bfcc 	b.w	8001a18 <MFRC522_AntennaOn>

08001a80 <MFRC522_ToCard>:
	}

	return status;
}

MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001a84:	280c      	cmp	r0, #12
MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001a86:	4607      	mov	r7, r0
 8001a88:	460d      	mov	r5, r1
 8001a8a:	4692      	mov	sl, r2
 8001a8c:	461e      	mov	r6, r3
 8001a8e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	switch (command) {
 8001a92:	d03f      	beq.n	8001b14 <MFRC522_ToCard+0x94>
 8001a94:	280e      	cmp	r0, #14
 8001a96:	d041      	beq.n	8001b1c <MFRC522_ToCard+0x9c>
	uint8_t waitIRq = 0x00;
 8001a98:	f04f 0900 	mov.w	r9, #0
	uint8_t irqEn = 0x00;
 8001a9c:	464c      	mov	r4, r9
		}
		default:
			break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001a9e:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7ff ff5e 	bl	8001964 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f7ff ffa7 	bl	80019fe <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f7ff ff96 	bl	80019e4 <MFRC522_SetBitMask>

	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff ff52 	bl	8001964 <MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8001ac0:	46ab      	mov	fp, r5
 8001ac2:	fa1f fa8a 	uxth.w	sl, sl
 8001ac6:	ebab 0305 	sub.w	r3, fp, r5
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	459a      	cmp	sl, r3
 8001ace:	d829      	bhi.n	8001b24 <MFRC522_ToCard+0xa4>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
	}

	//Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001ad0:	4639      	mov	r1, r7
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff ff46 	bl	8001964 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8001ad8:	2f0c      	cmp	r7, #12
 8001ada:	d103      	bne.n	8001ae4 <MFRC522_ToCard+0x64>
		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	200d      	movs	r0, #13
 8001ae0:	f7ff ff80 	bl	80019e4 <MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++) {
 8001ae4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001ae8:	f049 0901 	orr.w	r9, r9, #1
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001aec:	2004      	movs	r0, #4
 8001aee:	f7ff ff55 	bl	800199c <MFRC522_ReadRegister>
		i--;
 8001af2:	3d01      	subs	r5, #1
 8001af4:	b2ad      	uxth	r5, r5
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001af6:	4682      	mov	sl, r0
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001af8:	b115      	cbz	r5, 8001b00 <MFRC522_ToCard+0x80>
 8001afa:	ea10 0f09 	tst.w	r0, r9
 8001afe:	d0f5      	beq.n	8001aec <MFRC522_ToCard+0x6c>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	200d      	movs	r0, #13
 8001b04:	f7ff ff7b 	bl	80019fe <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001b08:	b995      	cbnz	r5, 8001b30 <MFRC522_ToCard+0xb0>
	MFRC522_Status_t status = MI_ERR;
 8001b0a:	f04f 0a02 	mov.w	sl, #2
			status = MI_ERR;
		}
	}

	return status;
}
 8001b0e:	4650      	mov	r0, sl
 8001b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			waitIRq = 0x30;
 8001b14:	f04f 0930 	mov.w	r9, #48	; 0x30
			irqEn = 0x77;
 8001b18:	2477      	movs	r4, #119	; 0x77
			break;
 8001b1a:	e7c0      	b.n	8001a9e <MFRC522_ToCard+0x1e>
			waitIRq = 0x10;
 8001b1c:	f04f 0910 	mov.w	r9, #16
			irqEn = 0x12;
 8001b20:	2412      	movs	r4, #18
 8001b22:	e7bc      	b.n	8001a9e <MFRC522_ToCard+0x1e>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001b24:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8001b28:	2009      	movs	r0, #9
 8001b2a:	f7ff ff1b 	bl	8001964 <MFRC522_WriteRegister>
 8001b2e:	e7ca      	b.n	8001ac6 <MFRC522_ToCard+0x46>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001b30:	2006      	movs	r0, #6
 8001b32:	f7ff ff33 	bl	800199c <MFRC522_ReadRegister>
 8001b36:	f010 0f1b 	tst.w	r0, #27
 8001b3a:	d1e6      	bne.n	8001b0a <MFRC522_ToCard+0x8a>
			status = MI_OK;
 8001b3c:	f004 0401 	and.w	r4, r4, #1
			if (command == PCD_TRANSCEIVE) {
 8001b40:	2f0c      	cmp	r7, #12
			status = MI_OK;
 8001b42:	ea0a 0a04 	and.w	sl, sl, r4
			if (command == PCD_TRANSCEIVE) {
 8001b46:	d1e2      	bne.n	8001b0e <MFRC522_ToCard+0x8e>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f7ff ff27 	bl	800199c <MFRC522_ReadRegister>
 8001b4e:	4604      	mov	r4, r0
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001b50:	4638      	mov	r0, r7
 8001b52:	f7ff ff23 	bl	800199c <MFRC522_ReadRegister>
				if (lastBits) {
 8001b56:	f010 0007 	ands.w	r0, r0, #7
					*backLen = (n - 1) * 8 + lastBits;
 8001b5a:	bf1b      	ittet	ne
 8001b5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001b60:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
					*backLen = n * 8;
 8001b64:	00e3      	lsleq	r3, r4, #3
					*backLen = (n - 1) * 8 + lastBits;
 8001b66:	f8a8 0000 	strhne.w	r0, [r8]
					*backLen = n * 8;
 8001b6a:	bf08      	it	eq
 8001b6c:	f8a8 3000 	strheq.w	r3, [r8]
				if (n == 0) {
 8001b70:	b17c      	cbz	r4, 8001b92 <MFRC522_ToCard+0x112>
 8001b72:	2c10      	cmp	r4, #16
 8001b74:	bf28      	it	cs
 8001b76:	2410      	movcs	r4, #16
 8001b78:	b2e4      	uxtb	r4, r4
				for (i = 0; i < n; i++) {
 8001b7a:	4637      	mov	r7, r6
 8001b7c:	b2a4      	uxth	r4, r4
 8001b7e:	1bbb      	subs	r3, r7, r6
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	429c      	cmp	r4, r3
 8001b84:	d9c3      	bls.n	8001b0e <MFRC522_ToCard+0x8e>
					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8001b86:	2009      	movs	r0, #9
 8001b88:	f7ff ff08 	bl	800199c <MFRC522_ReadRegister>
 8001b8c:	f807 0b01 	strb.w	r0, [r7], #1
 8001b90:	e7f5      	b.n	8001b7e <MFRC522_ToCard+0xfe>
					n = 1;
 8001b92:	2401      	movs	r4, #1
 8001b94:	e7f1      	b.n	8001b7a <MFRC522_ToCard+0xfa>

08001b96 <MFRC522_Request>:
MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001b96:	b530      	push	{r4, r5, lr}
 8001b98:	460c      	mov	r4, r1
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	4605      	mov	r5, r0
	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	200d      	movs	r0, #13
 8001ba2:	f7ff fedf 	bl	8001964 <MFRC522_WriteRegister>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001ba6:	f10d 030e 	add.w	r3, sp, #14
 8001baa:	9300      	str	r3, [sp, #0]
	TagType[0] = reqMode;
 8001bac:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001bae:	4623      	mov	r3, r4
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	200c      	movs	r0, #12
 8001bb6:	f7ff ff63 	bl	8001a80 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)) {
 8001bba:	b930      	cbnz	r0, 8001bca <MFRC522_Request+0x34>
 8001bbc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001bc0:	2b10      	cmp	r3, #16
		status = MI_ERR;
 8001bc2:	bf18      	it	ne
 8001bc4:	2002      	movne	r0, #2
}
 8001bc6:	b005      	add	sp, #20
 8001bc8:	bd30      	pop	{r4, r5, pc}
		status = MI_ERR;
 8001bca:	2002      	movs	r0, #2
 8001bcc:	e7fb      	b.n	8001bc6 <MFRC522_Request+0x30>

08001bce <MFRC522_Anticoll>:

MFRC522_Status_t MFRC522_Anticoll(uint8_t* serNum) {
 8001bce:	b530      	push	{r4, r5, lr}
	MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001bd0:	2100      	movs	r1, #0
MFRC522_Status_t MFRC522_Anticoll(uint8_t* serNum) {
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	b085      	sub	sp, #20
	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001bd6:	200d      	movs	r0, #13
 8001bd8:	f7ff fec4 	bl	8001964 <MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001bdc:	2393      	movs	r3, #147	; 0x93
 8001bde:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 8001be0:	2320      	movs	r3, #32
 8001be2:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001be4:	f10d 030e 	add.w	r3, sp, #14
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2202      	movs	r2, #2
 8001bec:	4623      	mov	r3, r4
 8001bee:	4621      	mov	r1, r4
 8001bf0:	200c      	movs	r0, #12
 8001bf2:	f7ff ff45 	bl	8001a80 <MFRC522_ToCard>

	if (status == MI_OK) {
 8001bf6:	b960      	cbnz	r0, 8001c12 <MFRC522_Anticoll+0x44>
 8001bf8:	1e62      	subs	r2, r4, #1
 8001bfa:	1ce1      	adds	r1, r4, #3
 8001bfc:	4603      	mov	r3, r0
		//Check card serial number
		for (i = 0; i < 4; i++) {
			serNumCheck ^= serNum[i];
 8001bfe:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		for (i = 0; i < 4; i++) {
 8001c02:	428a      	cmp	r2, r1
			serNumCheck ^= serNum[i];
 8001c04:	ea83 0305 	eor.w	r3, r3, r5
		for (i = 0; i < 4; i++) {
 8001c08:	d1f9      	bne.n	8001bfe <MFRC522_Anticoll+0x30>
		}
		if (serNumCheck != serNum[i]) {
 8001c0a:	7922      	ldrb	r2, [r4, #4]
			status = MI_ERR;
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	bf18      	it	ne
 8001c10:	2002      	movne	r0, #2
		}
	}
	return status;
}
 8001c12:	b005      	add	sp, #20
 8001c14:	bd30      	pop	{r4, r5, pc}

08001c16 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460e      	mov	r6, r1
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8001c1c:	2005      	movs	r0, #5
 8001c1e:	2104      	movs	r1, #4
void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001c20:	4617      	mov	r7, r2
	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8001c22:	f7ff feec 	bl	80019fe <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	200a      	movs	r0, #10
 8001c2a:	f7ff fedb 	bl	80019e4 <MFRC522_SetBitMask>
 8001c2e:	3e01      	subs	r6, #1
 8001c30:	1e65      	subs	r5, r4, #1
 8001c32:	4434      	add	r4, r6
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8001c34:	42a5      	cmp	r5, r4
 8001c36:	d116      	bne.n	8001c66 <MFRC522_CalculateCRC+0x50>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
	}
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001c38:	2103      	movs	r1, #3
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff fe92 	bl	8001964 <MFRC522_WriteRegister>
 8001c40:	24ff      	movs	r4, #255	; 0xff

	//Wait CRC calculation is complete
	i = 0xFF;
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001c42:	2005      	movs	r0, #5
 8001c44:	3c01      	subs	r4, #1
 8001c46:	f7ff fea9 	bl	800199c <MFRC522_ReadRegister>
		i--;
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001c4a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001c4e:	d001      	beq.n	8001c54 <MFRC522_CalculateCRC+0x3e>
 8001c50:	0743      	lsls	r3, r0, #29
 8001c52:	d5f6      	bpl.n	8001c42 <MFRC522_CalculateCRC+0x2c>

	//Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001c54:	2022      	movs	r0, #34	; 0x22
 8001c56:	f7ff fea1 	bl	800199c <MFRC522_ReadRegister>
 8001c5a:	7038      	strb	r0, [r7, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001c5c:	2021      	movs	r0, #33	; 0x21
 8001c5e:	f7ff fe9d 	bl	800199c <MFRC522_ReadRegister>
 8001c62:	7078      	strb	r0, [r7, #1]
 8001c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001c66:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001c6a:	2009      	movs	r0, #9
 8001c6c:	f7ff fe7a 	bl	8001964 <MFRC522_WriteRegister>
 8001c70:	e7e0      	b.n	8001c34 <MFRC522_CalculateCRC+0x1e>

08001c72 <MFRC522_Halt>:
	}

	return status;
}

void MFRC522_Halt(void) {
 8001c72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001c74:	2350      	movs	r3, #80	; 0x50
 8001c76:	f88d 300c 	strb.w	r3, [sp, #12]
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001c7a:	f10d 020e 	add.w	r2, sp, #14
	buff[1] = 0;
 8001c7e:	2300      	movs	r3, #0
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001c80:	a803      	add	r0, sp, #12
 8001c82:	2102      	movs	r1, #2
	buff[1] = 0;
 8001c84:	f88d 300d 	strb.w	r3, [sp, #13]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001c88:	f7ff ffc5 	bl	8001c16 <MFRC522_CalculateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001c8c:	f10d 030a 	add.w	r3, sp, #10
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	ab03      	add	r3, sp, #12
 8001c94:	2204      	movs	r2, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	200c      	movs	r0, #12
 8001c9a:	f7ff fef1 	bl	8001a80 <MFRC522_ToCard>
}
 8001c9e:	b005      	add	sp, #20
 8001ca0:	f85d fb04 	ldr.w	pc, [sp], #4

08001ca4 <MFRC522_Check>:
MFRC522_Status_t MFRC522_Check(uint8_t* id) {
 8001ca4:	b538      	push	{r3, r4, r5, lr}
	status = MFRC522_Request(PICC_REQIDL, id);
 8001ca6:	4601      	mov	r1, r0
MFRC522_Status_t MFRC522_Check(uint8_t* id) {
 8001ca8:	4605      	mov	r5, r0
	status = MFRC522_Request(PICC_REQIDL, id);
 8001caa:	2026      	movs	r0, #38	; 0x26
 8001cac:	f7ff ff73 	bl	8001b96 <MFRC522_Request>
	if (status == MI_OK) {
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	b918      	cbnz	r0, 8001cbc <MFRC522_Check+0x18>
		status = MFRC522_Anticoll(id);
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f7ff ff8a 	bl	8001bce <MFRC522_Anticoll>
 8001cba:	4604      	mov	r4, r0
	MFRC522_Halt();			//Command card into hibernation
 8001cbc:	f7ff ffd9 	bl	8001c72 <MFRC522_Halt>
}
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_MspInit+0x3c>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	9100      	str	r1, [sp, #0]
 8001ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cda:	9200      	str	r2, [sp, #0]
 8001cdc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	9101      	str	r1, [sp, #4]
 8001ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cf0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cf4:	f7fe fc40 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf8:	b003      	add	sp, #12
 8001cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4604      	mov	r4, r0
 8001d08:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	2214      	movs	r2, #20
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	a803      	add	r0, sp, #12
 8001d10:	f000 f8d0 	bl	8001eb4 <memset>
  if(hspi->Instance==SPI1)
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_SPI_MspInit+0x64>)
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d122      	bne.n	8001d62 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001d20:	2100      	movs	r1, #0
 8001d22:	9101      	str	r1, [sp, #4]
 8001d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	4811      	ldr	r0, [pc, #68]	; (8001d6c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d34:	9201      	str	r2, [sp, #4]
 8001d36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	9102      	str	r1, [sp, #8]
 8001d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d4c:	23e0      	movs	r3, #224	; 0xe0
 8001d4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f7fe fc73 	bl	8000648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d62:	b008      	add	sp, #32
 8001d64:	bd10      	pop	{r4, pc}
 8001d66:	bf00      	nop
 8001d68:	40013000 	.word	0x40013000
 8001d6c:	40020000 	.word	0x40020000

08001d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d70:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_TIM_Base_MspInit+0x38>)
 8001d74:	6802      	ldr	r2, [r0, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d113      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001d80:	9201      	str	r2, [sp, #4]
 8001d82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d84:	f041 0102 	orr.w	r1, r1, #2
 8001d88:	6419      	str	r1, [r3, #64]	; 0x40
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d92:	201d      	movs	r0, #29
 8001d94:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d96:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d98:	f7fe fc00 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d9c:	201d      	movs	r0, #29
 8001d9e:	f7fe fc31 	bl	8000604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001da2:	b003      	add	sp, #12
 8001da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da8:	40000400 	.word	0x40000400

08001dac <NMI_Handler>:
 8001dac:	4770      	bx	lr

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler>

08001db6 <SVC_Handler>:
 8001db6:	4770      	bx	lr

08001db8 <DebugMon_Handler>:
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f7fe bbca 	b.w	8000554 <HAL_IncTick>

08001dc0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <TIM3_IRQHandler+0x8>)
 8001dc2:	f7ff ba67 	b.w	8001294 <HAL_TIM_IRQHandler>
 8001dc6:	bf00      	nop
 8001dc8:	20000044 	.word	0x20000044

08001dcc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	490f      	ldr	r1, [pc, #60]	; (8001e0c <SystemInit+0x40>)
 8001dce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001dd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <SystemInit+0x44>)
 8001ddc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dde:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001de6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001dee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001df2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <SystemInit+0x48>)
 8001df6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e00:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e06:	608b      	str	r3, [r1, #8]
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	24003010 	.word	0x24003010

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e1e:	e003      	b.n	8001e28 <LoopCopyDataInit>

08001e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e26:	3104      	adds	r1, #4

08001e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e30:	d3f6      	bcc.n	8001e20 <CopyDataInit>
  ldr  r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e34:	e002      	b.n	8001e3c <LoopFillZerobss>

08001e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e38:	f842 3b04 	str.w	r3, [r2], #4

08001e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e40:	d3f9      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e42:	f7ff ffc3 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f000 f811 	bl	8001e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff fc11 	bl	8001670 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e54:	08001efc 	.word	0x08001efc
  ldr  r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e5c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001e60:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001e64:	200000f0 	.word	0x200000f0

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <__libc_init_array>:
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	4e0d      	ldr	r6, [pc, #52]	; (8001ea4 <__libc_init_array+0x38>)
 8001e70:	4c0d      	ldr	r4, [pc, #52]	; (8001ea8 <__libc_init_array+0x3c>)
 8001e72:	1ba4      	subs	r4, r4, r6
 8001e74:	10a4      	asrs	r4, r4, #2
 8001e76:	2500      	movs	r5, #0
 8001e78:	42a5      	cmp	r5, r4
 8001e7a:	d109      	bne.n	8001e90 <__libc_init_array+0x24>
 8001e7c:	4e0b      	ldr	r6, [pc, #44]	; (8001eac <__libc_init_array+0x40>)
 8001e7e:	4c0c      	ldr	r4, [pc, #48]	; (8001eb0 <__libc_init_array+0x44>)
 8001e80:	f000 f820 	bl	8001ec4 <_init>
 8001e84:	1ba4      	subs	r4, r4, r6
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	2500      	movs	r5, #0
 8001e8a:	42a5      	cmp	r5, r4
 8001e8c:	d105      	bne.n	8001e9a <__libc_init_array+0x2e>
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e94:	4798      	blx	r3
 8001e96:	3501      	adds	r5, #1
 8001e98:	e7ee      	b.n	8001e78 <__libc_init_array+0xc>
 8001e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e9e:	4798      	blx	r3
 8001ea0:	3501      	adds	r5, #1
 8001ea2:	e7f2      	b.n	8001e8a <__libc_init_array+0x1e>
 8001ea4:	08001ef4 	.word	0x08001ef4
 8001ea8:	08001ef4 	.word	0x08001ef4
 8001eac:	08001ef4 	.word	0x08001ef4
 8001eb0:	08001ef8 	.word	0x08001ef8

08001eb4 <memset>:
 8001eb4:	4402      	add	r2, r0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d100      	bne.n	8001ebe <memset+0xa>
 8001ebc:	4770      	bx	lr
 8001ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8001ec2:	e7f9      	b.n	8001eb8 <memset+0x4>

08001ec4 <_init>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	bf00      	nop
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr

08001ed0 <_fini>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr
