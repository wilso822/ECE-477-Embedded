
Fall Back Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08003edc  08003edc  00013edc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ac  20000000  080041b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201ac  2**0
                  CONTENTS
  8 .bss          0000018c  200001ac  200001ac  000201ac  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000338  20000338  000201ac  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d2f  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002df9  00000000  00000000  00038f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009947  00000000  00000000  0003bd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  00045650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  00046208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006635  00000000  00000000  00047148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000044d9  00000000  00000000  0004d77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00051c56  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000026e8  00000000  00000000  00051cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ac 	.word	0x200001ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ec4 	.word	0x08003ec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b0 	.word	0x200001b0
 80001cc:	08003ec4 	.word	0x08003ec4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f8a8 	bl	80006ec <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000144 	.word	0x20000144
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f002 fed4 	bl	800339c <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200001e0 	.word	0x200001e0
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200001e0 	.word	0x200001e0

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfaf      	iteee	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
 80006b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	bfa5      	ittet	ge
 80006bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006d4:	0942      	lsrs	r2, r0, #5
 80006d6:	2301      	movs	r3, #1
 80006d8:	f000 001f 	and.w	r0, r0, #31
 80006dc:	fa03 f000 	lsl.w	r0, r3, r0
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <HAL_NVIC_EnableIRQ+0x14>)
 80006e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100

080006ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	3801      	subs	r0, #1
 80006ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f2:	d20a      	bcs.n	800070a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	21f0      	movs	r1, #240	; 0xf0
 80006fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e010 	.word	0xe000e010
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000718:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800071c:	2b02      	cmp	r3, #2
 800071e:	d003      	beq.n	8000728 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000724:	2001      	movs	r0, #1
 8000726:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000728:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800072a:	2305      	movs	r3, #5
 800072c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000730:	6813      	ldr	r3, [r2, #0]
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000738:	2000      	movs	r0, #0
}
 800073a:	4770      	bx	lr

0800073c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000740:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008f4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000748:	4a68      	ldr	r2, [pc, #416]	; (80008ec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008f8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000750:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000752:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000758:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000760:	45b6      	cmp	lr, r6
 8000762:	f040 80ae 	bne.w	80008c2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000766:	684c      	ldr	r4, [r1, #4]
 8000768:	f024 0710 	bic.w	r7, r4, #16
 800076c:	2f02      	cmp	r7, #2
 800076e:	d116      	bne.n	800079e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000770:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000774:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000778:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800077c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000780:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000784:	f04f 0c0f 	mov.w	ip, #15
 8000788:	fa0c fc0b 	lsl.w	ip, ip, fp
 800078c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000790:	690d      	ldr	r5, [r1, #16]
 8000792:	fa05 f50b 	lsl.w	r5, r5, fp
 8000796:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800079a:	f8ca 5020 	str.w	r5, [sl, #32]
 800079e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007a4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a8:	fa05 f50a 	lsl.w	r5, r5, sl
 80007ac:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ba:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007bc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007c2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	d811      	bhi.n	80007ec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ce:	68cf      	ldr	r7, [r1, #12]
 80007d0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007d4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007dc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007e4:	409f      	lsls	r7, r3
 80007e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007f0:	688f      	ldr	r7, [r1, #8]
 80007f2:	fa07 f70a 	lsl.w	r7, r7, sl
 80007f6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fa:	00e5      	lsls	r5, r4, #3
 80007fc:	d561      	bpl.n	80008c2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	f04f 0b00 	mov.w	fp, #0
 8000802:	f8cd b00c 	str.w	fp, [sp, #12]
 8000806:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080a:	4d39      	ldr	r5, [pc, #228]	; (80008f0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000810:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000814:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000818:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800081c:	9703      	str	r7, [sp, #12]
 800081e:	9f03      	ldr	r7, [sp, #12]
 8000820:	f023 0703 	bic.w	r7, r3, #3
 8000824:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000828:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000830:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000834:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000838:	f04f 0e0f 	mov.w	lr, #15
 800083c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000840:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000842:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000846:	d043      	beq.n	80008d0 <HAL_GPIO_Init+0x194>
 8000848:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084c:	42a8      	cmp	r0, r5
 800084e:	d041      	beq.n	80008d4 <HAL_GPIO_Init+0x198>
 8000850:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000854:	42a8      	cmp	r0, r5
 8000856:	d03f      	beq.n	80008d8 <HAL_GPIO_Init+0x19c>
 8000858:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085c:	42a8      	cmp	r0, r5
 800085e:	d03d      	beq.n	80008dc <HAL_GPIO_Init+0x1a0>
 8000860:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000864:	42a8      	cmp	r0, r5
 8000866:	d03b      	beq.n	80008e0 <HAL_GPIO_Init+0x1a4>
 8000868:	4548      	cmp	r0, r9
 800086a:	d03b      	beq.n	80008e4 <HAL_GPIO_Init+0x1a8>
 800086c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000870:	42a8      	cmp	r0, r5
 8000872:	d039      	beq.n	80008e8 <HAL_GPIO_Init+0x1ac>
 8000874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000878:	42a8      	cmp	r0, r5
 800087a:	bf14      	ite	ne
 800087c:	2508      	movne	r5, #8
 800087e:	2507      	moveq	r5, #7
 8000880:	fa05 f50c 	lsl.w	r5, r5, ip
 8000884:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000888:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800088a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800088c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800088e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000892:	bf0c      	ite	eq
 8000894:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000896:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000898:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800089a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf0c      	ite	eq
 80008a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008a6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008aa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008ae:	bf0c      	ite	eq
 80008b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008b4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008b6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008b8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008ba:	bf54      	ite	pl
 80008bc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008be:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008c0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c2:	3301      	adds	r3, #1
 80008c4:	2b10      	cmp	r3, #16
 80008c6:	f47f af44 	bne.w	8000752 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008ca:	b005      	add	sp, #20
 80008cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d0:	465d      	mov	r5, fp
 80008d2:	e7d5      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008d4:	2501      	movs	r5, #1
 80008d6:	e7d3      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008d8:	2502      	movs	r5, #2
 80008da:	e7d1      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008dc:	2503      	movs	r5, #3
 80008de:	e7cf      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008e0:	2504      	movs	r5, #4
 80008e2:	e7cd      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008e4:	2505      	movs	r5, #5
 80008e6:	e7cb      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008e8:	2506      	movs	r5, #6
 80008ea:	e7c9      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008ec:	40013c00 	.word	0x40013c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40021400 	.word	0x40021400

080008fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008fc:	6903      	ldr	r3, [r0, #16]
 80008fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000900:	bf14      	ite	ne
 8000902:	2001      	movne	r0, #1
 8000904:	2000      	moveq	r0, #0
 8000906:	4770      	bx	lr

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
 800090e:	0409      	lsls	r1, r1, #16
 8000910:	e7fb      	b.n	800090a <HAL_GPIO_WritePin+0x2>
	...

08000914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000918:	4604      	mov	r4, r0
 800091a:	b918      	cbnz	r0, 8000924 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800091e:	b002      	add	sp, #8
 8000920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000924:	6803      	ldr	r3, [r0, #0]
 8000926:	07dd      	lsls	r5, r3, #31
 8000928:	d410      	bmi.n	800094c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	0798      	lsls	r0, r3, #30
 800092e:	d458      	bmi.n	80009e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	071a      	lsls	r2, r3, #28
 8000934:	f100 809a 	bmi.w	8000a6c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	075b      	lsls	r3, r3, #29
 800093c:	f100 80b8 	bmi.w	8000ab0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000940:	69a2      	ldr	r2, [r4, #24]
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8119 	bne.w	8000b7a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000948:	2000      	movs	r0, #0
 800094a:	e7e8      	b.n	800091e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800094c:	4ba6      	ldr	r3, [pc, #664]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	f002 020c 	and.w	r2, r2, #12
 8000954:	2a04      	cmp	r2, #4
 8000956:	d007      	beq.n	8000968 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800095e:	2a08      	cmp	r2, #8
 8000960:	d10a      	bne.n	8000978 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	0259      	lsls	r1, r3, #9
 8000966:	d507      	bpl.n	8000978 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000968:	4b9f      	ldr	r3, [pc, #636]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	039a      	lsls	r2, r3, #14
 800096e:	d5dc      	bpl.n	800092a <HAL_RCC_OscConfig+0x16>
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1d9      	bne.n	800092a <HAL_RCC_OscConfig+0x16>
 8000976:	e7d1      	b.n	800091c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000978:	6863      	ldr	r3, [r4, #4]
 800097a:	4d9b      	ldr	r5, [pc, #620]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 800097c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000980:	d111      	bne.n	80009a6 <HAL_RCC_OscConfig+0x92>
 8000982:	682b      	ldr	r3, [r5, #0]
 8000984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000988:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800098a:	f7ff fe43 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098e:	4d96      	ldr	r5, [pc, #600]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	039b      	lsls	r3, r3, #14
 8000996:	d4c8      	bmi.n	800092a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000998:	f7ff fe3c 	bl	8000614 <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	2864      	cmp	r0, #100	; 0x64
 80009a0:	d9f7      	bls.n	8000992 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80009a2:	2003      	movs	r0, #3
 80009a4:	e7bb      	b.n	800091e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009aa:	d104      	bne.n	80009b6 <HAL_RCC_OscConfig+0xa2>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b2:	602b      	str	r3, [r5, #0]
 80009b4:	e7e5      	b.n	8000982 <HAL_RCC_OscConfig+0x6e>
 80009b6:	682a      	ldr	r2, [r5, #0]
 80009b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009bc:	602a      	str	r2, [r5, #0]
 80009be:	682a      	ldr	r2, [r5, #0]
 80009c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1df      	bne.n	800098a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009ca:	f7ff fe23 	bl	8000614 <HAL_GetTick>
 80009ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	039f      	lsls	r7, r3, #14
 80009d4:	d5a9      	bpl.n	800092a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d6:	f7ff fe1d 	bl	8000614 <HAL_GetTick>
 80009da:	1b80      	subs	r0, r0, r6
 80009dc:	2864      	cmp	r0, #100	; 0x64
 80009de:	d9f7      	bls.n	80009d0 <HAL_RCC_OscConfig+0xbc>
 80009e0:	e7df      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009e2:	4b81      	ldr	r3, [pc, #516]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	f012 0f0c 	tst.w	r2, #12
 80009ea:	d007      	beq.n	80009fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009f2:	2a08      	cmp	r2, #8
 80009f4:	d111      	bne.n	8000a1a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	025e      	lsls	r6, r3, #9
 80009fa:	d40e      	bmi.n	8000a1a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fc:	4b7a      	ldr	r3, [pc, #488]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	0795      	lsls	r5, r2, #30
 8000a02:	d502      	bpl.n	8000a0a <HAL_RCC_OscConfig+0xf6>
 8000a04:	68e2      	ldr	r2, [r4, #12]
 8000a06:	2a01      	cmp	r2, #1
 8000a08:	d188      	bne.n	800091c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6921      	ldr	r1, [r4, #16]
 8000a0e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a12:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a18:	e78a      	b.n	8000930 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a1a:	68e2      	ldr	r2, [r4, #12]
 8000a1c:	4b73      	ldr	r3, [pc, #460]	; (8000bec <HAL_RCC_OscConfig+0x2d8>)
 8000a1e:	b1b2      	cbz	r2, 8000a4e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a24:	f7ff fdf6 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a28:	4d6f      	ldr	r5, [pc, #444]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	0798      	lsls	r0, r3, #30
 8000a30:	d507      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	6922      	ldr	r2, [r4, #16]
 8000a36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a3e:	602b      	str	r3, [r5, #0]
 8000a40:	e776      	b.n	8000930 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a42:	f7ff fde7 	bl	8000614 <HAL_GetTick>
 8000a46:	1b80      	subs	r0, r0, r6
 8000a48:	2802      	cmp	r0, #2
 8000a4a:	d9ef      	bls.n	8000a2c <HAL_RCC_OscConfig+0x118>
 8000a4c:	e7a9      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a50:	f7ff fde0 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a54:	4d64      	ldr	r5, [pc, #400]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	0799      	lsls	r1, r3, #30
 8000a5c:	f57f af68 	bpl.w	8000930 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a60:	f7ff fdd8 	bl	8000614 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x144>
 8000a6a:	e79a      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a6c:	6962      	ldr	r2, [r4, #20]
 8000a6e:	4b60      	ldr	r3, [pc, #384]	; (8000bf0 <HAL_RCC_OscConfig+0x2dc>)
 8000a70:	b17a      	cbz	r2, 8000a92 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fdcd 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7a:	4d5b      	ldr	r5, [pc, #364]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a80:	079f      	lsls	r7, r3, #30
 8000a82:	f53f af59 	bmi.w	8000938 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a86:	f7ff fdc5 	bl	8000614 <HAL_GetTick>
 8000a8a:	1b80      	subs	r0, r0, r6
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x16a>
 8000a90:	e787      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a94:	f7ff fdbe 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	4d53      	ldr	r5, [pc, #332]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	f57f af4a 	bpl.w	8000938 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fdb6 	bl	8000614 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x188>
 8000aae:	e778      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab0:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ab8:	d128      	bne.n	8000b0c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	9201      	str	r2, [sp, #4]
 8000abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ace:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad0:	4d48      	ldr	r5, [pc, #288]	; (8000bf4 <HAL_RCC_OscConfig+0x2e0>)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	05d9      	lsls	r1, r3, #23
 8000ad6:	d51b      	bpl.n	8000b10 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad8:	68a3      	ldr	r3, [r4, #8]
 8000ada:	4d43      	ldr	r5, [pc, #268]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d127      	bne.n	8000b30 <HAL_RCC_OscConfig+0x21c>
 8000ae0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fd94 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	4d3e      	ldr	r5, [pc, #248]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	079b      	lsls	r3, r3, #30
 8000af8:	d539      	bpl.n	8000b6e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	f43f af20 	beq.w	8000940 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b00:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000b02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	e719      	b.n	8000940 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	e7df      	b.n	8000ad0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b18:	f7ff fd7c 	bl	8000614 <HAL_GetTick>
 8000b1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	05da      	lsls	r2, r3, #23
 8000b22:	d4d9      	bmi.n	8000ad8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b24:	f7ff fd76 	bl	8000614 <HAL_GetTick>
 8000b28:	1bc0      	subs	r0, r0, r7
 8000b2a:	2802      	cmp	r0, #2
 8000b2c:	d9f7      	bls.n	8000b1e <HAL_RCC_OscConfig+0x20a>
 8000b2e:	e738      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	2b05      	cmp	r3, #5
 8000b32:	d104      	bne.n	8000b3e <HAL_RCC_OscConfig+0x22a>
 8000b34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	672b      	str	r3, [r5, #112]	; 0x70
 8000b3c:	e7d0      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1cc>
 8000b3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	672a      	str	r2, [r5, #112]	; 0x70
 8000b46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b48:	f022 0204 	bic.w	r2, r2, #4
 8000b4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1ca      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b52:	f7ff fd5f 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b5e:	0798      	lsls	r0, r3, #30
 8000b60:	d5cb      	bpl.n	8000afa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b62:	f7ff fd57 	bl	8000614 <HAL_GetTick>
 8000b66:	1bc0      	subs	r0, r0, r7
 8000b68:	4540      	cmp	r0, r8
 8000b6a:	d9f7      	bls.n	8000b5c <HAL_RCC_OscConfig+0x248>
 8000b6c:	e719      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6e:	f7ff fd51 	bl	8000614 <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4540      	cmp	r0, r8
 8000b76:	d9bd      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1e0>
 8000b78:	e713      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b7a:	4d1b      	ldr	r5, [pc, #108]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000b7c:	68ab      	ldr	r3, [r5, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	f43f aeca 	beq.w	800091c <HAL_RCC_OscConfig+0x8>
 8000b88:	4e1b      	ldr	r6, [pc, #108]	; (8000bf8 <HAL_RCC_OscConfig+0x2e4>)
 8000b8a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b8e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b90:	d134      	bne.n	8000bfc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b92:	f7ff fd3f 	bl	8000614 <HAL_GetTick>
 8000b96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	0199      	lsls	r1, r3, #6
 8000b9c:	d41e      	bmi.n	8000bdc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b9e:	6a22      	ldr	r2, [r4, #32]
 8000ba0:	69e3      	ldr	r3, [r4, #28]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb2:	4c0d      	ldr	r4, [pc, #52]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bb4:	0852      	lsrs	r2, r2, #1
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bbc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fd27 	bl	8000614 <HAL_GetTick>
 8000bc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	019a      	lsls	r2, r3, #6
 8000bcc:	f53f aebc 	bmi.w	8000948 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd0:	f7ff fd20 	bl	8000614 <HAL_GetTick>
 8000bd4:	1b40      	subs	r0, r0, r5
 8000bd6:	2802      	cmp	r0, #2
 8000bd8:	d9f6      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x2b4>
 8000bda:	e6e2      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bdc:	f7ff fd1a 	bl	8000614 <HAL_GetTick>
 8000be0:	1bc0      	subs	r0, r0, r7
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9d8      	bls.n	8000b98 <HAL_RCC_OscConfig+0x284>
 8000be6:	e6dc      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
 8000be8:	40023800 	.word	0x40023800
 8000bec:	42470000 	.word	0x42470000
 8000bf0:	42470e80 	.word	0x42470e80
 8000bf4:	40007000 	.word	0x40007000
 8000bf8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fd0a 	bl	8000614 <HAL_GetTick>
 8000c00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	f57f ae9f 	bpl.w	8000948 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c0a:	f7ff fd03 	bl	8000614 <HAL_GetTick>
 8000c0e:	1b00      	subs	r0, r0, r4
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f6      	bls.n	8000c02 <HAL_RCC_OscConfig+0x2ee>
 8000c14:	e6c5      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
 8000c16:	bf00      	nop

08000c18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c18:	4913      	ldr	r1, [pc, #76]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c1c:	688b      	ldr	r3, [r1, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d003      	beq.n	8000c2e <HAL_RCC_GetSysClockFreq+0x16>
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d003      	beq.n	8000c32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c30:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c34:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3c:	bf14      	ite	ne
 8000c3e:	480c      	ldrne	r0, [pc, #48]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c40:	480a      	ldreq	r0, [pc, #40]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c46:	bf18      	it	ne
 8000c48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c52:	f7ff fb0d 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c5e:	3301      	adds	r3, #1
 8000c60:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c66:	bd08      	pop	{r3, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	007a1200 	.word	0x007a1200

08000c74 <HAL_RCC_ClockConfig>:
{
 8000c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b910      	cbnz	r0, 8000c84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1
 8000c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c84:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_RCC_ClockConfig+0x124>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f002 020f 	and.w	r2, r2, #15
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	d328      	bcc.n	8000ce2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c90:	6821      	ldr	r1, [r4, #0]
 8000c92:	078f      	lsls	r7, r1, #30
 8000c94:	d42d      	bmi.n	8000cf2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c96:	07c8      	lsls	r0, r1, #31
 8000c98:	d440      	bmi.n	8000d1c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <HAL_RCC_ClockConfig+0x124>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f002 020f 	and.w	r2, r2, #15
 8000ca2:	4295      	cmp	r5, r2
 8000ca4:	d366      	bcc.n	8000d74 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	0751      	lsls	r1, r2, #29
 8000caa:	d46c      	bmi.n	8000d86 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cac:	0713      	lsls	r3, r2, #28
 8000cae:	d507      	bpl.n	8000cc0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cb0:	4a3a      	ldr	r2, [pc, #232]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000cb2:	6921      	ldr	r1, [r4, #16]
 8000cb4:	6893      	ldr	r3, [r2, #8]
 8000cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc0:	f7ff ffaa 	bl	8000c18 <HAL_RCC_GetSysClockFreq>
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000cc6:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <HAL_RCC_ClockConfig+0x12c>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x130>)
 8000cd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fc52 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d1c6      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xa>
 8000cf0:	e7ce      	b.n	8000c90 <HAL_RCC_ClockConfig+0x1c>
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cf4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cf8:	bf1e      	ittt	ne
 8000cfa:	689a      	ldrne	r2, [r3, #8]
 8000cfc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d04:	bf42      	ittt	mi
 8000d06:	689a      	ldrmi	r2, [r3, #8]
 8000d08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	68a0      	ldr	r0, [r4, #8]
 8000d12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d16:	4302      	orrs	r2, r0
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	e7bc      	b.n	8000c96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d1c:	6862      	ldr	r2, [r4, #4]
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000d20:	2a01      	cmp	r2, #1
 8000d22:	d11d      	bne.n	8000d60 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2a:	d0a8      	beq.n	8000c7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2c:	4e1b      	ldr	r6, [pc, #108]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000d2e:	68b3      	ldr	r3, [r6, #8]
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d38:	f7ff fc6c 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d42:	68b3      	ldr	r3, [r6, #8]
 8000d44:	6862      	ldr	r2, [r4, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d4e:	d0a4      	beq.n	8000c9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d50:	f7ff fc60 	bl	8000614 <HAL_GetTick>
 8000d54:	1bc0      	subs	r0, r0, r7
 8000d56:	4540      	cmp	r0, r8
 8000d58:	d9f3      	bls.n	8000d42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
}
 8000d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d60:	1e91      	subs	r1, r2, #2
 8000d62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d64:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d66:	d802      	bhi.n	8000d6e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d6c:	e7dd      	b.n	8000d2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6e:	f013 0f02 	tst.w	r3, #2
 8000d72:	e7da      	b.n	8000d2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d74:	b2ea      	uxtb	r2, r5
 8000d76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	429d      	cmp	r5, r3
 8000d80:	f47f af7d 	bne.w	8000c7e <HAL_RCC_ClockConfig+0xa>
 8000d84:	e78f      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000d88:	68e0      	ldr	r0, [r4, #12]
 8000d8a:	688b      	ldr	r3, [r1, #8]
 8000d8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d90:	4303      	orrs	r3, r0
 8000d92:	608b      	str	r3, [r1, #8]
 8000d94:	e78a      	b.n	8000cac <HAL_RCC_ClockConfig+0x38>
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	08004159 	.word	0x08004159
 8000da4:	20000144 	.word	0x20000144

08000da8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000db6:	6810      	ldr	r0, [r2, #0]
}
 8000db8:	40d8      	lsrs	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	08004169 	.word	0x08004169
 8000dc4:	20000144 	.word	0x20000144

08000dc8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dd6:	6810      	ldr	r0, [r2, #0]
}
 8000dd8:	40d8      	lsrs	r0, r3
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	08004169 	.word	0x08004169
 8000de4:	20000144 	.word	0x20000144

08000de8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dec:	9e06      	ldr	r6, [sp, #24]
 8000dee:	4604      	mov	r4, r0
 8000df0:	4688      	mov	r8, r1
 8000df2:	4617      	mov	r7, r2
 8000df4:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	6893      	ldr	r3, [r2, #8]
 8000dfa:	ea38 0303 	bics.w	r3, r8, r3
 8000dfe:	bf0c      	ite	eq
 8000e00:	2301      	moveq	r3, #1
 8000e02:	2300      	movne	r3, #0
 8000e04:	429f      	cmp	r7, r3
 8000e06:	d102      	bne.n	8000e0e <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e08:	2000      	movs	r0, #0
}
 8000e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e0e:	1c6b      	adds	r3, r5, #1
 8000e10:	d0f2      	beq.n	8000df8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e12:	bb55      	cbnz	r5, 8000e6a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e1c:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e1e:	6862      	ldr	r2, [r4, #4]
 8000e20:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e24:	d10a      	bne.n	8000e3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8000e26:	68a2      	ldr	r2, [r4, #8]
 8000e28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e2c:	d002      	beq.n	8000e34 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000e2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e32:	d103      	bne.n	8000e3c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e3a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e3e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e42:	d109      	bne.n	8000e58 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e4a:	0412      	lsls	r2, r2, #16
 8000e4c:	0c12      	lsrs	r2, r2, #16
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e56:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e64:	2003      	movs	r0, #3
 8000e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e6a:	f7ff fbd3 	bl	8000614 <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	4285      	cmp	r5, r0
 8000e72:	d8c0      	bhi.n	8000df6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000e74:	e7ce      	b.n	8000e14 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000e76 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e76:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e78:	460b      	mov	r3, r1
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	2200      	movs	r2, #0
{
 8000e80:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e82:	f7ff ffb1 	bl	8000de8 <SPI_WaitFlagStateUntilTimeout>
 8000e86:	b120      	cbz	r0, 8000e92 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000e90:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e92:	b002      	add	sp, #8
 8000e94:	bd10      	pop	{r4, pc}

08000e96 <HAL_SPI_Init>:
{
 8000e96:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000e98:	4604      	mov	r4, r0
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d036      	beq.n	8000f0c <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000ea2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eaa:	b91b      	cbnz	r3, 8000eb4 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000eac:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000eb0:	f002 fa94 	bl	80033dc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000eb4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000eb6:	68a0      	ldr	r0, [r4, #8]
 8000eb8:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ec0:	680b      	ldr	r3, [r1, #0]
 8000ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	4303      	orrs	r3, r0
 8000ecc:	68e0      	ldr	r0, [r4, #12]
 8000ece:	4303      	orrs	r3, r0
 8000ed0:	6920      	ldr	r0, [r4, #16]
 8000ed2:	4303      	orrs	r3, r0
 8000ed4:	6960      	ldr	r0, [r4, #20]
 8000ed6:	4303      	orrs	r3, r0
 8000ed8:	69e0      	ldr	r0, [r4, #28]
 8000eda:	4303      	orrs	r3, r0
 8000edc:	6a20      	ldr	r0, [r4, #32]
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000ee8:	4303      	orrs	r3, r0
 8000eea:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000eec:	0c12      	lsrs	r2, r2, #16
 8000eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ef0:	f002 0204 	and.w	r2, r2, #4
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ef8:	69cb      	ldr	r3, [r1, #28]
 8000efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000efe:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f00:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f02:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f04:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f0c:	2001      	movs	r0, #1
}
 8000f0e:	bd10      	pop	{r4, pc}

08000f10 <HAL_SPI_Transmit>:
{
 8000f10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f14:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f16:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000f1a:	2b01      	cmp	r3, #1
{
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	460d      	mov	r5, r1
 8000f20:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000f22:	f000 809c 	beq.w	800105e <HAL_SPI_Transmit+0x14e>
 8000f26:	2301      	movs	r3, #1
 8000f28:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f2c:	f7ff fb72 	bl	8000614 <HAL_GetTick>
 8000f30:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000f32:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000f36:	b2c0      	uxtb	r0, r0
 8000f38:	2801      	cmp	r0, #1
 8000f3a:	f040 808e 	bne.w	800105a <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d04e      	beq.n	8000fe0 <HAL_SPI_Transmit+0xd0>
 8000f42:	f1b8 0f00 	cmp.w	r8, #0
 8000f46:	d04b      	beq.n	8000fe0 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000f52:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000f54:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000f58:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000f5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000f5c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000f5e:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f60:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000f62:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f68:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000f6a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000f6e:	bf02      	ittt	eq
 8000f70:	681a      	ldreq	r2, [r3, #0]
 8000f72:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000f76:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f7c:	bf5e      	ittt	pl
 8000f7e:	681a      	ldrpl	r2, [r3, #0]
 8000f80:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f84:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f86:	68e2      	ldr	r2, [r4, #12]
 8000f88:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f8c:	6862      	ldr	r2, [r4, #4]
 8000f8e:	d138      	bne.n	8001002 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000f90:	b11a      	cbz	r2, 8000f9a <HAL_SPI_Transmit+0x8a>
 8000f92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f94:	b292      	uxth	r2, r2
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	d106      	bne.n	8000fa8 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f9a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f9e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000fa0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000fa8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b993      	cbnz	r3, 8000fd4 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000fae:	9700      	str	r7, [sp, #0]
 8000fb0:	4633      	mov	r3, r6
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff ff16 	bl	8000de8 <SPI_WaitFlagStateUntilTimeout>
 8000fbc:	b978      	cbnz	r0, 8000fde <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000fbe:	463a      	mov	r2, r7
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff57 	bl	8000e76 <SPI_CheckFlag_BSY>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d038      	beq.n	800103e <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000fcc:	2320      	movs	r3, #32
 8000fce:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
    goto error;
 8000fd2:	e005      	b.n	8000fe0 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	0790      	lsls	r0, r2, #30
 8000fda:	d4de      	bmi.n	8000f9a <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000fdc:	b94e      	cbnz	r6, 8000ff2 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000fec:	b004      	add	sp, #16
 8000fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000ff2:	1c71      	adds	r1, r6, #1
 8000ff4:	d0d8      	beq.n	8000fa8 <HAL_SPI_Transmit+0x98>
 8000ff6:	f7ff fb0d 	bl	8000614 <HAL_GetTick>
 8000ffa:	1bc0      	subs	r0, r0, r7
 8000ffc:	4286      	cmp	r6, r0
 8000ffe:	d8d3      	bhi.n	8000fa8 <HAL_SPI_Transmit+0x98>
 8001000:	e7ed      	b.n	8000fde <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001002:	b11a      	cbz	r2, 800100c <HAL_SPI_Transmit+0xfc>
 8001004:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001006:	b292      	uxth	r2, r2
 8001008:	2a01      	cmp	r2, #1
 800100a:	d106      	bne.n	800101a <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800100c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001010:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001014:	3b01      	subs	r3, #1
 8001016:	b29b      	uxth	r3, r3
 8001018:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800101a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800101c:	b29b      	uxth	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0c5      	beq.n	8000fae <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	0792      	lsls	r2, r2, #30
 8001028:	d4f0      	bmi.n	800100c <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800102a:	2e00      	cmp	r6, #0
 800102c:	d0d7      	beq.n	8000fde <HAL_SPI_Transmit+0xce>
 800102e:	1c73      	adds	r3, r6, #1
 8001030:	d0f3      	beq.n	800101a <HAL_SPI_Transmit+0x10a>
 8001032:	f7ff faef 	bl	8000614 <HAL_GetTick>
 8001036:	1bc0      	subs	r0, r0, r7
 8001038:	4286      	cmp	r6, r0
 800103a:	d8ee      	bhi.n	800101a <HAL_SPI_Transmit+0x10a>
 800103c:	e7cf      	b.n	8000fde <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	b933      	cbnz	r3, 8001050 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001042:	9303      	str	r3, [sp, #12]
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	9203      	str	r2, [sp, #12]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	9303      	str	r3, [sp, #12]
 800104e:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001050:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001052:	3000      	adds	r0, #0
 8001054:	bf18      	it	ne
 8001056:	2001      	movne	r0, #1
 8001058:	e7c2      	b.n	8000fe0 <HAL_SPI_Transmit+0xd0>
 800105a:	2002      	movs	r0, #2
 800105c:	e7c0      	b.n	8000fe0 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 800105e:	2002      	movs	r0, #2
 8001060:	e7c4      	b.n	8000fec <HAL_SPI_Transmit+0xdc>

08001062 <HAL_SPI_TransmitReceive>:
{
 8001062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001066:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001068:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800106c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800106e:	2b01      	cmp	r3, #1
{
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	4616      	mov	r6, r2
 8001076:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001078:	f000 80ed 	beq.w	8001256 <HAL_SPI_TransmitReceive+0x1f4>
 800107c:	2301      	movs	r3, #1
 800107e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001082:	f7ff fac7 	bl	8000614 <HAL_GetTick>
  tmp  = hspi->State;
 8001086:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 800108a:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800108c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800108e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001090:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001092:	d00a      	beq.n	80010aa <HAL_SPI_TransmitReceive+0x48>
 8001094:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001098:	f040 80db 	bne.w	8001252 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800109c:	68a2      	ldr	r2, [r4, #8]
 800109e:	2a00      	cmp	r2, #0
 80010a0:	f040 80d7 	bne.w	8001252 <HAL_SPI_TransmitReceive+0x1f0>
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	f040 80d4 	bne.w	8001252 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	d04e      	beq.n	800114c <HAL_SPI_TransmitReceive+0xea>
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d04c      	beq.n	800114c <HAL_SPI_TransmitReceive+0xea>
 80010b2:	f1b9 0f00 	cmp.w	r9, #0
 80010b6:	d049      	beq.n	800114c <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 80010b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80010bc:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 80010be:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80010c0:	bf04      	itt	eq
 80010c2:	2305      	moveq	r3, #5
 80010c4:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80010cc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80010ce:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80010d0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80010d2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80010d6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80010da:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80010dc:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80010e0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80010e2:	bf58      	it	pl
 80010e4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80010e6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80010e8:	bf58      	it	pl
 80010ea:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80010ee:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80010f2:	bf58      	it	pl
 80010f4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80010f6:	68e2      	ldr	r2, [r4, #12]
 80010f8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80010fc:	d15d      	bne.n	80011ba <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80010fe:	b119      	cbz	r1, 8001108 <HAL_SPI_TransmitReceive+0xa6>
 8001100:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001102:	b292      	uxth	r2, r2
 8001104:	2a01      	cmp	r2, #1
 8001106:	d106      	bne.n	8001116 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001108:	f835 2b02 	ldrh.w	r2, [r5], #2
 800110c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800110e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001110:	3b01      	subs	r3, #1
 8001112:	b29b      	uxth	r3, r3
 8001114:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001116:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800111a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800111c:	b29b      	uxth	r3, r3
 800111e:	b9bb      	cbnz	r3, 8001150 <HAL_SPI_TransmitReceive+0xee>
 8001120:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001122:	b29b      	uxth	r3, r3
 8001124:	b9a3      	cbnz	r3, 8001150 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001126:	f8cd 8000 	str.w	r8, [sp]
 800112a:	463b      	mov	r3, r7
 800112c:	2201      	movs	r2, #1
 800112e:	2102      	movs	r1, #2
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff fe59 	bl	8000de8 <SPI_WaitFlagStateUntilTimeout>
 8001136:	2800      	cmp	r0, #0
 8001138:	d135      	bne.n	80011a6 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800113a:	4642      	mov	r2, r8
 800113c:	4639      	mov	r1, r7
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fe99 	bl	8000e76 <SPI_CheckFlag_BSY>
 8001144:	2800      	cmp	r0, #0
 8001146:	d079      	beq.n	800123c <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001148:	2320      	movs	r3, #32
 800114a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800114c:	2001      	movs	r0, #1
 800114e:	e02b      	b.n	80011a8 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001150:	f1b9 0f00 	cmp.w	r9, #0
 8001154:	d00f      	beq.n	8001176 <HAL_SPI_TransmitReceive+0x114>
 8001156:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001158:	b29b      	uxth	r3, r3
 800115a:	b163      	cbz	r3, 8001176 <HAL_SPI_TransmitReceive+0x114>
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	0791      	lsls	r1, r2, #30
 8001162:	d508      	bpl.n	8001176 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001164:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001168:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800116a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800116c:	3b01      	subs	r3, #1
 800116e:	b29b      	uxth	r3, r3
 8001170:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001172:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001176:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001178:	b29b      	uxth	r3, r3
 800117a:	b163      	cbz	r3, 8001196 <HAL_SPI_TransmitReceive+0x134>
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	07d2      	lsls	r2, r2, #31
 8001182:	d508      	bpl.n	8001196 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800118a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800118c:	3b01      	subs	r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001192:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001196:	1c78      	adds	r0, r7, #1
 8001198:	d0bf      	beq.n	800111a <HAL_SPI_TransmitReceive+0xb8>
 800119a:	f7ff fa3b 	bl	8000614 <HAL_GetTick>
 800119e:	eba0 0008 	sub.w	r0, r0, r8
 80011a2:	4287      	cmp	r7, r0
 80011a4:	d8b9      	bhi.n	800111a <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80011a6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80011ae:	2300      	movs	r3, #0
 80011b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80011b4:	b005      	add	sp, #20
 80011b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80011ba:	b119      	cbz	r1, 80011c4 <HAL_SPI_TransmitReceive+0x162>
 80011bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80011be:	b292      	uxth	r2, r2
 80011c0:	2a01      	cmp	r2, #1
 80011c2:	d106      	bne.n	80011d2 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80011c4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80011c8:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80011ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80011d2:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b91b      	cbnz	r3, 80011e4 <HAL_SPI_TransmitReceive+0x182>
 80011dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0a0      	beq.n	8001126 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80011e4:	f1b9 0f00 	cmp.w	r9, #0
 80011e8:	d00f      	beq.n	800120a <HAL_SPI_TransmitReceive+0x1a8>
 80011ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b163      	cbz	r3, 800120a <HAL_SPI_TransmitReceive+0x1a8>
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	0791      	lsls	r1, r2, #30
 80011f6:	d508      	bpl.n	800120a <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80011f8:	782a      	ldrb	r2, [r5, #0]
 80011fa:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80011fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001204:	3501      	adds	r5, #1
        txallowed = 0U;
 8001206:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800120a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800120c:	b29b      	uxth	r3, r3
 800120e:	b163      	cbz	r3, 800122a <HAL_SPI_TransmitReceive+0x1c8>
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	07d2      	lsls	r2, r2, #31
 8001216:	d508      	bpl.n	800122a <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 800121c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001224:	3601      	adds	r6, #1
        txallowed = 1U;
 8001226:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800122a:	1c7b      	adds	r3, r7, #1
 800122c:	d0d3      	beq.n	80011d6 <HAL_SPI_TransmitReceive+0x174>
 800122e:	f7ff f9f1 	bl	8000614 <HAL_GetTick>
 8001232:	eba0 0008 	sub.w	r0, r0, r8
 8001236:	4287      	cmp	r7, r0
 8001238:	d8cd      	bhi.n	80011d6 <HAL_SPI_TransmitReceive+0x174>
 800123a:	e7b4      	b.n	80011a6 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800123c:	68a3      	ldr	r3, [r4, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1b2      	bne.n	80011a8 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	9003      	str	r0, [sp, #12]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	9203      	str	r2, [sp, #12]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	9303      	str	r3, [sp, #12]
 800124e:	9b03      	ldr	r3, [sp, #12]
 8001250:	e7aa      	b.n	80011a8 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001252:	2002      	movs	r0, #2
 8001254:	e7a8      	b.n	80011a8 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001256:	2002      	movs	r0, #2
 8001258:	e7ac      	b.n	80011b4 <HAL_SPI_TransmitReceive+0x152>

0800125a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800125a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800125e:	2b01      	cmp	r3, #1
{
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001266:	d01c      	beq.n	80012a2 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001268:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800126c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800126e:	2201      	movs	r2, #1
 8001270:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001274:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001276:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800127a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800127e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001280:	680a      	ldr	r2, [r1, #0]
 8001282:	2a40      	cmp	r2, #64	; 0x40
 8001284:	d079      	beq.n	800137a <HAL_TIM_ConfigClockSource+0x120>
 8001286:	d819      	bhi.n	80012bc <HAL_TIM_ConfigClockSource+0x62>
 8001288:	2a10      	cmp	r2, #16
 800128a:	f000 8093 	beq.w	80013b4 <HAL_TIM_ConfigClockSource+0x15a>
 800128e:	d80a      	bhi.n	80012a6 <HAL_TIM_ConfigClockSource+0x4c>
 8001290:	2a00      	cmp	r2, #0
 8001292:	f000 8089 	beq.w	80013a8 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001296:	2301      	movs	r3, #1
 8001298:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800129c:	2300      	movs	r3, #0
 800129e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80012a2:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80012a6:	2a20      	cmp	r2, #32
 80012a8:	f000 808a 	beq.w	80013c0 <HAL_TIM_ConfigClockSource+0x166>
 80012ac:	2a30      	cmp	r2, #48	; 0x30
 80012ae:	d1f2      	bne.n	8001296 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012b0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80012b6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80012ba:	e036      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80012bc:	2a70      	cmp	r2, #112	; 0x70
 80012be:	d036      	beq.n	800132e <HAL_TIM_ConfigClockSource+0xd4>
 80012c0:	d81b      	bhi.n	80012fa <HAL_TIM_ConfigClockSource+0xa0>
 80012c2:	2a50      	cmp	r2, #80	; 0x50
 80012c4:	d042      	beq.n	800134c <HAL_TIM_ConfigClockSource+0xf2>
 80012c6:	2a60      	cmp	r2, #96	; 0x60
 80012c8:	d1e5      	bne.n	8001296 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ca:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80012cc:	684d      	ldr	r5, [r1, #4]
 80012ce:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012d0:	f024 0410 	bic.w	r4, r4, #16
 80012d4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012d6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80012d8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012da:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80012e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012e6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80012ea:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80012ec:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80012ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80012f4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80012f8:	e017      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80012fa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80012fe:	d011      	beq.n	8001324 <HAL_TIM_ConfigClockSource+0xca>
 8001300:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001304:	d1c7      	bne.n	8001296 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001306:	688a      	ldr	r2, [r1, #8]
 8001308:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800130a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800130c:	68c9      	ldr	r1, [r1, #12]
 800130e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001310:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001314:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001318:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800131a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001322:	e002      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	e7b3      	b.n	8001296 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800132e:	688a      	ldr	r2, [r1, #8]
 8001330:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001332:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001334:	68c9      	ldr	r1, [r1, #12]
 8001336:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001338:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800133c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001340:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001342:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001344:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001346:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800134a:	e7ee      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800134c:	684c      	ldr	r4, [r1, #4]
 800134e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001350:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001352:	6a1d      	ldr	r5, [r3, #32]
 8001354:	f025 0501 	bic.w	r5, r5, #1
 8001358:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800135a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800135c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001360:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001364:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001368:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800136a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800136c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800136e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001370:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001374:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001378:	e7d7      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800137a:	684c      	ldr	r4, [r1, #4]
 800137c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800137e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001380:	6a1d      	ldr	r5, [r3, #32]
 8001382:	f025 0501 	bic.w	r5, r5, #1
 8001386:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001388:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800138a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800138e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001392:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001396:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800139a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800139c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800139e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80013a2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80013a6:	e7c0      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013a8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80013ae:	f042 0207 	orr.w	r2, r2, #7
 80013b2:	e7ba      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013b4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80013ba:	f042 0217 	orr.w	r2, r2, #23
 80013be:	e7b4      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80013c6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80013ca:	e7ae      	b.n	800132a <HAL_TIM_ConfigClockSource+0xd0>

080013cc <HAL_TIM_OC_DelayElapsedCallback>:
 80013cc:	4770      	bx	lr

080013ce <HAL_TIM_IC_CaptureCallback>:
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80013d0:	4770      	bx	lr

080013d2 <HAL_TIM_TriggerCallback>:
 80013d2:	4770      	bx	lr

080013d4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d4:	6803      	ldr	r3, [r0, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	0791      	lsls	r1, r2, #30
{
 80013da:	b510      	push	{r4, lr}
 80013dc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013de:	d50e      	bpl.n	80013fe <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	0792      	lsls	r2, r2, #30
 80013e4:	d50b      	bpl.n	80013fe <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013e6:	f06f 0202 	mvn.w	r2, #2
 80013ea:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013ec:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013ee:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013f0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013f2:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013f4:	d077      	beq.n	80014e6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80013f6:	f7ff ffea 	bl	80013ce <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013fa:	2300      	movs	r3, #0
 80013fc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	0750      	lsls	r0, r2, #29
 8001404:	d510      	bpl.n	8001428 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	0751      	lsls	r1, r2, #29
 800140a:	d50d      	bpl.n	8001428 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800140c:	f06f 0204 	mvn.w	r2, #4
 8001410:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001412:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001414:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001416:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800141a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800141c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800141e:	d068      	beq.n	80014f2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001420:	f7ff ffd5 	bl	80013ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001424:	2300      	movs	r3, #0
 8001426:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	0712      	lsls	r2, r2, #28
 800142e:	d50f      	bpl.n	8001450 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	0710      	lsls	r0, r2, #28
 8001434:	d50c      	bpl.n	8001450 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001436:	f06f 0208 	mvn.w	r2, #8
 800143a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800143c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800143e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001440:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001442:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001444:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001446:	d05a      	beq.n	80014fe <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001448:	f7ff ffc1 	bl	80013ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800144c:	2300      	movs	r3, #0
 800144e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	06d2      	lsls	r2, r2, #27
 8001456:	d510      	bpl.n	800147a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	06d0      	lsls	r0, r2, #27
 800145c:	d50d      	bpl.n	800147a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800145e:	f06f 0210 	mvn.w	r2, #16
 8001462:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001464:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001466:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001468:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800146c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800146e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001470:	d04b      	beq.n	800150a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001472:	f7ff ffac 	bl	80013ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001476:	2300      	movs	r3, #0
 8001478:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	07d1      	lsls	r1, r2, #31
 8001480:	d508      	bpl.n	8001494 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	07d2      	lsls	r2, r2, #31
 8001486:	d505      	bpl.n	8001494 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001488:	f06f 0201 	mvn.w	r2, #1
 800148c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800148e:	4620      	mov	r0, r4
 8001490:	f001 f986 	bl	80027a0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	0610      	lsls	r0, r2, #24
 800149a:	d508      	bpl.n	80014ae <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	0611      	lsls	r1, r2, #24
 80014a0:	d505      	bpl.n	80014ae <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f000 f8d6 	bl	800165a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	0652      	lsls	r2, r2, #25
 80014b4:	d508      	bpl.n	80014c8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	0650      	lsls	r0, r2, #25
 80014ba:	d505      	bpl.n	80014c8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff ff85 	bl	80013d2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	0691      	lsls	r1, r2, #26
 80014ce:	d522      	bpl.n	8001516 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	0692      	lsls	r2, r2, #26
 80014d4:	d51f      	bpl.n	8001516 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014d6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80014da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014dc:	611a      	str	r2, [r3, #16]
}
 80014de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80014e2:	f000 b8b9 	b.w	8001658 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e6:	f7ff ff71 	bl	80013cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff ff70 	bl	80013d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014f0:	e783      	b.n	80013fa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f2:	f7ff ff6b 	bl	80013cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff ff6a 	bl	80013d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014fc:	e792      	b.n	8001424 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fe:	f7ff ff65 	bl	80013cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ff64 	bl	80013d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001508:	e7a0      	b.n	800144c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800150a:	f7ff ff5f 	bl	80013cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff ff5e 	bl	80013d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001514:	e7af      	b.n	8001476 <HAL_TIM_IRQHandler+0xa2>
 8001516:	bd10      	pop	{r4, pc}

08001518 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001518:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800151a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800151c:	4290      	cmp	r0, r2
 800151e:	d012      	beq.n	8001546 <TIM_Base_SetConfig+0x2e>
 8001520:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001524:	d00f      	beq.n	8001546 <TIM_Base_SetConfig+0x2e>
 8001526:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800152a:	4290      	cmp	r0, r2
 800152c:	d00b      	beq.n	8001546 <TIM_Base_SetConfig+0x2e>
 800152e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001532:	4290      	cmp	r0, r2
 8001534:	d007      	beq.n	8001546 <TIM_Base_SetConfig+0x2e>
 8001536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800153a:	4290      	cmp	r0, r2
 800153c:	d003      	beq.n	8001546 <TIM_Base_SetConfig+0x2e>
 800153e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001542:	4290      	cmp	r0, r2
 8001544:	d11d      	bne.n	8001582 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001546:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800154c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <TIM_Base_SetConfig+0xbc>)
 8001550:	4290      	cmp	r0, r2
 8001552:	d104      	bne.n	800155e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001554:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800155a:	4313      	orrs	r3, r2
 800155c:	e028      	b.n	80015b0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800155e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001562:	d0f7      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <TIM_Base_SetConfig+0xc0>)
 8001566:	4290      	cmp	r0, r2
 8001568:	d0f4      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 800156a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800156e:	4290      	cmp	r0, r2
 8001570:	d0f0      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 8001572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001576:	4290      	cmp	r0, r2
 8001578:	d0ec      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 800157a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800157e:	4290      	cmp	r0, r2
 8001580:	d0e8      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <TIM_Base_SetConfig+0xc4>)
 8001584:	4290      	cmp	r0, r2
 8001586:	d0e5      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 8001588:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800158c:	4290      	cmp	r0, r2
 800158e:	d0e1      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 8001590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001594:	4290      	cmp	r0, r2
 8001596:	d0dd      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 8001598:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800159c:	4290      	cmp	r0, r2
 800159e:	d0d9      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 80015a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015a4:	4290      	cmp	r0, r2
 80015a6:	d0d5      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
 80015a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ac:	4290      	cmp	r0, r2
 80015ae:	d0d1      	beq.n	8001554 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80015b0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015b2:	688b      	ldr	r3, [r1, #8]
 80015b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015b6:	680b      	ldr	r3, [r1, #0]
 80015b8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <TIM_Base_SetConfig+0xbc>)
 80015bc:	4298      	cmp	r0, r3
 80015be:	d006      	beq.n	80015ce <TIM_Base_SetConfig+0xb6>
 80015c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d002      	beq.n	80015ce <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80015c8:	2301      	movs	r3, #1
 80015ca:	6143      	str	r3, [r0, #20]
}
 80015cc:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80015ce:	690b      	ldr	r3, [r1, #16]
 80015d0:	6303      	str	r3, [r0, #48]	; 0x30
 80015d2:	e7f9      	b.n	80015c8 <TIM_Base_SetConfig+0xb0>
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40014000 	.word	0x40014000

080015e0 <HAL_TIM_Base_Init>:
{ 
 80015e0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80015e2:	4604      	mov	r4, r0
 80015e4:	b1a0      	cbz	r0, 8001610 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80015e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015ee:	b91b      	cbnz	r3, 80015f8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80015f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80015f4:	f001 ff26 	bl	8003444 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80015fe:	6820      	ldr	r0, [r4, #0]
 8001600:	1d21      	adds	r1, r4, #4
 8001602:	f7ff ff89 	bl	8001518 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001606:	2301      	movs	r3, #1
 8001608:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
 800160e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001610:	2001      	movs	r0, #1
}
 8001612:	bd10      	pop	{r4, pc}

08001614 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001614:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001618:	2b01      	cmp	r3, #1
{
 800161a:	b510      	push	{r4, lr}
 800161c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001620:	d018      	beq.n	8001654 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001622:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001626:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001628:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800162a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800162c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800162e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001632:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4322      	orrs	r2, r4
 8001638:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001640:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001648:	2301      	movs	r3, #1
 800164a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800164e:	2300      	movs	r3, #0
 8001650:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001654:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001656:	bd10      	pop	{r4, pc}

08001658 <HAL_TIMEx_CommutationCallback>:
 8001658:	4770      	bx	lr

0800165a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800165a:	4770      	bx	lr

0800165c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001664:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800166e:	2320      	movs	r3, #32
 8001670:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001674:	4770      	bx	lr
	...

08001678 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800167c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800167e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001680:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001682:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001688:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800168a:	6133      	str	r3, [r6, #16]
{
 800168c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800168e:	6883      	ldr	r3, [r0, #8]
 8001690:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001692:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001694:	4303      	orrs	r3, r0
 8001696:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001698:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800169c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800169e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016a2:	430b      	orrs	r3, r1
 80016a4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80016a6:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80016a8:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80016aa:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80016ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80016b0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80016b6:	6173      	str	r3, [r6, #20]
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ba:	d17c      	bne.n	80017b6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016bc:	429e      	cmp	r6, r3
 80016be:	d003      	beq.n	80016c8 <UART_SetConfig+0x50>
 80016c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c4:	429e      	cmp	r6, r3
 80016c6:	d144      	bne.n	8001752 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016c8:	f7ff fb7e 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80016cc:	2519      	movs	r5, #25
 80016ce:	fb05 f300 	mul.w	r3, r5, r0
 80016d2:	6860      	ldr	r0, [r4, #4]
 80016d4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016d8:	0040      	lsls	r0, r0, #1
 80016da:	fbb3 f3f0 	udiv	r3, r3, r0
 80016de:	fbb3 f3f9 	udiv	r3, r3, r9
 80016e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016e6:	f7ff fb6f 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80016ea:	6863      	ldr	r3, [r4, #4]
 80016ec:	4368      	muls	r0, r5
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fbb0 f7f3 	udiv	r7, r0, r3
 80016f4:	f7ff fb68 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80016f8:	6863      	ldr	r3, [r4, #4]
 80016fa:	4368      	muls	r0, r5
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001702:	fbb3 f3f9 	udiv	r3, r3, r9
 8001706:	fb09 7313 	mls	r3, r9, r3, r7
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	3332      	adds	r3, #50	; 0x32
 800170e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001718:	f7ff fb56 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	4368      	muls	r0, r5
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	fbb0 faf2 	udiv	sl, r0, r2
 8001726:	f7ff fb4f 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800172a:	6863      	ldr	r3, [r4, #4]
 800172c:	4368      	muls	r0, r5
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fbb0 f3f3 	udiv	r3, r0, r3
 8001734:	fbb3 f3f9 	udiv	r3, r3, r9
 8001738:	fb09 a313 	mls	r3, r9, r3, sl
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	3332      	adds	r3, #50	; 0x32
 8001740:	fbb3 f3f9 	udiv	r3, r3, r9
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800174a:	443b      	add	r3, r7
 800174c:	60b3      	str	r3, [r6, #8]
 800174e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001752:	f7ff fb29 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001756:	2519      	movs	r5, #25
 8001758:	fb05 f300 	mul.w	r3, r5, r0
 800175c:	6860      	ldr	r0, [r4, #4]
 800175e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001762:	0040      	lsls	r0, r0, #1
 8001764:	fbb3 f3f0 	udiv	r3, r3, r0
 8001768:	fbb3 f3f9 	udiv	r3, r3, r9
 800176c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001770:	f7ff fb1a 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001774:	6863      	ldr	r3, [r4, #4]
 8001776:	4368      	muls	r0, r5
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fbb0 f7f3 	udiv	r7, r0, r3
 800177e:	f7ff fb13 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001782:	6863      	ldr	r3, [r4, #4]
 8001784:	4368      	muls	r0, r5
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fbb0 f3f3 	udiv	r3, r0, r3
 800178c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001790:	fb09 7313 	mls	r3, r9, r3, r7
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	3332      	adds	r3, #50	; 0x32
 8001798:	fbb3 f3f9 	udiv	r3, r3, r9
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80017a2:	f7ff fb01 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 80017a6:	6862      	ldr	r2, [r4, #4]
 80017a8:	4368      	muls	r0, r5
 80017aa:	0052      	lsls	r2, r2, #1
 80017ac:	fbb0 faf2 	udiv	sl, r0, r2
 80017b0:	f7ff fafa 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 80017b4:	e7b9      	b.n	800172a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80017b6:	429e      	cmp	r6, r3
 80017b8:	d002      	beq.n	80017c0 <UART_SetConfig+0x148>
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <UART_SetConfig+0x230>)
 80017bc:	429e      	cmp	r6, r3
 80017be:	d140      	bne.n	8001842 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017c0:	f7ff fb02 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80017c4:	6867      	ldr	r7, [r4, #4]
 80017c6:	2519      	movs	r5, #25
 80017c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017cc:	fb05 f300 	mul.w	r3, r5, r0
 80017d0:	00bf      	lsls	r7, r7, #2
 80017d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80017d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80017da:	011f      	lsls	r7, r3, #4
 80017dc:	f7ff faf4 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	4368      	muls	r0, r5
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	fbb0 f8f3 	udiv	r8, r0, r3
 80017ea:	f7ff faed 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	4368      	muls	r0, r5
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80017fc:	fb09 8313 	mls	r3, r9, r3, r8
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	3332      	adds	r3, #50	; 0x32
 8001804:	fbb3 f3f9 	udiv	r3, r3, r9
 8001808:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800180c:	f7ff fadc 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 8001810:	6862      	ldr	r2, [r4, #4]
 8001812:	4368      	muls	r0, r5
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	fbb0 faf2 	udiv	sl, r0, r2
 800181a:	f7ff fad5 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800181e:	6863      	ldr	r3, [r4, #4]
 8001820:	4368      	muls	r0, r5
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	fbb0 f3f3 	udiv	r3, r0, r3
 8001828:	fbb3 f3f9 	udiv	r3, r3, r9
 800182c:	fb09 a313 	mls	r3, r9, r3, sl
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	3332      	adds	r3, #50	; 0x32
 8001834:	fbb3 f3f9 	udiv	r3, r3, r9
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	ea43 0308 	orr.w	r3, r3, r8
 8001840:	e783      	b.n	800174a <UART_SetConfig+0xd2>
 8001842:	f7ff fab1 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001846:	6867      	ldr	r7, [r4, #4]
 8001848:	2519      	movs	r5, #25
 800184a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800184e:	fb05 f300 	mul.w	r3, r5, r0
 8001852:	00bf      	lsls	r7, r7, #2
 8001854:	fbb3 f3f7 	udiv	r3, r3, r7
 8001858:	fbb3 f3f9 	udiv	r3, r3, r9
 800185c:	011f      	lsls	r7, r3, #4
 800185e:	f7ff faa3 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	4368      	muls	r0, r5
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fbb0 f8f3 	udiv	r8, r0, r3
 800186c:	f7ff fa9c 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	4368      	muls	r0, r5
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	fbb0 f3f3 	udiv	r3, r0, r3
 800187a:	fbb3 f3f9 	udiv	r3, r3, r9
 800187e:	fb09 8313 	mls	r3, r9, r3, r8
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	3332      	adds	r3, #50	; 0x32
 8001886:	fbb3 f3f9 	udiv	r3, r3, r9
 800188a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800188e:	f7ff fa8b 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001892:	6862      	ldr	r2, [r4, #4]
 8001894:	4368      	muls	r0, r5
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	fbb0 faf2 	udiv	sl, r0, r2
 800189c:	f7ff fa84 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 80018a0:	e7bd      	b.n	800181e <UART_SetConfig+0x1a6>
 80018a2:	bf00      	nop
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40011400 	.word	0x40011400

080018ac <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	4604      	mov	r4, r0
 80018b0:	460e      	mov	r6, r1
 80018b2:	4617      	mov	r7, r2
 80018b4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80018b6:	6821      	ldr	r1, [r4, #0]
 80018b8:	680b      	ldr	r3, [r1, #0]
 80018ba:	ea36 0303 	bics.w	r3, r6, r3
 80018be:	d101      	bne.n	80018c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80018c0:	2000      	movs	r0, #0
}
 80018c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80018c4:	1c6b      	adds	r3, r5, #1
 80018c6:	d0f7      	beq.n	80018b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018c8:	b995      	cbnz	r5, 80018f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018dc:	2320      	movs	r3, #32
 80018de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018e6:	2300      	movs	r3, #0
 80018e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018ec:	2003      	movs	r0, #3
 80018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018f0:	f7fe fe90 	bl	8000614 <HAL_GetTick>
 80018f4:	1bc0      	subs	r0, r0, r7
 80018f6:	4285      	cmp	r5, r0
 80018f8:	d2dd      	bcs.n	80018b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80018fa:	e7e6      	b.n	80018ca <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080018fc <HAL_UART_Init>:
{
 80018fc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018fe:	4604      	mov	r4, r0
 8001900:	b340      	cbz	r0, 8001954 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001902:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800190a:	b91b      	cbnz	r3, 8001914 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800190c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001910:	f001 fdb6 	bl	8003480 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001914:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001916:	2324      	movs	r3, #36	; 0x24
 8001918:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800191c:	68d3      	ldr	r3, [r2, #12]
 800191e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001922:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff fea7 	bl	8001678 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001932:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800193a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001942:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001944:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001946:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001948:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800194a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800194e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001952:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
}
 8001956:	bd10      	pop	{r4, pc}

08001958 <HAL_UART_Transmit>:
{
 8001958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800195c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800195e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001962:	2b20      	cmp	r3, #32
{
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800196a:	d14f      	bne.n	8001a0c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 800196c:	2900      	cmp	r1, #0
 800196e:	d04a      	beq.n	8001a06 <HAL_UART_Transmit+0xae>
 8001970:	2a00      	cmp	r2, #0
 8001972:	d048      	beq.n	8001a06 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001974:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001978:	2b01      	cmp	r3, #1
 800197a:	d047      	beq.n	8001a0c <HAL_UART_Transmit+0xb4>
 800197c:	2301      	movs	r3, #1
 800197e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001986:	2321      	movs	r3, #33	; 0x21
 8001988:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800198c:	f7fe fe42 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001990:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001994:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001996:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800199a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800199c:	b29b      	uxth	r3, r3
 800199e:	b96b      	cbnz	r3, 80019bc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4632      	mov	r2, r6
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff ff80 	bl	80018ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019ac:	b9b0      	cbnz	r0, 80019dc <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80019ae:	2320      	movs	r3, #32
 80019b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80019b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80019b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80019bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019c4:	68a3      	ldr	r3, [r4, #8]
 80019c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019ca:	4632      	mov	r2, r6
 80019cc:	463b      	mov	r3, r7
 80019ce:	f04f 0180 	mov.w	r1, #128	; 0x80
 80019d2:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019d4:	d10e      	bne.n	80019f4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019d6:	f7ff ff69 	bl	80018ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019da:	b110      	cbz	r0, 80019e2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80019dc:	2003      	movs	r0, #3
 80019de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019e2:	882b      	ldrh	r3, [r5, #0]
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ea:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80019ec:	6923      	ldr	r3, [r4, #16]
 80019ee:	b943      	cbnz	r3, 8001a02 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80019f0:	3502      	adds	r5, #2
 80019f2:	e7d2      	b.n	800199a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019f4:	f7ff ff5a 	bl	80018ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d1ef      	bne.n	80019dc <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	782a      	ldrb	r2, [r5, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	3501      	adds	r5, #1
 8001a04:	e7c9      	b.n	800199a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a06:	2001      	movs	r0, #1
 8001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001a0c:	2002      	movs	r0, #2
}
 8001a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a12 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001a12:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d11c      	bne.n	8001a54 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8001a1a:	b1c9      	cbz	r1, 8001a50 <HAL_UART_Receive_IT+0x3e>
 8001a1c:	b1c2      	cbz	r2, 8001a50 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8001a1e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d016      	beq.n	8001a54 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 8001a26:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001a28:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a2c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a30:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a34:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001a36:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a38:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8001a3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a3e:	f041 0101 	orr.w	r1, r1, #1
 8001a42:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001a44:	68d1      	ldr	r1, [r2, #12]
 8001a46:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001a4a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4770      	bx	lr
      return HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
 8001a52:	4770      	bx	lr
    return HAL_BUSY; 
 8001a54:	2002      	movs	r0, #2
}
 8001a56:	4770      	bx	lr

08001a58 <HAL_UART_TxCpltCallback>:
 8001a58:	4770      	bx	lr

08001a5a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a5a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a5e:	2b22      	cmp	r3, #34	; 0x22
{
 8001a60:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a62:	d132      	bne.n	8001aca <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a64:	6883      	ldr	r3, [r0, #8]
 8001a66:	6901      	ldr	r1, [r0, #16]
 8001a68:	6802      	ldr	r2, [r0, #0]
 8001a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a70:	d11f      	bne.n	8001ab2 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a72:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a74:	b9c9      	cbnz	r1, 8001aaa <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a7a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001a7e:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001a80:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001a82:	3c01      	subs	r4, #1
 8001a84:	b2a4      	uxth	r4, r4
 8001a86:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001a88:	b96c      	cbnz	r4, 8001aa6 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a8a:	6803      	ldr	r3, [r0, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a92:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001aa2:	f000 fe33 	bl	800270c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f823 2b01 	strh.w	r2, [r3], #1
 8001ab0:	e7e5      	b.n	8001a7e <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ab2:	b921      	cbnz	r1, 8001abe <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	6852      	ldr	r2, [r2, #4]
 8001ab8:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e7e0      	b.n	8001a80 <UART_Receive_IT+0x26>
 8001abe:	6852      	ldr	r2, [r2, #4]
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	6281      	str	r1, [r0, #40]	; 0x28
 8001ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ac8:	e7f7      	b.n	8001aba <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001aca:	2002      	movs	r0, #2
 8001acc:	bd10      	pop	{r4, pc}

08001ace <HAL_UART_ErrorCallback>:
 8001ace:	4770      	bx	lr

08001ad0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ad0:	6803      	ldr	r3, [r0, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ad4:	68d9      	ldr	r1, [r3, #12]
{
 8001ad6:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001ad8:	0716      	lsls	r6, r2, #28
{
 8001ada:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001adc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001ade:	d107      	bne.n	8001af0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ae0:	0696      	lsls	r6, r2, #26
 8001ae2:	d55a      	bpl.n	8001b9a <HAL_UART_IRQHandler+0xca>
 8001ae4:	068d      	lsls	r5, r1, #26
 8001ae6:	d558      	bpl.n	8001b9a <HAL_UART_IRQHandler+0xca>
}
 8001ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001aec:	f7ff bfb5 	b.w	8001a5a <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001af0:	f015 0501 	ands.w	r5, r5, #1
 8001af4:	d102      	bne.n	8001afc <HAL_UART_IRQHandler+0x2c>
 8001af6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001afa:	d04e      	beq.n	8001b9a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001afc:	07d3      	lsls	r3, r2, #31
 8001afe:	d505      	bpl.n	8001b0c <HAL_UART_IRQHandler+0x3c>
 8001b00:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b02:	bf42      	ittt	mi
 8001b04:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001b06:	f043 0301 	orrmi.w	r3, r3, #1
 8001b0a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b0c:	0750      	lsls	r0, r2, #29
 8001b0e:	d504      	bpl.n	8001b1a <HAL_UART_IRQHandler+0x4a>
 8001b10:	b11d      	cbz	r5, 8001b1a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b1a:	0793      	lsls	r3, r2, #30
 8001b1c:	d504      	bpl.n	8001b28 <HAL_UART_IRQHandler+0x58>
 8001b1e:	b11d      	cbz	r5, 8001b28 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b28:	0716      	lsls	r6, r2, #28
 8001b2a:	d504      	bpl.n	8001b36 <HAL_UART_IRQHandler+0x66>
 8001b2c:	b11d      	cbz	r5, 8001b36 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d066      	beq.n	8001c0a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b3c:	0695      	lsls	r5, r2, #26
 8001b3e:	d504      	bpl.n	8001b4a <HAL_UART_IRQHandler+0x7a>
 8001b40:	0688      	lsls	r0, r1, #26
 8001b42:	d502      	bpl.n	8001b4a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff ff88 	bl	8001a5a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b50:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001b52:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b54:	d402      	bmi.n	8001b5c <HAL_UART_IRQHandler+0x8c>
 8001b56:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001b5a:	d01a      	beq.n	8001b92 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001b5c:	f7ff fd7e 	bl	800165c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	0652      	lsls	r2, r2, #25
 8001b66:	d510      	bpl.n	8001b8a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b68:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001b6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b70:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001b72:	b150      	cbz	r0, 8001b8a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_UART_IRQHandler+0x13c>)
 8001b76:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b78:	f7fe fdce 	bl	8000718 <HAL_DMA_Abort_IT>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d044      	beq.n	8001c0a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b80:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b86:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b88:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff ff9f 	bl	8001ace <HAL_UART_ErrorCallback>
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b92:	f7ff ff9c 	bl	8001ace <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b9a:	0616      	lsls	r6, r2, #24
 8001b9c:	d527      	bpl.n	8001bee <HAL_UART_IRQHandler+0x11e>
 8001b9e:	060d      	lsls	r5, r1, #24
 8001ba0:	d525      	bpl.n	8001bee <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ba2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001ba6:	2a21      	cmp	r2, #33	; 0x21
 8001ba8:	d12f      	bne.n	8001c0a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001baa:	68a2      	ldr	r2, [r4, #8]
 8001bac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001bb0:	6a22      	ldr	r2, [r4, #32]
 8001bb2:	d117      	bne.n	8001be4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001bb4:	8811      	ldrh	r1, [r2, #0]
 8001bb6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001bba:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001bbc:	6921      	ldr	r1, [r4, #16]
 8001bbe:	b979      	cbnz	r1, 8001be0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001bc0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001bc2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001bc4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001bcc:	b9ea      	cbnz	r2, 8001c0a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd4:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001be0:	3201      	adds	r2, #1
 8001be2:	e7ee      	b.n	8001bc2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001be4:	1c51      	adds	r1, r2, #1
 8001be6:	6221      	str	r1, [r4, #32]
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e7ea      	b.n	8001bc4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bee:	0650      	lsls	r0, r2, #25
 8001bf0:	d50b      	bpl.n	8001c0a <HAL_UART_IRQHandler+0x13a>
 8001bf2:	064a      	lsls	r2, r1, #25
 8001bf4:	d509      	bpl.n	8001c0a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff ff27 	bl	8001a58 <HAL_UART_TxCpltCallback>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	08001c11 	.word	0x08001c11

08001c10 <UART_DMAAbortOnError>:
{
 8001c10:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001c18:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001c1a:	f7ff ff58 	bl	8001ace <HAL_UART_ErrorCallback>
 8001c1e:	bd08      	pop	{r3, pc}

08001c20 <writeCommand>:
  {32, 16,  8,  4,  4,  8, 16, 32},
  {62, 61, 59, 55, 47, 31, 47, 55},
  {59, 61, 62, 61, 59, 55, 47, 31},
};

void writeCommand(uint8_t command){
 8001c20:	b510      	push	{r4, lr}
	//HAL_Delay(1);
	txbuff[0] = command;
 8001c22:	4c10      	ldr	r4, [pc, #64]	; (8001c64 <writeCommand+0x44>)
	CLR_RS;
 8001c24:	2200      	movs	r2, #0
	txbuff[0] = command;
 8001c26:	7020      	strb	r0, [r4, #0]
	CLR_RS;
 8001c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2c:	480e      	ldr	r0, [pc, #56]	; (8001c68 <writeCommand+0x48>)
 8001c2e:	f7fe fe6b 	bl	8000908 <HAL_GPIO_WritePin>
	CLR_CS;
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <writeCommand+0x48>)
 8001c3a:	f7fe fe65 	bl	8000908 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi1, txbuff, 1, 5000) != HAL_OK){
 8001c3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c42:	2201      	movs	r2, #1
 8001c44:	4621      	mov	r1, r4
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <writeCommand+0x4c>)
 8001c48:	f7ff f962 	bl	8000f10 <HAL_SPI_Transmit>
 8001c4c:	b108      	cbz	r0, 8001c52 <writeCommand+0x32>
	  Error_Handler();
 8001c4e:	f000 fdb5 	bl	80027bc <Error_Handler>
	}

	SET_CS;
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <writeCommand+0x48>)
}
 8001c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SET_CS;
 8001c5e:	f7fe be53 	b.w	8000908 <HAL_GPIO_WritePin>
 8001c62:	bf00      	nop
 8001c64:	200001e4 	.word	0x200001e4
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	20000204 	.word	0x20000204

08001c70 <writeData>:

void writeData(uint8_t data){
 8001c70:	b510      	push	{r4, lr}
	//HAL_Delay(1);
	txbuff[0] = data;
 8001c72:	4c10      	ldr	r4, [pc, #64]	; (8001cb4 <writeData+0x44>)
	SET_RS;
 8001c74:	2201      	movs	r2, #1
	txbuff[0] = data;
 8001c76:	7020      	strb	r0, [r4, #0]
	SET_RS;
 8001c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7c:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <writeData+0x48>)
 8001c7e:	f7fe fe43 	bl	8000908 <HAL_GPIO_WritePin>
	CLR_CS;
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <writeData+0x48>)
 8001c8a:	f7fe fe3d 	bl	8000908 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi1, txbuff, 1, 5000) != HAL_OK){
 8001c8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c92:	2201      	movs	r2, #1
 8001c94:	4621      	mov	r1, r4
 8001c96:	4809      	ldr	r0, [pc, #36]	; (8001cbc <writeData+0x4c>)
 8001c98:	f7ff f93a 	bl	8000f10 <HAL_SPI_Transmit>
 8001c9c:	b108      	cbz	r0, 8001ca2 <writeData+0x32>
	  Error_Handler();
 8001c9e:	f000 fd8d 	bl	80027bc <Error_Handler>
	}

	SET_CS;
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <writeData+0x48>)
}
 8001caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SET_CS;
 8001cae:	f7fe be2b 	b.w	8000908 <HAL_GPIO_WritePin>
 8001cb2:	bf00      	nop
 8001cb4:	200001e4 	.word	0x200001e4
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	20000204 	.word	0x20000204

08001cc0 <Initialize_CFAH2004AP>:

void Initialize_CFAH2004AP(void){
 8001cc0:	b508      	push	{r3, lr}
	writeCommand(0x38); // Function set
 8001cc2:	2038      	movs	r0, #56	; 0x38
 8001cc4:	f7ff ffac 	bl	8001c20 <writeCommand>
	writeCommand(0x0C); // Display ON/OFF
 8001cc8:	200c      	movs	r0, #12
 8001cca:	f7ff ffa9 	bl	8001c20 <writeCommand>
	writeCommand(0x01); // Clear display
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff ffa6 	bl	8001c20 <writeCommand>
	writeCommand(0x06); // Entry mode set
 8001cd4:	2006      	movs	r0, #6
}
 8001cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	writeCommand(0x06); // Entry mode set
 8001cda:	f7ff bfa1 	b.w	8001c20 <writeCommand>
	...

08001ce0 <Initialize_CGRAM>:

void Initialize_CGRAM(void){
 8001ce0:	b570      	push	{r4, r5, r6, lr}
	// etc.

	for (i = 0; i < 8; i ++){
		writeCommand(0x40 + (0x08 * i));
		for (j = 0; j < 8; j ++){
			writeData(CGRAM[i][j]);
 8001ce2:	4e09      	ldr	r6, [pc, #36]	; (8001d08 <Initialize_CGRAM+0x28>)
void Initialize_CGRAM(void){
 8001ce4:	2400      	movs	r4, #0
		writeCommand(0x40 + (0x08 * i));
 8001ce6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001cea:	b2c0      	uxtb	r0, r0
 8001cec:	f7ff ff98 	bl	8001c20 <writeCommand>
 8001cf0:	2500      	movs	r5, #0
			writeData(CGRAM[i][j]);
 8001cf2:	1973      	adds	r3, r6, r5
 8001cf4:	3501      	adds	r5, #1
 8001cf6:	5d18      	ldrb	r0, [r3, r4]
 8001cf8:	f7ff ffba 	bl	8001c70 <writeData>
		for (j = 0; j < 8; j ++){
 8001cfc:	2d08      	cmp	r5, #8
 8001cfe:	d1f8      	bne.n	8001cf2 <Initialize_CGRAM+0x12>
 8001d00:	3408      	adds	r4, #8
	for (i = 0; i < 8; i ++){
 8001d02:	2c40      	cmp	r4, #64	; 0x40
 8001d04:	d1ef      	bne.n	8001ce6 <Initialize_CGRAM+0x6>
		}
	}
}
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	20000008 	.word	0x20000008

08001d0c <writeString>:

void writeString(uint8_t count, uint8_t *MSG){
 8001d0c:	3801      	subs	r0, #1
 8001d0e:	b538      	push	{r3, r4, r5, lr}
 8001d10:	1e4d      	subs	r5, r1, #1
 8001d12:	180c      	adds	r4, r1, r0
	  for(uint8_t i = 0; i<count;i++)
 8001d14:	42a5      	cmp	r5, r4
 8001d16:	d100      	bne.n	8001d1a <writeString+0xe>
	  {
	    writeData(MSG[i]);
	  }
}
 8001d18:	bd38      	pop	{r3, r4, r5, pc}
	    writeData(MSG[i]);
 8001d1a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001d1e:	f7ff ffa7 	bl	8001c70 <writeData>
 8001d22:	e7f7      	b.n	8001d14 <writeString+0x8>

08001d24 <check_but.part.0>:
	  writeCommand(LINE_FOUR);
	  writeString(20, string_4);

}

uint8_t check_but(uint8_t option){
 8001d24:	b508      	push	{r3, lr}
		return 1;
	}
	if(option == down && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == 0){
		return 1;
	}
	if(option == enter && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0){
 8001d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <check_but.part.0+0x14>)
 8001d2c:	f7fe fde6 	bl	80008fc <HAL_GPIO_ReadPin>
		return 1;
	}
	return 0;
}
 8001d30:	fab0 f080 	clz	r0, r0
 8001d34:	0940      	lsrs	r0, r0, #5
 8001d36:	bd08      	pop	{r3, pc}
 8001d38:	40021000 	.word	0x40021000

08001d3c <display_two_lines>:
void display_two_lines(char string_1[20], char string_2[20]){
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4605      	mov	r5, r0
	  writeCommand(0x1);
 8001d40:	2001      	movs	r0, #1
void display_two_lines(char string_1[20], char string_2[20]){
 8001d42:	460c      	mov	r4, r1
	  writeCommand(0x1);
 8001d44:	f7ff ff6c 	bl	8001c20 <writeCommand>
	  HAL_Delay(1);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7fe fc69 	bl	8000620 <HAL_Delay>
	  writeCommand(LINE_TWO);
 8001d4e:	20c0      	movs	r0, #192	; 0xc0
 8001d50:	f7ff ff66 	bl	8001c20 <writeCommand>
	  writeString(20, string_1);
 8001d54:	4629      	mov	r1, r5
 8001d56:	2014      	movs	r0, #20
 8001d58:	f7ff ffd8 	bl	8001d0c <writeString>
	  writeCommand(LINE_THREE);
 8001d5c:	2094      	movs	r0, #148	; 0x94
 8001d5e:	f7ff ff5f 	bl	8001c20 <writeCommand>
	  writeString(20, string_2);
 8001d62:	4621      	mov	r1, r4
 8001d64:	2014      	movs	r0, #20
}
 8001d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  writeString(20, string_2);
 8001d6a:	f7ff bfcf 	b.w	8001d0c <writeString>

08001d6e <display_four_lines>:
void display_four_lines(char string_1[20], char string_2[20], char string_3[20], char string_4[20]){
 8001d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d70:	4607      	mov	r7, r0
	  writeCommand(0x1);
 8001d72:	2001      	movs	r0, #1
void display_four_lines(char string_1[20], char string_2[20], char string_3[20], char string_4[20]){
 8001d74:	4615      	mov	r5, r2
 8001d76:	461c      	mov	r4, r3
 8001d78:	460e      	mov	r6, r1
	  writeCommand(0x1);
 8001d7a:	f7ff ff51 	bl	8001c20 <writeCommand>
	  HAL_Delay(10);
 8001d7e:	200a      	movs	r0, #10
 8001d80:	f7fe fc4e 	bl	8000620 <HAL_Delay>
	  writeString(20, string_1);
 8001d84:	4639      	mov	r1, r7
 8001d86:	2014      	movs	r0, #20
 8001d88:	f7ff ffc0 	bl	8001d0c <writeString>
	  writeCommand(LINE_TWO);
 8001d8c:	20c0      	movs	r0, #192	; 0xc0
 8001d8e:	f7ff ff47 	bl	8001c20 <writeCommand>
	  writeString(20, string_2);
 8001d92:	4631      	mov	r1, r6
 8001d94:	2014      	movs	r0, #20
 8001d96:	f7ff ffb9 	bl	8001d0c <writeString>
	  writeCommand(LINE_THREE);
 8001d9a:	2094      	movs	r0, #148	; 0x94
 8001d9c:	f7ff ff40 	bl	8001c20 <writeCommand>
	  writeString(20, string_3);
 8001da0:	4629      	mov	r1, r5
 8001da2:	2014      	movs	r0, #20
 8001da4:	f7ff ffb2 	bl	8001d0c <writeString>
	  writeCommand(LINE_FOUR);
 8001da8:	20d4      	movs	r0, #212	; 0xd4
 8001daa:	f7ff ff39 	bl	8001c20 <writeCommand>
	  writeString(20, string_4);
 8001dae:	4621      	mov	r1, r4
 8001db0:	2014      	movs	r0, #20
}
 8001db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	  writeString(20, string_4);
 8001db6:	f7ff bfa9 	b.w	8001d0c <writeString>
	...

08001dbc <check_but>:
uint8_t check_but(uint8_t option){
 8001dbc:	b508      	push	{r3, lr}
	if(option == up && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0){
 8001dbe:	b958      	cbnz	r0, 8001dd8 <check_but+0x1c>
 8001dc0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc8:	f500 3004 	add.w	r0, r0, #135168	; 0x21000
	if(option == down && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == 0){
 8001dcc:	f7fe fd96 	bl	80008fc <HAL_GPIO_ReadPin>
		return 1;
 8001dd0:	fab0 f080 	clz	r0, r0
 8001dd4:	0940      	lsrs	r0, r0, #5
 8001dd6:	bd08      	pop	{r3, pc}
	if(option == down && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == 0){
 8001dd8:	2801      	cmp	r0, #1
 8001dda:	d103      	bne.n	8001de4 <check_but+0x28>
 8001ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <check_but+0x38>)
 8001de2:	e7f3      	b.n	8001dcc <check_but+0x10>
	if(option == enter && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0){
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d103      	bne.n	8001df0 <check_but+0x34>
}
 8001de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001dec:	f7ff bf9a 	b.w	8001d24 <check_but.part.0>
	return 0;
 8001df0:	2000      	movs	r0, #0
}
 8001df2:	bd08      	pop	{r3, pc}
 8001df4:	40021000 	.word	0x40021000

08001df8 <verify_placed_word>:

int verify_placed_word(struct letter_info placed_word[9], int word_len){
 8001df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	check = init;
	for(int i = 0; i < 83; i++){
		prev_board[i] = curr_board[i];
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <verify_placed_word+0xb0>)
	check = init;
 8001dfe:	4c2b      	ldr	r4, [pc, #172]	; (8001eac <verify_placed_word+0xb4>)
		prev_board[i] = curr_board[i];
 8001e00:	4f2b      	ldr	r7, [pc, #172]	; (8001eb0 <verify_placed_word+0xb8>)
	check = init;
 8001e02:	2300      	movs	r3, #0
 8001e04:	7023      	strb	r3, [r4, #0]
 8001e06:	4616      	mov	r6, r2
 8001e08:	463d      	mov	r5, r7
		prev_board[i] = curr_board[i];
 8001e0a:	f813 e007 	ldrb.w	lr, [r3, r7]
 8001e0e:	f803 e002 	strb.w	lr, [r3, r2]
	for(int i = 0; i < 83; i++){
 8001e12:	3301      	adds	r3, #1
 8001e14:	2b53      	cmp	r3, #83	; 0x53
 8001e16:	d1f8      	bne.n	8001e0a <verify_placed_word+0x12>
 8001e18:	2200      	movs	r2, #0
	}

	for(int i = 0; i < word_len; i++){
 8001e1a:	428a      	cmp	r2, r1
 8001e1c:	f100 0003 	add.w	r0, r0, #3
 8001e20:	db22      	blt.n	8001e68 <verify_placed_word+0x70>
		curr_board[(placed_word[i].row - 1) * 9 + (placed_word[i].col - 1)] = placed_word[i].letter;
	}

	HAL_UART_Transmit(&huart5, curr_board, 83, 1000);
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	2253      	movs	r2, #83	; 0x53
 8001e28:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <verify_placed_word+0xb8>)
 8001e2a:	4822      	ldr	r0, [pc, #136]	; (8001eb4 <verify_placed_word+0xbc>)

	while(1){
		if(check != init){
			break;
		}
		sprintf(string_1, "   Verifying the    ");
 8001e2c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001ec4 <verify_placed_word+0xcc>
 8001e30:	4f21      	ldr	r7, [pc, #132]	; (8001eb8 <verify_placed_word+0xc0>)
		sprintf(string_2, "   current board    ");
 8001e32:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001ec8 <verify_placed_word+0xd0>
	HAL_UART_Transmit(&huart5, curr_board, 83, 1000);
 8001e36:	f7ff fd8f 	bl	8001958 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart5, &in, 1);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	491f      	ldr	r1, [pc, #124]	; (8001ebc <verify_placed_word+0xc4>)
 8001e3e:	481d      	ldr	r0, [pc, #116]	; (8001eb4 <verify_placed_word+0xbc>)
 8001e40:	f7ff fde7 	bl	8001a12 <HAL_UART_Receive_IT>
		if(check != init){
 8001e44:	7823      	ldrb	r3, [r4, #0]
 8001e46:	b9f3      	cbnz	r3, 8001e86 <verify_placed_word+0x8e>
		sprintf(string_1, "   Verifying the    ");
 8001e48:	4649      	mov	r1, r9
 8001e4a:	4638      	mov	r0, r7
 8001e4c:	f001 fc2a 	bl	80036a4 <strcpy>
		sprintf(string_2, "   current board    ");
 8001e50:	4641      	mov	r1, r8
 8001e52:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <verify_placed_word+0xc8>)
 8001e54:	f001 fc26 	bl	80036a4 <strcpy>
		display_two_lines(string_1, string_2);
 8001e58:	4638      	mov	r0, r7
 8001e5a:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <verify_placed_word+0xc8>)
 8001e5c:	f7ff ff6e 	bl	8001d3c <display_two_lines>
		HAL_Delay(100);
 8001e60:	2064      	movs	r0, #100	; 0x64
 8001e62:	f7fe fbdd 	bl	8000620 <HAL_Delay>
		if(check != init){
 8001e66:	e7ed      	b.n	8001e44 <verify_placed_word+0x4c>
		curr_board[(placed_word[i].row - 1) * 9 + (placed_word[i].col - 1)] = placed_word[i].letter;
 8001e68:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 8001e6c:	f810 ec01 	ldrb.w	lr, [r0, #-1]
 8001e70:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001e7a:	442b      	add	r3, r5
 8001e7c:	4473      	add	r3, lr
	for(int i = 0; i < word_len; i++){
 8001e7e:	3201      	adds	r2, #1
		curr_board[(placed_word[i].row - 1) * 9 + (placed_word[i].col - 1)] = placed_word[i].letter;
 8001e80:	f803 7c01 	strb.w	r7, [r3, #-1]
 8001e84:	e7c9      	b.n	8001e1a <verify_placed_word+0x22>
	}

	if(check == invalid || check == error){
 8001e86:	3b02      	subs	r3, #2
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d805      	bhi.n	8001e98 <verify_placed_word+0xa0>
 8001e8c:	2300      	movs	r3, #0
		for(int i = 0; i < 83; i++){
			curr_board[i] = prev_board[i];
 8001e8e:	5cf2      	ldrb	r2, [r6, r3]
 8001e90:	54ea      	strb	r2, [r5, r3]
		for(int i = 0; i < 83; i++){
 8001e92:	3301      	adds	r3, #1
 8001e94:	2b53      	cmp	r3, #83	; 0x53
 8001e96:	d1fa      	bne.n	8001e8e <verify_placed_word+0x96>
		}
	}
	HAL_UART_Receive_IT(&huart5, &in, 1);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <verify_placed_word+0xc4>)
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <verify_placed_word+0xbc>)
 8001e9e:	f7ff fdb8 	bl	8001a12 <HAL_UART_Receive_IT>

	return check;
 8001ea2:	7820      	ldrb	r0, [r4, #0]
}
 8001ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ea8:	2000009b 	.word	0x2000009b
 8001eac:	200001c8 	.word	0x200001c8
 8001eb0:	20000048 	.word	0x20000048
 8001eb4:	2000029c 	.word	0x2000029c
 8001eb8:	200002f0 	.word	0x200002f0
 8001ebc:	2000025c 	.word	0x2000025c
 8001ec0:	20000318 	.word	0x20000318
 8001ec4:	0800412f 	.word	0x0800412f
 8001ec8:	08004144 	.word	0x08004144

08001ecc <get_score>:
		total_score += 50;
	}
	return total_score;
}

uint8_t get_score(char letter){
 8001ecc:	3841      	subs	r0, #65	; 0x41
 8001ece:	b2c0      	uxtb	r0, r0
 8001ed0:	2819      	cmp	r0, #25
 8001ed2:	bf9a      	itte	ls
 8001ed4:	4b01      	ldrls	r3, [pc, #4]	; (8001edc <get_score+0x10>)
 8001ed6:	5c18      	ldrbls	r0, [r3, r0]
 8001ed8:	2000      	movhi	r0, #0
		case 'Z':
			return 10;
		default:
			return 0;
	}
}
 8001eda:	4770      	bx	lr
 8001edc:	08003edc 	.word	0x08003edc

08001ee0 <get_tile>:

uint8_t get_tile(uint8_t row, uint8_t col){
	if((row == 4 && col == 0) || (row == 0 && col == 4) || (row == 8 && col == 4) || (row == 4 && col == 8) || (row == 3 && col == 3) || (row == 3 && col == 5) || (row == 5 && col == 3) || (row == 5 && col == 5)){
 8001ee0:	2804      	cmp	r0, #4
 8001ee2:	d104      	bne.n	8001eee <get_tile+0xe>
 8001ee4:	f011 0ff7 	tst.w	r1, #247	; 0xf7
 8001ee8:	d11c      	bne.n	8001f24 <get_tile+0x44>
		return dl;
 8001eea:	2001      	movs	r0, #1
 8001eec:	4770      	bx	lr
	if((row == 4 && col == 0) || (row == 0 && col == 4) || (row == 8 && col == 4) || (row == 4 && col == 8) || (row == 3 && col == 3) || (row == 3 && col == 5) || (row == 5 && col == 3) || (row == 5 && col == 5)){
 8001eee:	bb50      	cbnz	r0, 8001f46 <get_tile+0x66>
 8001ef0:	2904      	cmp	r1, #4
 8001ef2:	d0fa      	beq.n	8001eea <get_tile+0xa>
	}
	if((row == 4 && col == 4) || (row == 1 && col == 1) || (row == 1 && col == 7) || (row == 7 && col == 1) || (row == 7 && col == 7)){
		return dw;
	}
	if((row == 0 && col == 0) || (row == 0 && col == 8) || (row == 8 && col == 0) || (row == 8 && col == 8)){
		return tw;
 8001ef4:	f011 0ff7 	tst.w	r1, #247	; 0xf7
 8001ef8:	bf08      	it	eq
 8001efa:	2004      	moveq	r0, #4
 8001efc:	4770      	bx	lr
	if((row == 4 && col == 0) || (row == 0 && col == 4) || (row == 8 && col == 4) || (row == 4 && col == 8) || (row == 3 && col == 3) || (row == 3 && col == 5) || (row == 5 && col == 3) || (row == 5 && col == 5)){
 8001efe:	2904      	cmp	r1, #4
 8001f00:	d0f3      	beq.n	8001eea <get_tile+0xa>
		return tw;
 8001f02:	f011 0ff7 	tst.w	r1, #247	; 0xf7
 8001f06:	bf18      	it	ne
 8001f08:	2000      	movne	r0, #0
 8001f0a:	e7f5      	b.n	8001ef8 <get_tile+0x18>
	if((row == 4 && col == 0) || (row == 0 && col == 4) || (row == 8 && col == 4) || (row == 4 && col == 8) || (row == 3 && col == 3) || (row == 3 && col == 5) || (row == 5 && col == 3) || (row == 5 && col == 5)){
 8001f0c:	2805      	cmp	r0, #5
 8001f0e:	d01e      	beq.n	8001f4e <get_tile+0x6e>
	if((row == 2 && col == 2) || (row == 6 && col == 2) || (row == 2 && col == 6) || (row == 6 && col == 6)){
 8001f10:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d10a      	bne.n	8001f2e <get_tile+0x4e>
 8001f18:	f001 00fb 	and.w	r0, r1, #251	; 0xfb
	}

	return norm;
 8001f1c:	2802      	cmp	r0, #2
 8001f1e:	bf18      	it	ne
 8001f20:	2000      	movne	r0, #0
}
 8001f22:	4770      	bx	lr
		return dw;
 8001f24:	2904      	cmp	r1, #4
 8001f26:	bf14      	ite	ne
 8001f28:	2000      	movne	r0, #0
 8001f2a:	2003      	moveq	r0, #3
 8001f2c:	4770      	bx	lr
	if((row == 4 && col == 4) || (row == 1 && col == 1) || (row == 1 && col == 7) || (row == 7 && col == 1) || (row == 7 && col == 7)){
 8001f2e:	2801      	cmp	r0, #1
 8001f30:	d103      	bne.n	8001f3a <get_tile+0x5a>
 8001f32:	2901      	cmp	r1, #1
 8001f34:	d005      	beq.n	8001f42 <get_tile+0x62>
		return dw;
 8001f36:	2907      	cmp	r1, #7
 8001f38:	e7f5      	b.n	8001f26 <get_tile+0x46>
	if((row == 4 && col == 4) || (row == 1 && col == 1) || (row == 1 && col == 7) || (row == 7 && col == 1) || (row == 7 && col == 7)){
 8001f3a:	2807      	cmp	r0, #7
 8001f3c:	d0f9      	beq.n	8001f32 <get_tile+0x52>
	return norm;
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4770      	bx	lr
		return dw;
 8001f42:	2003      	movs	r0, #3
 8001f44:	4770      	bx	lr
	if((row == 4 && col == 0) || (row == 0 && col == 4) || (row == 8 && col == 4) || (row == 4 && col == 8) || (row == 3 && col == 3) || (row == 3 && col == 5) || (row == 5 && col == 3) || (row == 5 && col == 5)){
 8001f46:	2808      	cmp	r0, #8
 8001f48:	d0d9      	beq.n	8001efe <get_tile+0x1e>
 8001f4a:	2803      	cmp	r0, #3
 8001f4c:	d1de      	bne.n	8001f0c <get_tile+0x2c>
 8001f4e:	2903      	cmp	r1, #3
 8001f50:	d0cb      	beq.n	8001eea <get_tile+0xa>
		return dl;
 8001f52:	1f4b      	subs	r3, r1, #5
 8001f54:	4258      	negs	r0, r3
 8001f56:	4158      	adcs	r0, r3
 8001f58:	4770      	bx	lr
	...

08001f5c <update_scores>:
uint8_t update_scores(struct letter_info placed_word[9], int word_len){
 8001f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f60:	b089      	sub	sp, #36	; 0x24
	for(int i = 0; i < word_len; i++) {
 8001f62:	2300      	movs	r3, #0
		while(sel_row_1 >= 0 && curr_board[sel_row_1 * 9 + sel_col_1] != '0'){
 8001f64:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800223c <update_scores+0x2e0>
uint8_t update_scores(struct letter_info placed_word[9], int word_len){
 8001f68:	9004      	str	r0, [sp, #16]
 8001f6a:	9106      	str	r1, [sp, #24]
	for(int i = 0; i < word_len; i++) {
 8001f6c:	4680      	mov	r8, r0
 8001f6e:	9303      	str	r3, [sp, #12]
	uint8_t flag = 0;
 8001f70:	461e      	mov	r6, r3
	int total_score = 0;
 8001f72:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < word_len; i++) {
 8001f74:	9b03      	ldr	r3, [sp, #12]
 8001f76:	9a06      	ldr	r2, [sp, #24]
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	db09      	blt.n	8001f90 <update_scores+0x34>
	if(word_len >= 7){
 8001f7c:	2a06      	cmp	r2, #6
 8001f7e:	dd02      	ble.n	8001f86 <update_scores+0x2a>
		total_score += 50;
 8001f80:	9b01      	ldr	r3, [sp, #4]
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	9301      	str	r3, [sp, #4]
	return total_score;
 8001f86:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8001f8a:	b009      	add	sp, #36	; 0x24
 8001f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t sel_row_1 = placed_word[i].row - 1;
 8001f90:	f898 3001 	ldrb.w	r3, [r8, #1]
		uint8_t sel_col_1 = placed_word[i].col - 1;
 8001f94:	f898 2002 	ldrb.w	r2, [r8, #2]
		uint8_t sel_row_1 = placed_word[i].row - 1;
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
		uint8_t sel_col_1 = placed_word[i].col - 1;
 8001f9c:	3a01      	subs	r2, #1
		uint8_t sel_row_1 = placed_word[i].row - 1;
 8001f9e:	9302      	str	r3, [sp, #8]
		uint8_t sel_col_1 = placed_word[i].col - 1;
 8001fa0:	b2d2      	uxtb	r2, r2
		uint8_t sel_row_1 = placed_word[i].row - 1;
 8001fa2:	461c      	mov	r4, r3
		while(sel_row_1 >= 0 && curr_board[sel_row_1 * 9 + sel_col_1] != '0'){
 8001fa4:	4635      	mov	r5, r6
 8001fa6:	2309      	movs	r3, #9
 8001fa8:	fb13 2304 	smlabb	r3, r3, r4, r2
 8001fac:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d117      	bne.n	8001fe4 <update_scores+0x88>
			sel_row_1++;
 8001fb4:	3401      	adds	r4, #1
 8001fb6:	b2e4      	uxtb	r4, r4
 8001fb8:	4635      	mov	r5, r6
 8001fba:	e016      	b.n	8001fea <update_scores+0x8e>
				if((placed_word[j].row - 1) == sel_row_1 && (placed_word[j].col - 1) == sel_col_1){
 8001fbc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8001fc0:	3901      	subs	r1, #1
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d104      	bne.n	8001fd0 <update_scores+0x74>
 8001fc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8001fca:	3901      	subs	r1, #1
 8001fcc:	428a      	cmp	r2, r1
 8001fce:	d00b      	beq.n	8001fe8 <update_scores+0x8c>
 8001fd0:	3b03      	subs	r3, #3
			for(j = (i - 1); j >= 0; j--){
 8001fd2:	9904      	ldr	r1, [sp, #16]
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d1f1      	bne.n	8001fbc <update_scores+0x60>
			if(flag == 1){
 8001fd8:	b93e      	cbnz	r6, 8001fea <update_scores+0x8e>
			if(sel_row_1 == 0){
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d044      	beq.n	8002068 <update_scores+0x10c>
			sel_row_1--;
 8001fde:	3c01      	subs	r4, #1
 8001fe0:	b2e4      	uxtb	r4, r4
 8001fe2:	e7e0      	b.n	8001fa6 <update_scores+0x4a>
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	e7f4      	b.n	8001fd2 <update_scores+0x76>
 8001fe8:	2501      	movs	r5, #1
 8001fea:	9e02      	ldr	r6, [sp, #8]
		while(sel_row_2 <= 8 && curr_board[sel_row_2 * 9 + sel_col_1] != '0'){
 8001fec:	2e08      	cmp	r6, #8
 8001fee:	d806      	bhi.n	8001ffe <update_scores+0xa2>
 8001ff0:	2309      	movs	r3, #9
 8001ff2:	fb13 2306 	smlabb	r3, r3, r6, r2
 8001ff6:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001ffa:	2b30      	cmp	r3, #48	; 0x30
 8001ffc:	d14b      	bne.n	8002096 <update_scores+0x13a>
		if(curr_board[sel_row_2 * 9 + sel_col_1] == '0'){
 8001ffe:	2309      	movs	r3, #9
 8002000:	fb13 2306 	smlabb	r3, r3, r6, r2
 8002004:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002008:	2b30      	cmp	r3, #48	; 0x30
			sel_row_2--;
 800200a:	bf04      	itt	eq
 800200c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002010:	b2f6      	uxtbeq	r6, r6
		if(sel_row_1 == sel_row_2){
 8002012:	42a6      	cmp	r6, r4
 8002014:	d01b      	beq.n	800204e <update_scores+0xf2>
		if(flag == 0){
 8002016:	b9d5      	cbnz	r5, 800204e <update_scores+0xf2>
 8002018:	2309      	movs	r3, #9
 800201a:	fb13 2b04 	smlabb	fp, r3, r4, r2
 800201e:	4b86      	ldr	r3, [pc, #536]	; (8002238 <update_scores+0x2dc>)
 8002020:	445b      	add	r3, fp
 8002022:	9307      	str	r3, [sp, #28]
 8002024:	eb09 030b 	add.w	r3, r9, fp
 8002028:	9305      	str	r3, [sp, #20]
		uint8_t num_tw = 0;
 800202a:	462f      	mov	r7, r5
			for(j = sel_row_1; j <= sel_row_2; j++){
 800202c:	46aa      	mov	sl, r5
		int curr_score = 0;
 800202e:	46ab      	mov	fp, r5
			for(j = sel_row_1; j <= sel_row_2; j++){
 8002030:	42b4      	cmp	r4, r6
 8002032:	dd34      	ble.n	800209e <update_scores+0x142>
			if(num_dw){
 8002034:	b11d      	cbz	r5, 800203e <update_scores+0xe2>
				curr_score = curr_score * (2 * num_dw);
 8002036:	b22d      	sxth	r5, r5
 8002038:	006d      	lsls	r5, r5, #1
 800203a:	fb05 fb0b 	mul.w	fp, r5, fp
			if(num_tw){
 800203e:	b11f      	cbz	r7, 8002048 <update_scores+0xec>
				curr_score = curr_score * (3 * num_tw);
 8002040:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002044:	fb07 fb0b 	mul.w	fp, r7, fp
			total_score += curr_score;
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	445b      	add	r3, fp
 800204c:	9301      	str	r3, [sp, #4]
		while(sel_col_1 >= 0 && curr_board[sel_row_1 * 9 + sel_col_1] != '0'){
 800204e:	9b02      	ldr	r3, [sp, #8]
 8002050:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
		sel_col_1 = placed_word[i].col - 1;
 8002054:	4614      	mov	r4, r2
		while(sel_col_1 >= 0 && curr_board[sel_row_1 * 9 + sel_col_1] != '0'){
 8002056:	eb09 0503 	add.w	r5, r9, r3
 800205a:	5d29      	ldrb	r1, [r5, r4]
 800205c:	2930      	cmp	r1, #48	; 0x30
 800205e:	d165      	bne.n	800212c <update_scores+0x1d0>
			sel_col_1++;
 8002060:	3401      	adds	r4, #1
 8002062:	b2e4      	uxtb	r4, r4
 8002064:	2600      	movs	r6, #0
 8002066:	e067      	b.n	8002138 <update_scores+0x1dc>
 8002068:	4625      	mov	r5, r4
 800206a:	e7be      	b.n	8001fea <update_scores+0x8e>
				if((placed_word[j].row - 1) == sel_row_2 && (placed_word[j].col - 1) == sel_col_1){
 800206c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8002070:	3901      	subs	r1, #1
 8002072:	428e      	cmp	r6, r1
 8002074:	d104      	bne.n	8002080 <update_scores+0x124>
 8002076:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800207a:	3901      	subs	r1, #1
 800207c:	428a      	cmp	r2, r1
 800207e:	d00c      	beq.n	800209a <update_scores+0x13e>
 8002080:	3b03      	subs	r3, #3
			for(j = (i-1); j >= 0; j--){
 8002082:	9904      	ldr	r1, [sp, #16]
 8002084:	428b      	cmp	r3, r1
 8002086:	d1f1      	bne.n	800206c <update_scores+0x110>
			if(flag == 1){
 8002088:	2d01      	cmp	r5, #1
 800208a:	d0b8      	beq.n	8001ffe <update_scores+0xa2>
			if(sel_row_2 == 8){
 800208c:	2e08      	cmp	r6, #8
 800208e:	d0b6      	beq.n	8001ffe <update_scores+0xa2>
			sel_row_2++;
 8002090:	3601      	adds	r6, #1
 8002092:	b2f6      	uxtb	r6, r6
 8002094:	e7aa      	b.n	8001fec <update_scores+0x90>
 8002096:	4643      	mov	r3, r8
 8002098:	e7f3      	b.n	8002082 <update_scores+0x126>
 800209a:	2501      	movs	r5, #1
 800209c:	e7af      	b.n	8001ffe <update_scores+0xa2>
				if(prev_board[j * 9 + sel_col_1] == '0'){
 800209e:	9b07      	ldr	r3, [sp, #28]
 80020a0:	f813 100a 	ldrb.w	r1, [r3, sl]
 80020a4:	2930      	cmp	r1, #48	; 0x30
 80020a6:	d128      	bne.n	80020fa <update_scores+0x19e>
					curr_tile = get_tile(j, sel_col_1);
 80020a8:	4611      	mov	r1, r2
 80020aa:	b2e0      	uxtb	r0, r4
 80020ac:	f7ff ff18 	bl	8001ee0 <get_tile>
 80020b0:	9b05      	ldr	r3, [sp, #20]
					if(curr_tile == dl){
 80020b2:	2801      	cmp	r0, #1
					curr_tile = get_tile(j, sel_col_1);
 80020b4:	4601      	mov	r1, r0
 80020b6:	f813 000a 	ldrb.w	r0, [r3, sl]
					if(curr_tile == dl){
 80020ba:	d108      	bne.n	80020ce <update_scores+0x172>
						curr_score += 2 * get_score(curr_board[j * 9 + sel_col_1]);
 80020bc:	f7ff ff06 	bl	8001ecc <get_score>
 80020c0:	2302      	movs	r3, #2
						curr_score += 3 * get_score(curr_board[j * 9 + sel_col_1]);
 80020c2:	fb13 bb00 	smlabb	fp, r3, r0, fp
			for(j = sel_row_1; j <= sel_row_2; j++){
 80020c6:	3401      	adds	r4, #1
 80020c8:	f10a 0a09 	add.w	sl, sl, #9
 80020cc:	e7b0      	b.n	8002030 <update_scores+0xd4>
					else if(curr_tile == tl){
 80020ce:	2902      	cmp	r1, #2
 80020d0:	d103      	bne.n	80020da <update_scores+0x17e>
						curr_score += 3 * get_score(curr_board[j * 9 + sel_col_1]);
 80020d2:	f7ff fefb 	bl	8001ecc <get_score>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e7f3      	b.n	80020c2 <update_scores+0x166>
					else if(curr_tile == dw){
 80020da:	2903      	cmp	r1, #3
 80020dc:	d105      	bne.n	80020ea <update_scores+0x18e>
						curr_score += get_score(curr_board[j * 9 + sel_col_1]);
 80020de:	f7ff fef5 	bl	8001ecc <get_score>
						num_dw++;
 80020e2:	3501      	adds	r5, #1
						curr_score += get_score(curr_board[j * 9 + sel_col_1]);
 80020e4:	4483      	add	fp, r0
						num_dw++;
 80020e6:	b2ed      	uxtb	r5, r5
 80020e8:	e7ed      	b.n	80020c6 <update_scores+0x16a>
					else if(curr_tile == tw){
 80020ea:	2904      	cmp	r1, #4
 80020ec:	d108      	bne.n	8002100 <update_scores+0x1a4>
						curr_score += get_score(curr_board[j * 9 + sel_col_1]);
 80020ee:	f7ff feed 	bl	8001ecc <get_score>
						num_tw++;
 80020f2:	3701      	adds	r7, #1
						curr_score += get_score(curr_board[j * 9 + sel_col_1]);
 80020f4:	4483      	add	fp, r0
						num_tw++;
 80020f6:	b2ff      	uxtb	r7, r7
 80020f8:	e7e5      	b.n	80020c6 <update_scores+0x16a>
					curr_score += get_score(curr_board[j * 9 + sel_col_1]);
 80020fa:	9b05      	ldr	r3, [sp, #20]
 80020fc:	f813 000a 	ldrb.w	r0, [r3, sl]
 8002100:	f7ff fee4 	bl	8001ecc <get_score>
 8002104:	4483      	add	fp, r0
 8002106:	e7de      	b.n	80020c6 <update_scores+0x16a>
				if((placed_word[j].row - 1) == sel_row_1 && (placed_word[j].col - 1) == sel_col_1){
 8002108:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800210c:	9e02      	ldr	r6, [sp, #8]
 800210e:	3801      	subs	r0, #1
 8002110:	4286      	cmp	r6, r0
 8002112:	d104      	bne.n	800211e <update_scores+0x1c2>
 8002114:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8002118:	3801      	subs	r0, #1
 800211a:	4284      	cmp	r4, r0
 800211c:	d00b      	beq.n	8002136 <update_scores+0x1da>
 800211e:	3903      	subs	r1, #3
			for(j = (i-1); j >= 0; j--){
 8002120:	9804      	ldr	r0, [sp, #16]
 8002122:	4281      	cmp	r1, r0
 8002124:	d1f0      	bne.n	8002108 <update_scores+0x1ac>
			if(sel_col_1 == 0){
 8002126:	b91c      	cbnz	r4, 8002130 <update_scores+0x1d4>
 8002128:	4626      	mov	r6, r4
 800212a:	e005      	b.n	8002138 <update_scores+0x1dc>
 800212c:	4641      	mov	r1, r8
 800212e:	e7f7      	b.n	8002120 <update_scores+0x1c4>
			sel_col_1--;
 8002130:	3c01      	subs	r4, #1
 8002132:	b2e4      	uxtb	r4, r4
 8002134:	e791      	b.n	800205a <update_scores+0xfe>
 8002136:	2601      	movs	r6, #1
		while(sel_col_2 <= 8 && curr_board[sel_row_2 * 9 + sel_col_2] != '0'){
 8002138:	eb09 0503 	add.w	r5, r9, r3
 800213c:	2a08      	cmp	r2, #8
 800213e:	d802      	bhi.n	8002146 <update_scores+0x1ea>
 8002140:	5ca9      	ldrb	r1, [r5, r2]
 8002142:	2930      	cmp	r1, #48	; 0x30
 8002144:	d13f      	bne.n	80021c6 <update_scores+0x26a>
		if(curr_board[sel_row_2 * 9 + sel_col_2] == '0'){
 8002146:	eb09 0102 	add.w	r1, r9, r2
 800214a:	5cc9      	ldrb	r1, [r1, r3]
 800214c:	2930      	cmp	r1, #48	; 0x30
			sel_col_2--;
 800214e:	bf04      	itt	eq
 8002150:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002154:	b2d2      	uxtbeq	r2, r2
		if(sel_col_1 == sel_col_2){
 8002156:	42a2      	cmp	r2, r4
 8002158:	d06c      	beq.n	8002234 <update_scores+0x2d8>
		if(flag == 0){
 800215a:	b9c6      	cbnz	r6, 800218e <update_scores+0x232>
				if(prev_board[sel_row_1 * 9 + j] == '0'){
 800215c:	4936      	ldr	r1, [pc, #216]	; (8002238 <update_scores+0x2dc>)
 800215e:	18e5      	adds	r5, r4, r3
 8002160:	18cb      	adds	r3, r1, r3
 8002162:	444d      	add	r5, r9
		num_tw = 0;
 8002164:	4637      	mov	r7, r6
		num_dw = 0;
 8002166:	46b2      	mov	sl, r6
		curr_score = 0;
 8002168:	46b3      	mov	fp, r6
				if(prev_board[sel_row_1 * 9 + j] == '0'){
 800216a:	9305      	str	r3, [sp, #20]
			for(j = sel_col_1; j <= sel_col_2; j++){
 800216c:	4294      	cmp	r4, r2
 800216e:	dd2e      	ble.n	80021ce <update_scores+0x272>
			if(num_dw){
 8002170:	f1ba 0f00 	cmp.w	sl, #0
 8002174:	d003      	beq.n	800217e <update_scores+0x222>
				curr_score = curr_score * (2 * num_dw);
 8002176:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800217a:	fb0a fb0b 	mul.w	fp, sl, fp
			if(num_tw){
 800217e:	b11f      	cbz	r7, 8002188 <update_scores+0x22c>
				curr_score = curr_score * (3 * num_tw);
 8002180:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002184:	fb07 fb0b 	mul.w	fp, r7, fp
			total_score += curr_score;
 8002188:	9b01      	ldr	r3, [sp, #4]
 800218a:	445b      	add	r3, fp
 800218c:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < word_len; i++) {
 800218e:	9b03      	ldr	r3, [sp, #12]
 8002190:	3301      	adds	r3, #1
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	f108 0803 	add.w	r8, r8, #3
 8002198:	e6ec      	b.n	8001f74 <update_scores+0x18>
				if((placed_word[j].row - 1) == sel_row_2 && (placed_word[j].col - 1) == sel_col_2){
 800219a:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800219e:	9f02      	ldr	r7, [sp, #8]
 80021a0:	3801      	subs	r0, #1
 80021a2:	4287      	cmp	r7, r0
 80021a4:	d104      	bne.n	80021b0 <update_scores+0x254>
 80021a6:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80021aa:	3801      	subs	r0, #1
 80021ac:	4282      	cmp	r2, r0
 80021ae:	d00c      	beq.n	80021ca <update_scores+0x26e>
 80021b0:	3903      	subs	r1, #3
			for(j = (i-1); j >= 0; j--){
 80021b2:	9804      	ldr	r0, [sp, #16]
 80021b4:	4281      	cmp	r1, r0
 80021b6:	d1f0      	bne.n	800219a <update_scores+0x23e>
			if(flag == 1){
 80021b8:	2e00      	cmp	r6, #0
 80021ba:	d1c4      	bne.n	8002146 <update_scores+0x1ea>
			if (sel_col_2 == 8){
 80021bc:	2a08      	cmp	r2, #8
 80021be:	d0c2      	beq.n	8002146 <update_scores+0x1ea>
			sel_col_2++;
 80021c0:	3201      	adds	r2, #1
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	e7ba      	b.n	800213c <update_scores+0x1e0>
 80021c6:	4641      	mov	r1, r8
 80021c8:	e7f3      	b.n	80021b2 <update_scores+0x256>
 80021ca:	2601      	movs	r6, #1
 80021cc:	e7bb      	b.n	8002146 <update_scores+0x1ea>
				if(prev_board[sel_row_1 * 9 + j] == '0'){
 80021ce:	9b05      	ldr	r3, [sp, #20]
 80021d0:	5d1b      	ldrb	r3, [r3, r4]
 80021d2:	2b30      	cmp	r3, #48	; 0x30
 80021d4:	d129      	bne.n	800222a <update_scores+0x2ce>
					curr_tile = get_tile(sel_row_1, j);
 80021d6:	b2e1      	uxtb	r1, r4
 80021d8:	9802      	ldr	r0, [sp, #8]
 80021da:	f7ff fe81 	bl	8001ee0 <get_tile>
					if(curr_tile == dl){
 80021de:	2801      	cmp	r0, #1
 80021e0:	d108      	bne.n	80021f4 <update_scores+0x298>
						curr_score += 2 * get_score(curr_board[sel_row_1 * 9 + j]);
 80021e2:	7828      	ldrb	r0, [r5, #0]
 80021e4:	f7ff fe72 	bl	8001ecc <get_score>
 80021e8:	2302      	movs	r3, #2
						curr_score += 3 * get_score(curr_board[sel_row_1 * 9 + j]);
 80021ea:	fb13 bb00 	smlabb	fp, r3, r0, fp
			for(j = sel_col_1; j <= sel_col_2; j++){
 80021ee:	3401      	adds	r4, #1
 80021f0:	3501      	adds	r5, #1
 80021f2:	e7bb      	b.n	800216c <update_scores+0x210>
					else if(curr_tile == tl){
 80021f4:	2802      	cmp	r0, #2
 80021f6:	d104      	bne.n	8002202 <update_scores+0x2a6>
						curr_score += 3 * get_score(curr_board[sel_row_1 * 9 + j]);
 80021f8:	7828      	ldrb	r0, [r5, #0]
 80021fa:	f7ff fe67 	bl	8001ecc <get_score>
 80021fe:	2303      	movs	r3, #3
 8002200:	e7f3      	b.n	80021ea <update_scores+0x28e>
					else if(curr_tile == dw){
 8002202:	2803      	cmp	r0, #3
 8002204:	d108      	bne.n	8002218 <update_scores+0x2bc>
						curr_score += get_score(curr_board[sel_row_1 * 9 + j]);
 8002206:	7828      	ldrb	r0, [r5, #0]
 8002208:	f7ff fe60 	bl	8001ecc <get_score>
						num_dw++;
 800220c:	f10a 0a01 	add.w	sl, sl, #1
						curr_score += get_score(curr_board[sel_row_1 * 9 + j]);
 8002210:	4483      	add	fp, r0
						num_dw++;
 8002212:	fa5f fa8a 	uxtb.w	sl, sl
 8002216:	e7ea      	b.n	80021ee <update_scores+0x292>
					else if(curr_tile == tw){
 8002218:	2804      	cmp	r0, #4
						curr_score += get_score(curr_board[sel_row_1 * 9 + j]);
 800221a:	7828      	ldrb	r0, [r5, #0]
					else if(curr_tile == tw){
 800221c:	d106      	bne.n	800222c <update_scores+0x2d0>
						curr_score += get_score(curr_board[sel_row_1 * 9 + j]);
 800221e:	f7ff fe55 	bl	8001ecc <get_score>
						num_tw++;
 8002222:	3701      	adds	r7, #1
						curr_score += get_score(curr_board[sel_row_1 * 9 + j]);
 8002224:	4483      	add	fp, r0
						num_tw++;
 8002226:	b2ff      	uxtb	r7, r7
 8002228:	e7e1      	b.n	80021ee <update_scores+0x292>
					curr_score += get_score(curr_board[sel_row_1 * 9 + j]);
 800222a:	7828      	ldrb	r0, [r5, #0]
 800222c:	f7ff fe4e 	bl	8001ecc <get_score>
 8002230:	4483      	add	fp, r0
 8002232:	e7dc      	b.n	80021ee <update_scores+0x292>
			flag = 1;
 8002234:	2601      	movs	r6, #1
 8002236:	e7aa      	b.n	800218e <update_scores+0x232>
 8002238:	2000009b 	.word	0x2000009b
 800223c:	20000048 	.word	0x20000048

08002240 <decode_ID>:
char decode_ID(uint8_t ID[5]){
	int snippet = ID[2] << 16 | ID[3] << 8 | ID[4];
 8002240:	78c3      	ldrb	r3, [r0, #3]
 8002242:	7882      	ldrb	r2, [r0, #2]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800224a:	7902      	ldrb	r2, [r0, #4]
 800224c:	4313      	orrs	r3, r2
	switch(snippet){
 800224e:	4abb      	ldr	r2, [pc, #748]	; (800253c <decode_ID+0x2fc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	f000 8243 	beq.w	80026dc <decode_ID+0x49c>
 8002256:	f300 80ee 	bgt.w	8002436 <decode_ID+0x1f6>
 800225a:	f1a2 123e 	sub.w	r2, r2, #4063294	; 0x3e003e
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <decode_ID+0x4a>
 8002262:	dc6d      	bgt.n	8002340 <decode_ID+0x100>
 8002264:	4ab6      	ldr	r2, [pc, #728]	; (8002540 <decode_ID+0x300>)
 8002266:	4293      	cmp	r3, r2
 8002268:	f000 8088 	beq.w	800237c <decode_ID+0x13c>
 800226c:	dc31      	bgt.n	80022d2 <decode_ID+0x92>
 800226e:	4ab5      	ldr	r2, [pc, #724]	; (8002544 <decode_ID+0x304>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d040      	beq.n	80022f6 <decode_ID+0xb6>
 8002274:	dc13      	bgt.n	800229e <decode_ID+0x5e>
 8002276:	4ab4      	ldr	r2, [pc, #720]	; (8002548 <decode_ID+0x308>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d03c      	beq.n	80022f6 <decode_ID+0xb6>
 800227c:	dc07      	bgt.n	800228e <decode_ID+0x4e>
 800227e:	4ab3      	ldr	r2, [pc, #716]	; (800254c <decode_ID+0x30c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d07b      	beq.n	800237c <decode_ID+0x13c>
 8002284:	4ab2      	ldr	r2, [pc, #712]	; (8002550 <decode_ID+0x310>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d150      	bne.n	800232c <decode_ID+0xec>
		case 0x3f9526:
		case 0x4c9555:
		case 0x3e9527:
		case 0x3a9523:
		case 0x03951a:
			return 'I';
 800228a:	2049      	movs	r0, #73	; 0x49
 800228c:	4770      	bx	lr
	switch(snippet){
 800228e:	4ab1      	ldr	r2, [pc, #708]	; (8002554 <decode_ID+0x314>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d030      	beq.n	80022f6 <decode_ID+0xb6>
 8002294:	4ab0      	ldr	r2, [pc, #704]	; (8002558 <decode_ID+0x318>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d148      	bne.n	800232c <decode_ID+0xec>
			return 'R';
		case 0x0e1f9d:
		case 0xf01f63:
		case 0xf11f62:
		case 0xfb1f68:
			return 'S';
 800229a:	2053      	movs	r0, #83	; 0x53
 800229c:	4770      	bx	lr
	switch(snippet){
 800229e:	4aaf      	ldr	r2, [pc, #700]	; (800255c <decode_ID+0x31c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f000 8221 	beq.w	80026e8 <decode_ID+0x4a8>
 80022a6:	dc0a      	bgt.n	80022be <decode_ID+0x7e>
 80022a8:	f1a2 1206 	sub.w	r2, r2, #393222	; 0x60006
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f000 821b 	beq.w	80026e8 <decode_ID+0x4a8>
 80022b2:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 80022b6:	32ff      	adds	r2, #255	; 0xff
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05f      	beq.n	800237c <decode_ID+0x13c>
 80022bc:	e036      	b.n	800232c <decode_ID+0xec>
 80022be:	4aa8      	ldr	r2, [pc, #672]	; (8002560 <decode_ID+0x320>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <decode_ID+0x8e>
 80022c4:	f502 420a 	add.w	r2, r2, #35328	; 0x8a00
 80022c8:	327d      	adds	r2, #125	; 0x7d
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12e      	bne.n	800232c <decode_ID+0xec>
			return 'O';
 80022ce:	204f      	movs	r0, #79	; 0x4f
 80022d0:	4770      	bx	lr
	switch(snippet){
 80022d2:	4aa4      	ldr	r2, [pc, #656]	; (8002564 <decode_ID+0x324>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d0fa      	beq.n	80022ce <decode_ID+0x8e>
 80022d8:	dc16      	bgt.n	8002308 <decode_ID+0xc8>
 80022da:	f5a2 22bf 	sub.w	r2, r2, #391168	; 0x5f800
 80022de:	f2a2 72f6 	subw	r2, r2, #2038	; 0x7f6
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f000 8200 	beq.w	80026e8 <decode_ID+0x4a8>
 80022e8:	dc07      	bgt.n	80022fa <decode_ID+0xba>
 80022ea:	f5a2 321d 	sub.w	r2, r2, #160768	; 0x27400
 80022ee:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d1dd      	bne.n	80022b2 <decode_ID+0x72>
			return 'D';
 80022f6:	2044      	movs	r0, #68	; 0x44
 80022f8:	4770      	bx	lr
	switch(snippet){
 80022fa:	4a9b      	ldr	r2, [pc, #620]	; (8002568 <decode_ID+0x328>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d0c4      	beq.n	800228a <decode_ID+0x4a>
 8002300:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002304:	3203      	adds	r2, #3
 8002306:	e7d7      	b.n	80022b8 <decode_ID+0x78>
 8002308:	4a98      	ldr	r2, [pc, #608]	; (800256c <decode_ID+0x32c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	f000 81ec 	beq.w	80026e8 <decode_ID+0x4a8>
 8002310:	dc0e      	bgt.n	8002330 <decode_ID+0xf0>
 8002312:	f5a2 224f 	sub.w	r2, r2, #847872	; 0xcf000
 8002316:	f6a2 72ef 	subw	r2, r2, #4079	; 0xfef
 800231a:	4293      	cmp	r3, r2
 800231c:	d0d7      	beq.n	80022ce <decode_ID+0x8e>
 800231e:	f502 220f 	add.w	r2, r2, #585728	; 0x8f000
 8002322:	f602 72fb 	addw	r2, r2, #4091	; 0xffb
 8002326:	4293      	cmp	r3, r2
 8002328:	f000 81de 	beq.w	80026e8 <decode_ID+0x4a8>
		case 0xe61f75:
			return 'Y';
		case 0x899590:
			return 'Z';
		default:
			return '\0';
 800232c:	2000      	movs	r0, #0
 800232e:	4770      	bx	lr
	switch(snippet){
 8002330:	4a8f      	ldr	r2, [pc, #572]	; (8002570 <decode_ID+0x330>)
 8002332:	4293      	cmp	r3, r2
 8002334:	f000 81d0 	beq.w	80026d8 <decode_ID+0x498>
 8002338:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800233c:	3203      	adds	r2, #3
 800233e:	e7a2      	b.n	8002286 <decode_ID+0x46>
 8002340:	4a8c      	ldr	r2, [pc, #560]	; (8002574 <decode_ID+0x334>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d0c3      	beq.n	80022ce <decode_ID+0x8e>
 8002346:	dc35      	bgt.n	80023b4 <decode_ID+0x174>
 8002348:	f5a2 2270 	sub.w	r2, r2, #983040	; 0xf0000
 800234c:	3a2d      	subs	r2, #45	; 0x2d
 800234e:	4293      	cmp	r3, r2
 8002350:	f000 81ca 	beq.w	80026e8 <decode_ID+0x4a8>
 8002354:	dc14      	bgt.n	8002380 <decode_ID+0x140>
 8002356:	f5a2 22bf 	sub.w	r2, r2, #391168	; 0x5f800
 800235a:	f2a2 72f6 	subw	r2, r2, #2038	; 0x7f6
 800235e:	4293      	cmp	r3, r2
 8002360:	d093      	beq.n	800228a <decode_ID+0x4a>
 8002362:	dc08      	bgt.n	8002376 <decode_ID+0x136>
 8002364:	f5a2 2250 	sub.w	r2, r2, #851968	; 0xd0000
 8002368:	3a2f      	subs	r2, #47	; 0x2f
 800236a:	4293      	cmp	r3, r2
 800236c:	d08d      	beq.n	800228a <decode_ID+0x4a>
 800236e:	f502 2210 	add.w	r2, r2, #589824	; 0x90000
 8002372:	322b      	adds	r2, #43	; 0x2b
 8002374:	e7a0      	b.n	80022b8 <decode_ID+0x78>
 8002376:	4a80      	ldr	r2, [pc, #512]	; (8002578 <decode_ID+0x338>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d1dd      	bne.n	8002338 <decode_ID+0xf8>
			return 'E';
 800237c:	2045      	movs	r0, #69	; 0x45
 800237e:	4770      	bx	lr
	switch(snippet){
 8002380:	4a7e      	ldr	r2, [pc, #504]	; (800257c <decode_ID+0x33c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d0fa      	beq.n	800237c <decode_ID+0x13c>
 8002386:	dc0d      	bgt.n	80023a4 <decode_ID+0x164>
 8002388:	f5a2 22ff 	sub.w	r2, r2, #522240	; 0x7f800
 800238c:	f5a2 62ff 	sub.w	r2, r2, #2040	; 0x7f8
 8002390:	4293      	cmp	r3, r2
 8002392:	f000 8199 	beq.w	80026c8 <decode_ID+0x488>
 8002396:	f502 22c0 	add.w	r2, r2, #393216	; 0x60000
 800239a:	32f9      	adds	r2, #249	; 0xf9
 800239c:	4293      	cmp	r3, r2
 800239e:	d1c5      	bne.n	800232c <decode_ID+0xec>
			return 'X';
 80023a0:	2058      	movs	r0, #88	; 0x58
 80023a2:	4770      	bx	lr
	switch(snippet){
 80023a4:	4a76      	ldr	r2, [pc, #472]	; (8002580 <decode_ID+0x340>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f43f af6f 	beq.w	800228a <decode_ID+0x4a>
 80023ac:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 80023b0:	3234      	adds	r2, #52	; 0x34
 80023b2:	e781      	b.n	80022b8 <decode_ID+0x78>
 80023b4:	4a73      	ldr	r2, [pc, #460]	; (8002584 <decode_ID+0x344>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01c      	beq.n	80023f4 <decode_ID+0x1b4>
 80023ba:	dc1d      	bgt.n	80023f8 <decode_ID+0x1b8>
 80023bc:	f5a2 22e0 	sub.w	r2, r2, #458752	; 0x70000
 80023c0:	3af6      	subs	r2, #246	; 0xf6
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f000 8182 	beq.w	80026cc <decode_ID+0x48c>
 80023c8:	dc0b      	bgt.n	80023e2 <decode_ID+0x1a2>
 80023ca:	f5a2 22a0 	sub.w	r2, r2, #327680	; 0x50000
 80023ce:	3a03      	subs	r2, #3
 80023d0:	4293      	cmp	r3, r2
 80023d2:	f43f af7c 	beq.w	80022ce <decode_ID+0x8e>
 80023d6:	f102 1204 	add.w	r2, r2, #262148	; 0x40004
 80023da:	4293      	cmp	r3, r2
 80023dc:	d1a6      	bne.n	800232c <decode_ID+0xec>
			return 'W';
 80023de:	2057      	movs	r0, #87	; 0x57
 80023e0:	4770      	bx	lr
	switch(snippet){
 80023e2:	4a69      	ldr	r2, [pc, #420]	; (8002588 <decode_ID+0x348>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d0c9      	beq.n	800237c <decode_ID+0x13c>
 80023e8:	f502 22bf 	add.w	r2, r2, #391168	; 0x5f800
 80023ec:	f202 72fa 	addw	r2, r2, #2042	; 0x7fa
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d19b      	bne.n	800232c <decode_ID+0xec>
			return 'R';
 80023f4:	2052      	movs	r0, #82	; 0x52
 80023f6:	4770      	bx	lr
	switch(snippet){
 80023f8:	4a64      	ldr	r2, [pc, #400]	; (800258c <decode_ID+0x34c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f000 8164 	beq.w	80026c8 <decode_ID+0x488>
 8002400:	dc0a      	bgt.n	8002418 <decode_ID+0x1d8>
 8002402:	f5a2 229f 	sub.w	r2, r2, #325632	; 0x4f800
 8002406:	f2a2 72f7 	subw	r2, r2, #2039	; 0x7f7
 800240a:	4293      	cmp	r3, r2
 800240c:	f43f af3d 	beq.w	800228a <decode_ID+0x4a>
 8002410:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 8002414:	32f3      	adds	r2, #243	; 0xf3
 8002416:	e758      	b.n	80022ca <decode_ID+0x8a>
 8002418:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <decode_ID+0x350>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d0ea      	beq.n	80023f4 <decode_ID+0x1b4>
 800241e:	f502 229f 	add.w	r2, r2, #325632	; 0x4f800
 8002422:	f202 72f3 	addw	r2, r2, #2035	; 0x7f3
 8002426:	4293      	cmp	r3, r2
 8002428:	f000 8150 	beq.w	80026cc <decode_ID+0x48c>
 800242c:	f5a2 22bf 	sub.w	r2, r2, #391168	; 0x5f800
 8002430:	f2a2 72f6 	subw	r2, r2, #2038	; 0x7f6
 8002434:	e7d1      	b.n	80023da <decode_ID+0x19a>
 8002436:	4a57      	ldr	r2, [pc, #348]	; (8002594 <decode_ID+0x354>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d05c      	beq.n	80024f6 <decode_ID+0x2b6>
 800243c:	f300 80c0 	bgt.w	80025c0 <decode_ID+0x380>
 8002440:	f5a2 1224 	sub.w	r2, r2, #2686976	; 0x290000
 8002444:	3a57      	subs	r2, #87	; 0x57
 8002446:	4293      	cmp	r3, r2
 8002448:	d0d4      	beq.n	80023f4 <decode_ID+0x1b4>
 800244a:	dc3e      	bgt.n	80024ca <decode_ID+0x28a>
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <decode_ID+0x358>)
 800244e:	4293      	cmp	r3, r2
 8002450:	f000 8144 	beq.w	80026dc <decode_ID+0x49c>
 8002454:	dc1d      	bgt.n	8002492 <decode_ID+0x252>
 8002456:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800245a:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 800245e:	4293      	cmp	r3, r2
 8002460:	f43f af35 	beq.w	80022ce <decode_ID+0x8e>
 8002464:	dc08      	bgt.n	8002478 <decode_ID+0x238>
 8002466:	f5a2 22df 	sub.w	r2, r2, #456704	; 0x6f800
 800246a:	f2a2 7234 	subw	r2, r2, #1844	; 0x734
 800246e:	4293      	cmp	r3, r2
 8002470:	d0c0      	beq.n	80023f4 <decode_ID+0x1b4>
 8002472:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8002476:	e71f      	b.n	80022b8 <decode_ID+0x78>
 8002478:	4a48      	ldr	r2, [pc, #288]	; (800259c <decode_ID+0x35c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f000 8134 	beq.w	80026e8 <decode_ID+0x4a8>
 8002480:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002484:	f502 7281 	add.w	r2, r2, #258	; 0x102
 8002488:	4293      	cmp	r3, r2
 800248a:	f47f af4f 	bne.w	800232c <decode_ID+0xec>
			return 'K';
 800248e:	204b      	movs	r0, #75	; 0x4b
 8002490:	4770      	bx	lr
	switch(snippet){
 8002492:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <decode_ID+0x360>)
 8002494:	4293      	cmp	r3, r2
 8002496:	f000 811d 	beq.w	80026d4 <decode_ID+0x494>
 800249a:	dc0f      	bgt.n	80024bc <decode_ID+0x27c>
 800249c:	f5a2 22df 	sub.w	r2, r2, #456704	; 0x6f800
 80024a0:	f46f 60ff 	mvn.w	r0, #2040	; 0x7f8
 80024a4:	4402      	add	r2, r0
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f000 811c 	beq.w	80026e4 <decode_ID+0x4a4>
 80024ac:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80024b0:	3203      	adds	r2, #3
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f47f af3a 	bne.w	800232c <decode_ID+0xec>
			return 'Q';
 80024b8:	2051      	movs	r0, #81	; 0x51
 80024ba:	4770      	bx	lr
	switch(snippet){
 80024bc:	4a39      	ldr	r2, [pc, #228]	; (80025a4 <decode_ID+0x364>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f000 810a 	beq.w	80026d8 <decode_ID+0x498>
 80024c4:	f102 1206 	add.w	r2, r2, #393222	; 0x60006
 80024c8:	e792      	b.n	80023f0 <decode_ID+0x1b0>
 80024ca:	4a37      	ldr	r2, [pc, #220]	; (80025a8 <decode_ID+0x368>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d012      	beq.n	80024f6 <decode_ID+0x2b6>
 80024d0:	dc1f      	bgt.n	8002512 <decode_ID+0x2d2>
 80024d2:	4a36      	ldr	r2, [pc, #216]	; (80025ac <decode_ID+0x36c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f000 80fb 	beq.w	80026d0 <decode_ID+0x490>
 80024da:	dc0e      	bgt.n	80024fa <decode_ID+0x2ba>
 80024dc:	f5a2 3222 	sub.w	r2, r2, #165888	; 0x28800
 80024e0:	f46f 71d7 	mvn.w	r1, #430	; 0x1ae
 80024e4:	440a      	add	r2, r1
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d005      	beq.n	80024f6 <decode_ID+0x2b6>
 80024ea:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80024ee:	3203      	adds	r2, #3
 80024f0:	4293      	cmp	r3, r2
 80024f2:	f47f af1b 	bne.w	800232c <decode_ID+0xec>
			return 'T';
 80024f6:	2054      	movs	r0, #84	; 0x54
 80024f8:	4770      	bx	lr
	switch(snippet){
 80024fa:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <decode_ID+0x370>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	f000 80f3 	beq.w	80026e8 <decode_ID+0x4a8>
 8002502:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002506:	3203      	adds	r2, #3
 8002508:	4293      	cmp	r3, r2
 800250a:	f47f af0f 	bne.w	800232c <decode_ID+0xec>
			return 'N';
 800250e:	204e      	movs	r0, #78	; 0x4e
 8002510:	4770      	bx	lr
	switch(snippet){
 8002512:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <decode_ID+0x374>)
 8002514:	4293      	cmp	r3, r2
 8002516:	f000 80db 	beq.w	80026d0 <decode_ID+0x490>
 800251a:	dc06      	bgt.n	800252a <decode_ID+0x2ea>
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <decode_ID+0x378>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d076      	beq.n	8002610 <decode_ID+0x3d0>
 8002522:	f502 42ed 	add.w	r2, r2, #30336	; 0x7680
 8002526:	320a      	adds	r2, #10
 8002528:	e7e2      	b.n	80024f0 <decode_ID+0x2b0>
 800252a:	4a24      	ldr	r2, [pc, #144]	; (80025bc <decode_ID+0x37c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d06f      	beq.n	8002610 <decode_ID+0x3d0>
 8002530:	f502 321d 	add.w	r2, r2, #160768	; 0x27400
 8002534:	f502 722b 	add.w	r2, r2, #684	; 0x2ac
 8002538:	e7da      	b.n	80024f0 <decode_ID+0x2b0>
 800253a:	bf00      	nop
 800253c:	007c9565 	.word	0x007c9565
 8002540:	00191f8a 	.word	0x00191f8a
 8002544:	000f1f9c 	.word	0x000f1f9c
 8002548:	00041f97 	.word	0x00041f97
 800254c:	0002951b 	.word	0x0002951b
 8002550:	0003951a 	.word	0x0003951a
 8002554:	00051f96 	.word	0x00051f96
 8002558:	000e1f9d 	.word	0x000e1f9d
 800255c:	0016950f 	.word	0x0016950f
 8002560:	0017950e 	.word	0x0017950e
 8002564:	002a9533 	.word	0x002a9533
 8002568:	0025953c 	.word	0x0025953c
 800256c:	00389521 	.word	0x00389521
 8002570:	00399520 	.word	0x00399520
 8002574:	00619578 	.word	0x00619578
 8002578:	004d9554 	.word	0x004d9554
 800257c:	005b9542 	.word	0x005b9542
 8002580:	005c9545 	.word	0x005c9545
 8002584:	006e9674 	.word	0x006e9674
 8002588:	0067967d 	.word	0x0067967d
 800258c:	0074956d 	.word	0x0074956d
 8002590:	0076956f 	.word	0x0076956f
 8002594:	00c195d8 	.word	0x00c195d8
 8002598:	0086969c 	.word	0x0086969c
 800259c:	0084959d 	.word	0x0084959d
 80025a0:	00909589 	.word	0x00909589
 80025a4:	00919588 	.word	0x00919588
 80025a8:	00b295ab 	.word	0x00b295ab
 80025ac:	00a01f33 	.word	0x00a01f33
 80025b0:	00ab95b2 	.word	0x00ab95b2
 80025b4:	00bd1f2e 	.word	0x00bd1f2e
 80025b8:	00b31f20 	.word	0x00b31f20
 80025bc:	00be1f2d 	.word	0x00be1f2d
 80025c0:	4a4a      	ldr	r2, [pc, #296]	; (80026ec <decode_ID+0x4ac>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d05b      	beq.n	800267e <decode_ID+0x43e>
 80025c6:	dc43      	bgt.n	8002650 <decode_ID+0x410>
 80025c8:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 80025cc:	3a0e      	subs	r2, #14
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d012      	beq.n	80025f8 <decode_ID+0x3b8>
 80025d2:	dc1f      	bgt.n	8002614 <decode_ID+0x3d4>
 80025d4:	f5a2 2228 	sub.w	r2, r2, #688128	; 0xa8000
 80025d8:	f6a2 1263 	subw	r2, r2, #2403	; 0x963
 80025dc:	4293      	cmp	r3, r2
 80025de:	d096      	beq.n	800250e <decode_ID+0x2ce>
 80025e0:	dc0c      	bgt.n	80025fc <decode_ID+0x3bc>
 80025e2:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 80025e6:	3aff      	subs	r2, #255	; 0xff
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d02f      	beq.n	800264c <decode_ID+0x40c>
 80025ec:	f502 4209 	add.w	r2, r2, #35072	; 0x8900
 80025f0:	3275      	adds	r2, #117	; 0x75
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f47f ae9a 	bne.w	800232c <decode_ID+0xec>
			return 'V';
 80025f8:	2056      	movs	r0, #86	; 0x56
 80025fa:	4770      	bx	lr
	switch(snippet){
 80025fc:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <decode_ID+0x4b0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d06e      	beq.n	80026e0 <decode_ID+0x4a0>
 8002602:	f502 220f 	add.w	r2, r2, #585728	; 0x8f000
 8002606:	f602 72e7 	addw	r2, r2, #4071	; 0xfe7
 800260a:	4293      	cmp	r3, r2
 800260c:	f47f ae8e 	bne.w	800232c <decode_ID+0xec>
			return 'G';
 8002610:	2047      	movs	r0, #71	; 0x47
 8002612:	4770      	bx	lr
	switch(snippet){
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <decode_ID+0x4b4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	f43f af79 	beq.w	800250e <decode_ID+0x2ce>
 800261c:	dc0d      	bgt.n	800263a <decode_ID+0x3fa>
 800261e:	f5a2 22bf 	sub.w	r2, r2, #391168	; 0x5f800
 8002622:	f2a2 72f6 	subw	r2, r2, #2038	; 0x7f6
 8002626:	4293      	cmp	r3, r2
 8002628:	d05e      	beq.n	80026e8 <decode_ID+0x4a8>
 800262a:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 800262e:	32ff      	adds	r2, #255	; 0xff
 8002630:	4293      	cmp	r3, r2
 8002632:	f47f ae7b 	bne.w	800232c <decode_ID+0xec>
			return 'B';
 8002636:	2042      	movs	r0, #66	; 0x42
 8002638:	4770      	bx	lr
	switch(snippet){
 800263a:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <decode_ID+0x4b8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01e      	beq.n	800267e <decode_ID+0x43e>
 8002640:	f502 42ec 	add.w	r2, r2, #30208	; 0x7600
 8002644:	327a      	adds	r2, #122	; 0x7a
 8002646:	4293      	cmp	r3, r2
 8002648:	f47f ae70 	bne.w	800232c <decode_ID+0xec>
			return 'L';
 800264c:	204c      	movs	r0, #76	; 0x4c
 800264e:	4770      	bx	lr
	switch(snippet){
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <decode_ID+0x4bc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d0ef      	beq.n	8002636 <decode_ID+0x3f6>
 8002656:	dc1b      	bgt.n	8002690 <decode_ID+0x450>
 8002658:	f5a2 22e0 	sub.w	r2, r2, #458752	; 0x70000
 800265c:	3a05      	subs	r2, #5
 800265e:	4293      	cmp	r3, r2
 8002660:	f43f af55 	beq.w	800250e <decode_ID+0x2ce>
 8002664:	dc0d      	bgt.n	8002682 <decode_ID+0x442>
 8002666:	f5a2 321d 	sub.w	r2, r2, #160768	; 0x27400
 800266a:	f5a2 721f 	sub.w	r2, r2, #636	; 0x27c
 800266e:	4293      	cmp	r3, r2
 8002670:	d036      	beq.n	80026e0 <decode_ID+0x4a0>
 8002672:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 8002676:	32ff      	adds	r2, #255	; 0xff
 8002678:	4293      	cmp	r3, r2
 800267a:	f47f ae57 	bne.w	800232c <decode_ID+0xec>
			return 'U';
 800267e:	2055      	movs	r0, #85	; 0x55
 8002680:	4770      	bx	lr
	switch(snippet){
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <decode_ID+0x4c0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d0e1      	beq.n	800264c <decode_ID+0x40c>
 8002688:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
 800268c:	3207      	adds	r2, #7
 800268e:	e73b      	b.n	8002508 <decode_ID+0x2c8>
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <decode_ID+0x4c4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d0f3      	beq.n	800267e <decode_ID+0x43e>
 8002696:	dc09      	bgt.n	80026ac <decode_ID+0x46c>
 8002698:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 800269c:	3a06      	subs	r2, #6
 800269e:	4293      	cmp	r3, r2
 80026a0:	f43f adfb 	beq.w	800229a <decode_ID+0x5a>
 80026a4:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 80026a8:	32ff      	adds	r2, #255	; 0xff
 80026aa:	e5f4      	b.n	8002296 <decode_ID+0x56>
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <decode_ID+0x4c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f43f af2d 	beq.w	800250e <decode_ID+0x2ce>
 80026b4:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 80026b8:	32ff      	adds	r2, #255	; 0xff
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d0c6      	beq.n	800264c <decode_ID+0x40c>
 80026be:	f5a2 321d 	sub.w	r2, r2, #160768	; 0x27400
 80026c2:	f5a2 721f 	sub.w	r2, r2, #636	; 0x27c
 80026c6:	e5e6      	b.n	8002296 <decode_ID+0x56>
			return 'C';
 80026c8:	2043      	movs	r0, #67	; 0x43
 80026ca:	4770      	bx	lr
			return 'F';
 80026cc:	2046      	movs	r0, #70	; 0x46
 80026ce:	4770      	bx	lr
			return 'H';
 80026d0:	2048      	movs	r0, #72	; 0x48
 80026d2:	4770      	bx	lr
			return 'J';
 80026d4:	204a      	movs	r0, #74	; 0x4a
 80026d6:	4770      	bx	lr
			return 'M';
 80026d8:	204d      	movs	r0, #77	; 0x4d
 80026da:	4770      	bx	lr
			return 'P';
 80026dc:	2050      	movs	r0, #80	; 0x50
 80026de:	4770      	bx	lr
			return 'Y';
 80026e0:	2059      	movs	r0, #89	; 0x59
 80026e2:	4770      	bx	lr
			return 'Z';
 80026e4:	205a      	movs	r0, #90	; 0x5a
 80026e6:	4770      	bx	lr
			return 'A';
 80026e8:	2041      	movs	r0, #65	; 0x41
	}
}
 80026ea:	4770      	bx	lr
 80026ec:	00dc1f4f 	.word	0x00dc1f4f
 80026f0:	00c81f5b 	.word	0x00c81f5b
 80026f4:	00da95c3 	.word	0x00da95c3
 80026f8:	00db1f48 	.word	0x00db1f48
 80026fc:	00ef95f6 	.word	0x00ef95f6
 8002700:	00e995f0 	.word	0x00e995f0
 8002704:	00fa1f69 	.word	0x00fa1f69
 8002708:	00fc95e5 	.word	0x00fc95e5

0800270c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Transmit one byte with 100 ms timeout */
	if(in == '1'){
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_UART_RxCpltCallback+0x1c>)
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_UART_RxCpltCallback+0x20>)
 8002712:	2a31      	cmp	r2, #49	; 0x31
 8002714:	d102      	bne.n	800271c <HAL_UART_RxCpltCallback+0x10>
		check = valid;
 8002716:	2201      	movs	r2, #1
	}
	else if(in == '0'){
		check = invalid;
	}
	else{
		check = error;
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	4770      	bx	lr
	else if(in == '0'){
 800271c:	2a30      	cmp	r2, #48	; 0x30
		check = invalid;
 800271e:	bf0c      	ite	eq
 8002720:	2202      	moveq	r2, #2
		check = error;
 8002722:	2203      	movne	r2, #3
 8002724:	e7f8      	b.n	8002718 <HAL_UART_RxCpltCallback+0xc>
 8002726:	bf00      	nop
 8002728:	2000025c 	.word	0x2000025c
 800272c:	200001c8 	.word	0x200001c8

08002730 <LED_On>:

}

/* USER CODE BEGIN 4 */
void LED_On(uint8_t led){
	switch(led){
 8002730:	2803      	cmp	r0, #3
 8002732:	d815      	bhi.n	8002760 <LED_On+0x30>
 8002734:	e8df f000 	tbb	[pc, r0]
 8002738:	100c0802 	.word	0x100c0802
		case LED_GREEN: 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
					break;
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
					break;
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
					break;
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002742:	4808      	ldr	r0, [pc, #32]	; (8002764 <LED_On+0x34>)
 8002744:	f7fe b8e0 	b.w	8000908 <HAL_GPIO_WritePin>
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800274e:	e7f8      	b.n	8002742 <LED_On+0x12>
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002750:	2201      	movs	r2, #1
 8002752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002756:	e7f4      	b.n	8002742 <LED_On+0x12>
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800275e:	e7f0      	b.n	8002742 <LED_On+0x12>
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40020c00 	.word	0x40020c00

08002768 <LED_Off>:
					break;
	}
}

void LED_Off(uint8_t led){
	switch(led){
 8002768:	2803      	cmp	r0, #3
 800276a:	d815      	bhi.n	8002798 <LED_Off+0x30>
 800276c:	e8df f000 	tbb	[pc, r0]
 8002770:	100c0802 	.word	0x100c0802
		case LED_GREEN:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
					break;
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
					break;
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
					break;
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800277a:	4808      	ldr	r0, [pc, #32]	; (800279c <LED_Off+0x34>)
 800277c:	f7fe b8c4 	b.w	8000908 <HAL_GPIO_WritePin>
		case LED_RED:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002786:	e7f8      	b.n	800277a <LED_Off+0x12>
		case LED_BLUE:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002788:	2200      	movs	r2, #0
 800278a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278e:	e7f4      	b.n	800277a <LED_Off+0x12>
		case LED_ORANGE:	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002796:	e7f0      	b.n	800277a <LED_Off+0x12>
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40020c00 	.word	0x40020c00

080027a0 <HAL_TIM_PeriodElapsedCallback>:
					break;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	count++;
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x14>)
	if(count > 1000000){
 80027a2:	4905      	ldr	r1, [pc, #20]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x18>)
	count++;
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	3301      	adds	r3, #1
	if(count > 1000000){
 80027a8:	428b      	cmp	r3, r1
		count = 0;
 80027aa:	bfc8      	it	gt
 80027ac:	2300      	movgt	r3, #0
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200001cc 	.word	0x200001cc
 80027b8:	000f4240 	.word	0x000f4240

080027bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027bc:	b508      	push	{r3, lr}
		case LED_GREEN:		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c4:	4806      	ldr	r0, [pc, #24]	; (80027e0 <Error_Handler+0x24>)
 80027c6:	f7fe f89f 	bl	8000908 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	LED_Off(LED_GREEN);
	LED_Off(LED_BLUE);
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7ff ffcc 	bl	8002768 <LED_Off>
	LED_Off(LED_ORANGE);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f7ff ffc9 	bl	8002768 <LED_Off>
	LED_On(LED_RED);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f7ff ffaa 	bl	8002730 <LED_On>
 80027dc:	e7fe      	b.n	80027dc <Error_Handler+0x20>
 80027de:	bf00      	nop
 80027e0:	40020c00 	.word	0x40020c00

080027e4 <SystemClock_Config>:
{
 80027e4:	b510      	push	{r4, lr}
 80027e6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e8:	2230      	movs	r2, #48	; 0x30
 80027ea:	2100      	movs	r1, #0
 80027ec:	a808      	add	r0, sp, #32
 80027ee:	f000 ff2d 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f2:	2214      	movs	r2, #20
 80027f4:	2100      	movs	r1, #0
 80027f6:	a803      	add	r0, sp, #12
 80027f8:	f000 ff28 	bl	800364c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <SystemClock_Config+0x98>)
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002804:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002808:	6411      	str	r1, [r2, #64]	; 0x40
 800280a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800280c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002810:	9201      	str	r2, [sp, #4]
 8002812:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <SystemClock_Config+0x9c>)
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	6811      	ldr	r1, [r2, #0]
 800281a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800281e:	6011      	str	r1, [r2, #0]
 8002820:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002822:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002824:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002828:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800282a:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800282c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800282e:	2332      	movs	r3, #50	; 0x32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002830:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002832:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002834:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002836:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002838:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800283a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800283c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800283e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002840:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002842:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002844:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002846:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002848:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800284a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800284c:	f7fe f862 	bl	8000914 <HAL_RCC_OscConfig>
 8002850:	4601      	mov	r1, r0
 8002852:	b108      	cbz	r0, 8002858 <SystemClock_Config+0x74>
    Error_Handler();
 8002854:	f7ff ffb2 	bl	80027bc <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002858:	230f      	movs	r3, #15
 800285a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800285c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002860:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002862:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002864:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800286c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800286e:	f7fe fa01 	bl	8000c74 <HAL_RCC_ClockConfig>
 8002872:	2800      	cmp	r0, #0
 8002874:	d1ee      	bne.n	8002854 <SystemClock_Config+0x70>
}
 8002876:	b014      	add	sp, #80	; 0x50
 8002878:	bd10      	pop	{r4, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000

08002884 <main>:
{
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	b09d      	sub	sp, #116	; 0x74
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288a:	ac15      	add	r4, sp, #84	; 0x54
  HAL_Init();
 800288c:	f7fd fe9c 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8002890:	f7ff ffa8 	bl	80027e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	2214      	movs	r2, #20
 8002896:	2100      	movs	r1, #0
 8002898:	4620      	mov	r0, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800289a:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f000 fed6 	bl	800364c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a0:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <main+0x230>)
 80028a2:	950d      	str	r5, [sp, #52]	; 0x34
 80028a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80028a6:	4884      	ldr	r0, [pc, #528]	; (8002ab8 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a8:	f8df b228 	ldr.w	fp, [pc, #552]	; 8002ad4 <main+0x250>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ac:	f042 0210 	orr.w	r2, r2, #16
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	f002 0210 	and.w	r2, r2, #16
 80028b8:	920d      	str	r2, [sp, #52]	; 0x34
 80028ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	950e      	str	r5, [sp, #56]	; 0x38
 80028be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c0:	f042 0204 	orr.w	r2, r2, #4
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	f002 0204 	and.w	r2, r2, #4
 80028cc:	920e      	str	r2, [sp, #56]	; 0x38
 80028ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d0:	950f      	str	r5, [sp, #60]	; 0x3c
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
 80028da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80028e0:	920f      	str	r2, [sp, #60]	; 0x3c
 80028e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	9510      	str	r5, [sp, #64]	; 0x40
 80028e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	f002 0201 	and.w	r2, r2, #1
 80028f4:	9210      	str	r2, [sp, #64]	; 0x40
 80028f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	9511      	str	r5, [sp, #68]	; 0x44
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	f042 0202 	orr.w	r2, r2, #2
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
 8002902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002904:	f002 0202 	and.w	r2, r2, #2
 8002908:	9211      	str	r2, [sp, #68]	; 0x44
 800290a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290c:	9512      	str	r5, [sp, #72]	; 0x48
 800290e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002910:	f042 0208 	orr.w	r2, r2, #8
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800291e:	462a      	mov	r2, r5
 8002920:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002924:	f7fd fff0 	bl	8000908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002928:	462a      	mov	r2, r5
 800292a:	f240 3101 	movw	r1, #769	; 0x301
 800292e:	4863      	ldr	r0, [pc, #396]	; (8002abc <main+0x238>)
 8002930:	f7fd ffea 	bl	8000908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002934:	462a      	mov	r2, r5
 8002936:	2110      	movs	r1, #16
 8002938:	4861      	ldr	r0, [pc, #388]	; (8002ac0 <main+0x23c>)
 800293a:	f7fd ffe5 	bl	8000908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800293e:	462a      	mov	r2, r5
 8002940:	2110      	movs	r1, #16
 8002942:	4860      	ldr	r0, [pc, #384]	; (8002ac4 <main+0x240>)
 8002944:	f7fd ffe0 	bl	8000908 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002948:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800294a:	2708      	movs	r7, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294c:	4621      	mov	r1, r4
 800294e:	485a      	ldr	r0, [pc, #360]	; (8002ab8 <main+0x234>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002950:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002952:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002958:	f7fd fef0 	bl	800073c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	4621      	mov	r1, r4
 800295e:	4857      	ldr	r0, [pc, #348]	; (8002abc <main+0x238>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002960:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002966:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f7fd fee6 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002970:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002972:	4621      	mov	r1, r4
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002974:	2705      	movs	r7, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002976:	4851      	ldr	r0, [pc, #324]	; (8002abc <main+0x238>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800297c:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	f7fd fedb 	bl	800073c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	4621      	mov	r1, r4
 8002988:	484d      	ldr	r0, [pc, #308]	; (8002ac0 <main+0x23c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800298a:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800298c:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002990:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f7fd fed1 	bl	800073c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	4621      	mov	r1, r4
 800299c:	4848      	ldr	r0, [pc, #288]	; (8002ac0 <main+0x23c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800299e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029a2:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f7fd fec7 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ae:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	4621      	mov	r1, r4
 80029b2:	4845      	ldr	r0, [pc, #276]	; (8002ac8 <main+0x244>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b4:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b6:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ba:	f7fd febf 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c2:	4621      	mov	r1, r4
 80029c4:	483c      	ldr	r0, [pc, #240]	; (8002ab8 <main+0x234>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029c6:	9315      	str	r3, [sp, #84]	; 0x54
 80029c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ca:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029cc:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029ce:	f7fd feb5 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	4621      	mov	r1, r4
 80029d8:	483b      	ldr	r0, [pc, #236]	; (8002ac8 <main+0x244>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029da:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029e0:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	f7fd fea9 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80029ea:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80029ee:	9215      	str	r2, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f0:	4621      	mov	r1, r4
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029f2:	2206      	movs	r2, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f4:	4831      	ldr	r0, [pc, #196]	; (8002abc <main+0x238>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029fe:	9219      	str	r2, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a04:	f7fd fe9a 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a08:	f44f 7240 	mov.w	r2, #768	; 0x300
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	482b      	ldr	r0, [pc, #172]	; (8002abc <main+0x238>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a10:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a16:	f44f 7700 	mov.w	r7, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1e:	f7fd fe8d 	bl	800073c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	4621      	mov	r1, r4
 8002a24:	4826      	ldr	r0, [pc, #152]	; (8002ac0 <main+0x23c>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a26:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a28:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f7fd fe86 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	4621      	mov	r1, r4
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a38:	f04f 0a0a 	mov.w	sl, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	4820      	ldr	r0, [pc, #128]	; (8002ac0 <main+0x23c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a3e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a46:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f7fd fe77 	bl	800073c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4e:	4621      	mov	r1, r4
 8002a50:	481c      	ldr	r0, [pc, #112]	; (8002ac4 <main+0x240>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a52:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f7fd fe6e 	bl	800073c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a60:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a62:	4621      	mov	r1, r4
 8002a64:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <main+0x240>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a66:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a68:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6c:	f7fd fe66 	bl	800073c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a70:	4621      	mov	r1, r4
 8002a72:	4811      	ldr	r0, [pc, #68]	; (8002ab8 <main+0x234>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a74:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a78:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a7e:	f7fd fe5d 	bl	800073c <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8002a82:	4812      	ldr	r0, [pc, #72]	; (8002acc <main+0x248>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <main+0x24c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a86:	6085      	str	r5, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a88:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8002a8c:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a90:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a92:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a94:	6105      	str	r5, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a96:	6145      	str	r5, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a98:	6187      	str	r7, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a9a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9c:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9e:	6245      	str	r5, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	6285      	str	r5, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aa2:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa6:	f7fe f9f6 	bl	8000e96 <HAL_SPI_Init>
 8002aaa:	4680      	mov	r8, r0
 8002aac:	b1a0      	cbz	r0, 8002ad8 <main+0x254>
    Error_Handler();
 8002aae:	f7ff fe85 	bl	80027bc <Error_Handler>
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	20000204 	.word	0x20000204
 8002ad0:	40013000 	.word	0x40013000
 8002ad4:	10110000 	.word	0x10110000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad8:	4601      	mov	r1, r0
 8002ada:	464a      	mov	r2, r9
 8002adc:	4620      	mov	r0, r4
 8002ade:	f000 fdb5 	bl	800364c <memset>
  htim3.Instance = TIM3;
 8002ae2:	4db6      	ldr	r5, [pc, #728]	; (8002dbc <main+0x538>)
  htim3.Init.Prescaler = 625-1;
 8002ae4:	49b6      	ldr	r1, [pc, #728]	; (8002dc0 <main+0x53c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  htim3.Init.Prescaler = 625-1;
 8002aea:	f44f 731c 	mov.w	r3, #624	; 0x270
 8002aee:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002af2:	4628      	mov	r0, r5
  htim3.Init.Period = 10-1;
 8002af4:	2309      	movs	r3, #9
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	f8c5 8008 	str.w	r8, [r5, #8]
  htim3.Init.Period = 10-1;
 8002afe:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	f8c5 8010 	str.w	r8, [r5, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b04:	f7fe fd6c 	bl	80015e0 <HAL_TIM_Base_Init>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d1d0      	bne.n	8002aae <main+0x22a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b10:	4621      	mov	r1, r4
 8002b12:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b14:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b16:	f7fe fba0 	bl	800125a <HAL_TIM_ConfigClockSource>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d1c7      	bne.n	8002aae <main+0x22a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1e:	9013      	str	r0, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b22:	a913      	add	r1, sp, #76	; 0x4c
 8002b24:	4628      	mov	r0, r5
 8002b26:	f7fe fd75 	bl	8001614 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d1bf      	bne.n	8002aae <main+0x22a>
  huart5.Instance = UART5;
 8002b2e:	4da5      	ldr	r5, [pc, #660]	; (8002dc4 <main+0x540>)
  huart5.Init.BaudRate = 115200;
 8002b30:	4aa5      	ldr	r2, [pc, #660]	; (8002dc8 <main+0x544>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	60a8      	str	r0, [r5, #8]
  huart5.Init.BaudRate = 115200;
 8002b34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002b38:	e885 000c 	stmia.w	r5, {r2, r3}
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b3c:	60e8      	str	r0, [r5, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b3e:	6128      	str	r0, [r5, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b40:	230c      	movs	r3, #12
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b42:	61a8      	str	r0, [r5, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b46:	4628      	mov	r0, r5
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b48:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b4a:	f7fe fed7 	bl	80018fc <HAL_UART_Init>
 8002b4e:	4680      	mov	r8, r0
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d1ac      	bne.n	8002aae <main+0x22a>
  nss_inactive();
 8002b54:	f000 fa6a 	bl	800302c <nss_inactive>
  CLR_RS;
 8002b58:	4642      	mov	r2, r8
 8002b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5e:	489b      	ldr	r0, [pc, #620]	; (8002dcc <main+0x548>)
 8002b60:	f7fd fed2 	bl	8000908 <HAL_GPIO_WritePin>
  SET_CS;
 8002b64:	4632      	mov	r2, r6
 8002b66:	4639      	mov	r1, r7
 8002b68:	4898      	ldr	r0, [pc, #608]	; (8002dcc <main+0x548>)
	if(check != init){
 8002b6a:	4f99      	ldr	r7, [pc, #612]	; (8002dd0 <main+0x54c>)
  SET_CS;
 8002b6c:	f7fd fecc 	bl	8000908 <HAL_GPIO_WritePin>
  MFRC522_Init();
 8002b70:	f000 facf 	bl	8003112 <MFRC522_Init>
  Initialize_CFAH2004AP();
 8002b74:	f7ff f8a4 	bl	8001cc0 <Initialize_CFAH2004AP>
  Initialize_CGRAM();
 8002b78:	f7ff f8b2 	bl	8001ce0 <Initialize_CGRAM>
  struct letter_info placed_word[9] = {0};
 8002b7c:	221b      	movs	r2, #27
 8002b7e:	4641      	mov	r1, r8
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 fd63 	bl	800364c <memset>
  HAL_Delay(1);
 8002b86:	4630      	mov	r0, r6
 8002b88:	f7fd fd4a 	bl	8000620 <HAL_Delay>
  HAL_UART_Transmit(&huart5, reset_board, 83, 1000);
 8002b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b90:	2253      	movs	r2, #83	; 0x53
 8002b92:	4990      	ldr	r1, [pc, #576]	; (8002dd4 <main+0x550>)
 8002b94:	4628      	mov	r0, r5
 8002b96:	f7fe fedf 	bl	8001958 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart5, &in, 1);
 8002b9a:	4632      	mov	r2, r6
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	498e      	ldr	r1, [pc, #568]	; (8002dd8 <main+0x554>)
	sprintf(string_1, "  Setting up Wi-Fi  ");
 8002ba0:	4e8e      	ldr	r6, [pc, #568]	; (8002ddc <main+0x558>)
 8002ba2:	4d8f      	ldr	r5, [pc, #572]	; (8002de0 <main+0x55c>)
  HAL_UART_Receive_IT(&huart5, &in, 1);
 8002ba4:	f7fe ff35 	bl	8001a12 <HAL_UART_Receive_IT>
	if(check != init){
 8002ba8:	783b      	ldrb	r3, [r7, #0]
 8002baa:	b97b      	cbnz	r3, 8002bcc <main+0x348>
	sprintf(string_1, "  Setting up Wi-Fi  ");
 8002bac:	4631      	mov	r1, r6
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f000 fd78 	bl	80036a4 <strcpy>
	sprintf(string_2, "Connection, plz wait");
 8002bb4:	498b      	ldr	r1, [pc, #556]	; (8002de4 <main+0x560>)
 8002bb6:	488c      	ldr	r0, [pc, #560]	; (8002de8 <main+0x564>)
 8002bb8:	f000 fd74 	bl	80036a4 <strcpy>
	display_two_lines(string_1, string_2);
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	498a      	ldr	r1, [pc, #552]	; (8002de8 <main+0x564>)
 8002bc0:	f7ff f8bc 	bl	8001d3c <display_two_lines>
	HAL_Delay(100);
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	f7fd fd2b 	bl	8000620 <HAL_Delay>
	if(check != init){
 8002bca:	e7ed      	b.n	8002ba8 <main+0x324>
	  curr_state = state_error;
 8002bcc:	2b01      	cmp	r3, #1
  uint8_t word_len = 0;
 8002bce:	f04f 0900 	mov.w	r9, #0
  uint8_t col = 1;
 8002bd2:	f04f 0601 	mov.w	r6, #1
  HAL_UART_Receive_IT(&huart5, &in, 1);
 8002bd6:	f04f 0201 	mov.w	r2, #1
 8002bda:	497f      	ldr	r1, [pc, #508]	; (8002dd8 <main+0x554>)
 8002bdc:	4879      	ldr	r0, [pc, #484]	; (8002dc4 <main+0x540>)
			player_scores[curr_player-1] += score_gain;
 8002bde:	f8df b244 	ldr.w	fp, [pc, #580]	; 8002e24 <main+0x5a0>
	  curr_state = state_error;
 8002be2:	bf0c      	ite	eq
 8002be4:	2500      	moveq	r5, #0
 8002be6:	2507      	movne	r5, #7
  uint8_t row = 1;
 8002be8:	4637      	mov	r7, r6
  HAL_UART_Receive_IT(&huart5, &in, 1);
 8002bea:	f7fe ff12 	bl	8001a12 <HAL_UART_Receive_IT>
  uint8_t curr_player = 1;
 8002bee:	46b2      	mov	sl, r6
  char board_letter = '\0';
 8002bf0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  char letter = '\0';
 8002bf4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  uint8_t num_players = 2;
 8002bf8:	f04f 0802 	mov.w	r8, #2
	if(curr_state == start){
 8002bfc:	bb4d      	cbnz	r5, 8002c52 <main+0x3ce>
		if(check_but(up) && num_players < 4){
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f7ff f8dc 	bl	8001dbc <check_but>
 8002c04:	b188      	cbz	r0, 8002c2a <main+0x3a6>
 8002c06:	f1b8 0f03 	cmp.w	r8, #3
 8002c0a:	d80e      	bhi.n	8002c2a <main+0x3a6>
			num_players++;
 8002c0c:	f108 0801 	add.w	r8, r8, #1
			num_players--;
 8002c10:	fa5f f888 	uxtb.w	r8, r8
		sprintf(string_1, "  select number of  ");
 8002c14:	4975      	ldr	r1, [pc, #468]	; (8002dec <main+0x568>)
 8002c16:	4872      	ldr	r0, [pc, #456]	; (8002de0 <main+0x55c>)
 8002c18:	f000 fd44 	bl	80036a4 <strcpy>
		sprintf(string_2, "  players: %d        ", num_players);
 8002c1c:	4974      	ldr	r1, [pc, #464]	; (8002df0 <main+0x56c>)
 8002c1e:	4642      	mov	r2, r8
		sprintf(string_2, "  you done Y/N?  %c   ", letter);
 8002c20:	4871      	ldr	r0, [pc, #452]	; (8002de8 <main+0x564>)
 8002c22:	f000 fd1b 	bl	800365c <siprintf>
 8002c26:	e03a      	b.n	8002c9e <main+0x41a>
 8002c28:	e7fe      	b.n	8002c28 <main+0x3a4>
		else if(check_but(down) && num_players > 2){
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff f8c6 	bl	8001dbc <check_but>
 8002c30:	b128      	cbz	r0, 8002c3e <main+0x3ba>
 8002c32:	f1b8 0f02 	cmp.w	r8, #2
 8002c36:	d002      	beq.n	8002c3e <main+0x3ba>
			num_players--;
 8002c38:	f108 38ff 	add.w	r8, r8, #4294967295
 8002c3c:	e7e8      	b.n	8002c10 <main+0x38c>
 8002c3e:	f7ff f871 	bl	8001d24 <check_but.part.0>
		else if(check_but(enter)){
 8002c42:	4605      	mov	r5, r0
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d0e5      	beq.n	8002c14 <main+0x390>
			HAL_Delay(200);
 8002c48:	20c8      	movs	r0, #200	; 0xc8
 8002c4a:	f7fd fce9 	bl	8000620 <HAL_Delay>
			curr_state = scan;
 8002c4e:	2501      	movs	r5, #1
 8002c50:	e7e0      	b.n	8002c14 <main+0x390>
	else if(curr_state == scan){
 8002c52:	2d01      	cmp	r5, #1
 8002c54:	d14e      	bne.n	8002cf4 <main+0x470>
		MFRC522_Status_t status = MFRC522_Check(CardID);
 8002c56:	4867      	ldr	r0, [pc, #412]	; (8002df4 <main+0x570>)
			sprintf(string_1, " P1: %03d    P2: %03d ", player_scores[0], player_scores[1]);
 8002c58:	4e67      	ldr	r6, [pc, #412]	; (8002df8 <main+0x574>)
 8002c5a:	4d61      	ldr	r5, [pc, #388]	; (8002de0 <main+0x55c>)
		MFRC522_Status_t status = MFRC522_Check(CardID);
 8002c5c:	f000 fb8e 	bl	800337c <MFRC522_Check>
		while(status != MI_OK){
 8002c60:	bb28      	cbnz	r0, 8002cae <main+0x42a>
		board_letter = decode_ID(CardID);
 8002c62:	4864      	ldr	r0, [pc, #400]	; (8002df4 <main+0x570>)
 8002c64:	f7ff faec 	bl	8002240 <decode_ID>
 8002c68:	900a      	str	r0, [sp, #40]	; 0x28
		HAL_Delay(200);
 8002c6a:	20c8      	movs	r0, #200	; 0xc8
 8002c6c:	f7fd fcd8 	bl	8000620 <HAL_Delay>
		col = 1;
 8002c70:	2601      	movs	r6, #1
		row = 1;
 8002c72:	4637      	mov	r7, r6
		curr_state = place_row;
 8002c74:	2502      	movs	r5, #2
		if(check_but(up) && row < 9){
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7ff f8a0 	bl	8001dbc <check_but>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d048      	beq.n	8002d12 <main+0x48e>
 8002c80:	2f08      	cmp	r7, #8
 8002c82:	d846      	bhi.n	8002d12 <main+0x48e>
			row++;
 8002c84:	3701      	adds	r7, #1
			row--;
 8002c86:	b2ff      	uxtb	r7, r7
		sprintf(string_1, "Letter %c: select row", board_letter);
 8002c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c8a:	495c      	ldr	r1, [pc, #368]	; (8002dfc <main+0x578>)
		sprintf(string_1, "Letter %c: select col", board_letter);
 8002c8c:	4854      	ldr	r0, [pc, #336]	; (8002de0 <main+0x55c>)
 8002c8e:	f000 fce5 	bl	800365c <siprintf>
		sprintf(string_2, "row: %d, col:%d       ", row, col);
 8002c92:	4633      	mov	r3, r6
 8002c94:	463a      	mov	r2, r7
 8002c96:	495a      	ldr	r1, [pc, #360]	; (8002e00 <main+0x57c>)
 8002c98:	4853      	ldr	r0, [pc, #332]	; (8002de8 <main+0x564>)
 8002c9a:	f000 fcdf 	bl	800365c <siprintf>
		display_two_lines(string_1, string_2);
 8002c9e:	4952      	ldr	r1, [pc, #328]	; (8002de8 <main+0x564>)
 8002ca0:	484f      	ldr	r0, [pc, #316]	; (8002de0 <main+0x55c>)
 8002ca2:	f7ff f84b 	bl	8001d3c <display_two_lines>
		HAL_Delay(50);
 8002ca6:	2032      	movs	r0, #50	; 0x32
 8002ca8:	f7fd fcba 	bl	8000620 <HAL_Delay>
 8002cac:	e7a6      	b.n	8002bfc <main+0x378>
			sprintf(string_1, " P1: %03d    P2: %03d ", player_scores[0], player_scores[1]);
 8002cae:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8002cb2:	f89b 2000 	ldrb.w	r2, [fp]
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 fccf 	bl	800365c <siprintf>
			sprintf(string_2, "  Player %d: please  ", curr_player);
 8002cbe:	4652      	mov	r2, sl
 8002cc0:	4950      	ldr	r1, [pc, #320]	; (8002e04 <main+0x580>)
 8002cc2:	4849      	ldr	r0, [pc, #292]	; (8002de8 <main+0x564>)
 8002cc4:	f000 fcca 	bl	800365c <siprintf>
			sprintf(string_3, "  scan a letter     ");
 8002cc8:	494f      	ldr	r1, [pc, #316]	; (8002e08 <main+0x584>)
 8002cca:	4850      	ldr	r0, [pc, #320]	; (8002e0c <main+0x588>)
 8002ccc:	f000 fcea 	bl	80036a4 <strcpy>
			sprintf(string_4, " P3: %03d    P4: %03d ", player_scores[2], player_scores[3]);
 8002cd0:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8002cd4:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <main+0x58c>)
 8002cda:	484e      	ldr	r0, [pc, #312]	; (8002e14 <main+0x590>)
 8002cdc:	f000 fcbe 	bl	800365c <siprintf>
			display_four_lines(string_1, string_2, string_3, string_4);
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <main+0x590>)
 8002ce4:	4a49      	ldr	r2, [pc, #292]	; (8002e0c <main+0x588>)
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <main+0x564>)
 8002ce8:	f7ff f841 	bl	8001d6e <display_four_lines>
			status = MFRC522_Check(CardID);
 8002cec:	4841      	ldr	r0, [pc, #260]	; (8002df4 <main+0x570>)
 8002cee:	f000 fb45 	bl	800337c <MFRC522_Check>
 8002cf2:	e7b5      	b.n	8002c60 <main+0x3dc>
	else if(curr_state == place_row){
 8002cf4:	2d02      	cmp	r5, #2
 8002cf6:	d0be      	beq.n	8002c76 <main+0x3f2>
	else if(curr_state == place_col){
 8002cf8:	2d03      	cmp	r5, #3
 8002cfa:	d13e      	bne.n	8002d7a <main+0x4f6>
		if(check_but(up) && col < 9){
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7ff f85d 	bl	8001dbc <check_but>
 8002d02:	b1b8      	cbz	r0, 8002d34 <main+0x4b0>
 8002d04:	2e08      	cmp	r6, #8
 8002d06:	d815      	bhi.n	8002d34 <main+0x4b0>
			col++;
 8002d08:	3601      	adds	r6, #1
			col--;
 8002d0a:	b2f6      	uxtb	r6, r6
		sprintf(string_1, "Letter %c: select col", board_letter);
 8002d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d0e:	4942      	ldr	r1, [pc, #264]	; (8002e18 <main+0x594>)
 8002d10:	e7bc      	b.n	8002c8c <main+0x408>
		else if(check_but(down) && row > 1){
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7ff f852 	bl	8001dbc <check_but>
 8002d18:	b118      	cbz	r0, 8002d22 <main+0x49e>
 8002d1a:	2f01      	cmp	r7, #1
 8002d1c:	d001      	beq.n	8002d22 <main+0x49e>
			row--;
 8002d1e:	3f01      	subs	r7, #1
 8002d20:	e7b1      	b.n	8002c86 <main+0x402>
 8002d22:	f7fe ffff 	bl	8001d24 <check_but.part.0>
		else if(check_but(enter)){
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d0ae      	beq.n	8002c88 <main+0x404>
			HAL_Delay(200);
 8002d2a:	20c8      	movs	r0, #200	; 0xc8
 8002d2c:	f7fd fc78 	bl	8000620 <HAL_Delay>
			curr_state = place_col;
 8002d30:	2503      	movs	r5, #3
 8002d32:	e7a9      	b.n	8002c88 <main+0x404>
		else if(check_but(down) && col > 1){
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff f841 	bl	8001dbc <check_but>
 8002d3a:	b118      	cbz	r0, 8002d44 <main+0x4c0>
 8002d3c:	2e01      	cmp	r6, #1
 8002d3e:	d001      	beq.n	8002d44 <main+0x4c0>
			col--;
 8002d40:	3e01      	subs	r6, #1
 8002d42:	e7e2      	b.n	8002d0a <main+0x486>
 8002d44:	f7fe ffee 	bl	8001d24 <check_but.part.0>
		else if(check_but(enter)){
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d0df      	beq.n	8002d0c <main+0x488>
			placed_word[word_len].row = row;
 8002d4c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8002d50:	aa1c      	add	r2, sp, #112	; 0x70
 8002d52:	4413      	add	r3, r2
			placed_word[word_len++].letter = board_letter;
 8002d54:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
			placed_word[word_len].row = row;
 8002d58:	f803 7c1b 	strb.w	r7, [r3, #-27]
			placed_word[word_len].col = col;
 8002d5c:	f803 6c1a 	strb.w	r6, [r3, #-26]
			placed_word[word_len++].letter = board_letter;
 8002d60:	f803 2c1c 	strb.w	r2, [r3, #-28]
			HAL_Delay(200);
 8002d64:	20c8      	movs	r0, #200	; 0xc8
 8002d66:	f7fd fc5b 	bl	8000620 <HAL_Delay>
			placed_word[word_len++].letter = board_letter;
 8002d6a:	f109 0901 	add.w	r9, r9, #1
			letter = 'N';
 8002d6e:	234e      	movs	r3, #78	; 0x4e
			placed_word[word_len++].letter = board_letter;
 8002d70:	fa5f f989 	uxtb.w	r9, r9
			letter = 'N';
 8002d74:	9309      	str	r3, [sp, #36]	; 0x24
			curr_state = confirm;
 8002d76:	2504      	movs	r5, #4
 8002d78:	e7c8      	b.n	8002d0c <main+0x488>
	else if(curr_state == confirm){
 8002d7a:	2d04      	cmp	r5, #4
 8002d7c:	d15d      	bne.n	8002e3a <main+0x5b6>
		if(check_but(up)){
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7ff f81c 	bl	8001dbc <check_but>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d153      	bne.n	8002e30 <main+0x5ac>
		else if(check_but(down) && row > 1){
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7ff f817 	bl	8001dbc <check_but>
 8002d8e:	b108      	cbz	r0, 8002d94 <main+0x510>
 8002d90:	2f01      	cmp	r7, #1
 8002d92:	d150      	bne.n	8002e36 <main+0x5b2>
 8002d94:	f7fe ffc6 	bl	8001d24 <check_but.part.0>
		else if(check_but(enter)){
 8002d98:	b138      	cbz	r0, 8002daa <main+0x526>
			if(letter == 'Y'){
 8002d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d9c:	2b59      	cmp	r3, #89	; 0x59
				HAL_Delay(200);
 8002d9e:	f04f 00c8 	mov.w	r0, #200	; 0xc8
			if(letter == 'Y'){
 8002da2:	d141      	bne.n	8002e28 <main+0x5a4>
				HAL_Delay(200);
 8002da4:	f7fd fc3c 	bl	8000620 <HAL_Delay>
				curr_state = board_check;
 8002da8:	2505      	movs	r5, #5
		sprintf(string_1, "  Player %d: are     ", curr_player);
 8002daa:	4652      	mov	r2, sl
 8002dac:	491b      	ldr	r1, [pc, #108]	; (8002e1c <main+0x598>)
 8002dae:	480c      	ldr	r0, [pc, #48]	; (8002de0 <main+0x55c>)
 8002db0:	f000 fc54 	bl	800365c <siprintf>
		sprintf(string_2, "  you done Y/N?  %c   ", letter);
 8002db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002db6:	491a      	ldr	r1, [pc, #104]	; (8002e20 <main+0x59c>)
 8002db8:	e732      	b.n	8002c20 <main+0x39c>
 8002dba:	bf00      	nop
 8002dbc:	20000260 	.word	0x20000260
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	2000029c 	.word	0x2000029c
 8002dc8:	40005000 	.word	0x40005000
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	200001c8 	.word	0x200001c8
 8002dd4:	200000ee 	.word	0x200000ee
 8002dd8:	2000025c 	.word	0x2000025c
 8002ddc:	08003ef6 	.word	0x08003ef6
 8002de0:	200002f0 	.word	0x200002f0
 8002de4:	08003f0b 	.word	0x08003f0b
 8002de8:	20000318 	.word	0x20000318
 8002dec:	08003f20 	.word	0x08003f20
 8002df0:	08003f35 	.word	0x08003f35
 8002df4:	2000032c 	.word	0x2000032c
 8002df8:	08003f4b 	.word	0x08003f4b
 8002dfc:	08003fa4 	.word	0x08003fa4
 8002e00:	08003fba 	.word	0x08003fba
 8002e04:	08003f62 	.word	0x08003f62
 8002e08:	08003f78 	.word	0x08003f78
 8002e0c:	200002dc 	.word	0x200002dc
 8002e10:	08003f8d 	.word	0x08003f8d
 8002e14:	20000304 	.word	0x20000304
 8002e18:	08003fd1 	.word	0x08003fd1
 8002e1c:	08003fe7 	.word	0x08003fe7
 8002e20:	08003ffd 	.word	0x08003ffd
 8002e24:	200001d0 	.word	0x200001d0
				HAL_Delay(200);
 8002e28:	f7fd fbfa 	bl	8000620 <HAL_Delay>
				curr_state = scan;
 8002e2c:	2501      	movs	r5, #1
 8002e2e:	e7bc      	b.n	8002daa <main+0x526>
			letter = 'Y';
 8002e30:	2359      	movs	r3, #89	; 0x59
			letter = 'N';
 8002e32:	9309      	str	r3, [sp, #36]	; 0x24
 8002e34:	e7b9      	b.n	8002daa <main+0x526>
 8002e36:	234e      	movs	r3, #78	; 0x4e
 8002e38:	e7fb      	b.n	8002e32 <main+0x5ae>
	else if(curr_state == board_check){
 8002e3a:	2d05      	cmp	r5, #5
 8002e3c:	f040 80a3 	bne.w	8002f86 <main+0x702>
		sprintf(string_1, " Verifying %d tiles  ", word_len);
 8002e40:	464a      	mov	r2, r9
 8002e42:	4966      	ldr	r1, [pc, #408]	; (8002fdc <main+0x758>)
 8002e44:	4866      	ldr	r0, [pc, #408]	; (8002fe0 <main+0x75c>)
 8002e46:	f000 fc09 	bl	800365c <siprintf>
		sprintf(string_2, "   %c %c %c %c %c %c %c %c %c", placed_word[0].letter, placed_word[1].letter, placed_word[2].letter, placed_word[3].letter, placed_word[4].letter, placed_word[5].letter, placed_word[6].letter, placed_word[7].letter, placed_word[8].letter);
 8002e4a:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8002e4e:	9106      	str	r1, [sp, #24]
 8002e50:	f89d 1069 	ldrb.w	r1, [sp, #105]	; 0x69
 8002e54:	9105      	str	r1, [sp, #20]
 8002e56:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
 8002e5a:	9104      	str	r1, [sp, #16]
 8002e5c:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8002e60:	9103      	str	r1, [sp, #12]
 8002e62:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8002e66:	9102      	str	r1, [sp, #8]
 8002e68:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
 8002e6c:	9101      	str	r1, [sp, #4]
 8002e6e:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8002e72:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8002e76:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8002e7a:	9100      	str	r1, [sp, #0]
 8002e7c:	4859      	ldr	r0, [pc, #356]	; (8002fe4 <main+0x760>)
 8002e7e:	495a      	ldr	r1, [pc, #360]	; (8002fe8 <main+0x764>)
 8002e80:	f000 fbec 	bl	800365c <siprintf>
		sprintf(string_3, "r: %d %d %d %d %d %d %d %d %d", placed_word[0].row, placed_word[1].row, placed_word[2].row, placed_word[3].row, placed_word[4].row, placed_word[5].row, placed_word[6].row, placed_word[7].row, placed_word[8].row);
 8002e84:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 8002e88:	9106      	str	r1, [sp, #24]
 8002e8a:	f89d 106a 	ldrb.w	r1, [sp, #106]	; 0x6a
 8002e8e:	9105      	str	r1, [sp, #20]
 8002e90:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8002e94:	9104      	str	r1, [sp, #16]
 8002e96:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
 8002e9a:	9103      	str	r1, [sp, #12]
 8002e9c:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 8002ea0:	9102      	str	r1, [sp, #8]
 8002ea2:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8002ea6:	9101      	str	r1, [sp, #4]
 8002ea8:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
 8002eac:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8002eb0:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8002eb4:	9100      	str	r1, [sp, #0]
 8002eb6:	484d      	ldr	r0, [pc, #308]	; (8002fec <main+0x768>)
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <main+0x76c>)
 8002eba:	f000 fbcf 	bl	800365c <siprintf>
		sprintf(string_4, "c: %d %d %d %d %d %d %d %d %d", placed_word[0].col, placed_word[1].col, placed_word[2].col, placed_word[3].col, placed_word[4].col, placed_word[5].col, placed_word[6].col, placed_word[7].col, placed_word[8].col);
 8002ebe:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 8002ec2:	9106      	str	r1, [sp, #24]
 8002ec4:	f89d 106b 	ldrb.w	r1, [sp, #107]	; 0x6b
 8002ec8:	9105      	str	r1, [sp, #20]
 8002eca:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
 8002ece:	9104      	str	r1, [sp, #16]
 8002ed0:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 8002ed4:	9103      	str	r1, [sp, #12]
 8002ed6:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8002eda:	9102      	str	r1, [sp, #8]
 8002edc:	f89d 105f 	ldrb.w	r1, [sp, #95]	; 0x5f
 8002ee0:	9101      	str	r1, [sp, #4]
 8002ee2:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8002ee6:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 8002eea:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
 8002eee:	9100      	str	r1, [sp, #0]
 8002ef0:	4840      	ldr	r0, [pc, #256]	; (8002ff4 <main+0x770>)
 8002ef2:	4941      	ldr	r1, [pc, #260]	; (8002ff8 <main+0x774>)
 8002ef4:	f000 fbb2 	bl	800365c <siprintf>
		display_four_lines(string_1, string_2, string_3, string_4);
 8002ef8:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <main+0x770>)
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <main+0x768>)
 8002efc:	4939      	ldr	r1, [pc, #228]	; (8002fe4 <main+0x760>)
 8002efe:	4838      	ldr	r0, [pc, #224]	; (8002fe0 <main+0x75c>)
 8002f00:	f7fe ff35 	bl	8001d6e <display_four_lines>
		HAL_Delay(2000);
 8002f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f08:	f7fd fb8a 	bl	8000620 <HAL_Delay>
		check_flag = verify_placed_word(placed_word, word_len);
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7fe ff72 	bl	8001df8 <verify_placed_word>
 8002f14:	b2c3      	uxtb	r3, r0
 8002f16:	930b      	str	r3, [sp, #44]	; 0x2c
		if(check_flag == valid){
 8002f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d148      	bne.n	8002fb0 <main+0x72c>
			player_scores[curr_player-1] += score_gain;
 8002f1e:	f10a 35ff 	add.w	r5, sl, #4294967295
			score_gain = update_scores(placed_word, word_len);
 8002f22:	4649      	mov	r1, r9
 8002f24:	4620      	mov	r0, r4
 8002f26:	f7ff f819 	bl	8001f5c <update_scores>
			player_scores[curr_player-1] += score_gain;
 8002f2a:	f81b 2005 	ldrb.w	r2, [fp, r5]
			sprintf(string_1, " Player %d gains %03d ", curr_player, score_gain);
 8002f2e:	4933      	ldr	r1, [pc, #204]	; (8002ffc <main+0x778>)
			player_scores[curr_player-1] += score_gain;
 8002f30:	4402      	add	r2, r0
			score_gain = update_scores(placed_word, word_len);
 8002f32:	4603      	mov	r3, r0
			player_scores[curr_player-1] += score_gain;
 8002f34:	f80b 2005 	strb.w	r2, [fp, r5]
			sprintf(string_1, " Player %d gains %03d ", curr_player, score_gain);
 8002f38:	4829      	ldr	r0, [pc, #164]	; (8002fe0 <main+0x75c>)
 8002f3a:	4652      	mov	r2, sl
 8002f3c:	f000 fb8e 	bl	800365c <siprintf>
			sprintf(string_2, " for %03d total pts  ", player_scores[curr_player-1]);
 8002f40:	f81b 2005 	ldrb.w	r2, [fp, r5]
 8002f44:	492e      	ldr	r1, [pc, #184]	; (8003000 <main+0x77c>)
 8002f46:	4827      	ldr	r0, [pc, #156]	; (8002fe4 <main+0x760>)
 8002f48:	f000 fb88 	bl	800365c <siprintf>
			curr_player = (curr_player % num_players) + 1;
 8002f4c:	fbba f3f8 	udiv	r3, sl, r8
 8002f50:	fb08 aa13 	mls	sl, r8, r3, sl
 8002f54:	f10a 0a01 	add.w	sl, sl, #1
 8002f58:	f00a 0aff 	and.w	sl, sl, #255	; 0xff
			curr_state = scan;
 8002f5c:	2501      	movs	r5, #1
			curr_state = state_error;
 8002f5e:	2300      	movs	r3, #0
			placed_word[i].letter = 0;
 8002f60:	461a      	mov	r2, r3
 8002f62:	54e2      	strb	r2, [r4, r3]
 8002f64:	18e1      	adds	r1, r4, r3
 8002f66:	3303      	adds	r3, #3
		for(int i = 0; i < 9; i++){
 8002f68:	2b1b      	cmp	r3, #27
			placed_word[i].row = 0;
 8002f6a:	704a      	strb	r2, [r1, #1]
			placed_word[i].col = 0;
 8002f6c:	708a      	strb	r2, [r1, #2]
		for(int i = 0; i < 9; i++){
 8002f6e:	d1f8      	bne.n	8002f62 <main+0x6de>
		display_two_lines(string_1, string_2);
 8002f70:	491c      	ldr	r1, [pc, #112]	; (8002fe4 <main+0x760>)
 8002f72:	481b      	ldr	r0, [pc, #108]	; (8002fe0 <main+0x75c>)
 8002f74:	f7fe fee2 	bl	8001d3c <display_two_lines>
		HAL_Delay(2000);
 8002f78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f7c:	f7fd fb50 	bl	8000620 <HAL_Delay>
		word_len = 0;
 8002f80:	f04f 0900 	mov.w	r9, #0
 8002f84:	e63a      	b.n	8002bfc <main+0x378>
	else if(curr_state == display_msg){
 8002f86:	2d08      	cmp	r5, #8
 8002f88:	d0c6      	beq.n	8002f18 <main+0x694>
	else if(curr_state == state_error){
 8002f8a:	2d07      	cmp	r5, #7
 8002f8c:	f47f ae4c 	bne.w	8002c28 <main+0x3a4>
		sprintf(string_1, "  There's been an   ");
 8002f90:	491c      	ldr	r1, [pc, #112]	; (8003004 <main+0x780>)
 8002f92:	4813      	ldr	r0, [pc, #76]	; (8002fe0 <main+0x75c>)
 8002f94:	f000 fb86 	bl	80036a4 <strcpy>
		sprintf(string_2, "  error oh no :(    ");
 8002f98:	491b      	ldr	r1, [pc, #108]	; (8003008 <main+0x784>)
 8002f9a:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <main+0x760>)
 8002f9c:	f000 fb82 	bl	80036a4 <strcpy>
		display_two_lines(string_1, string_2);
 8002fa0:	4910      	ldr	r1, [pc, #64]	; (8002fe4 <main+0x760>)
 8002fa2:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <main+0x75c>)
 8002fa4:	f7fe feca 	bl	8001d3c <display_two_lines>
		HAL_Delay(50);
 8002fa8:	2032      	movs	r0, #50	; 0x32
 8002faa:	f7fd fb39 	bl	8000620 <HAL_Delay>
 8002fae:	e7ef      	b.n	8002f90 <main+0x70c>
		else if(check_flag == invalid){
 8002fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d108      	bne.n	8002fc8 <main+0x744>
			sprintf(string_1, " You fucked up kid  ");
 8002fb6:	4915      	ldr	r1, [pc, #84]	; (800300c <main+0x788>)
 8002fb8:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <main+0x75c>)
 8002fba:	f000 fb73 	bl	80036a4 <strcpy>
			sprintf(string_2, " run that shit back ");
 8002fbe:	4914      	ldr	r1, [pc, #80]	; (8003010 <main+0x78c>)
 8002fc0:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <main+0x760>)
 8002fc2:	f000 fb6f 	bl	80036a4 <strcpy>
 8002fc6:	e7c9      	b.n	8002f5c <main+0x6d8>
			sprintf(string_1, "  Shit is on fire   ");
 8002fc8:	4912      	ldr	r1, [pc, #72]	; (8003014 <main+0x790>)
 8002fca:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <main+0x75c>)
 8002fcc:	f000 fb6a 	bl	80036a4 <strcpy>
			sprintf(string_2, "  run while you can ");
 8002fd0:	4911      	ldr	r1, [pc, #68]	; (8003018 <main+0x794>)
 8002fd2:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <main+0x760>)
 8002fd4:	f000 fb66 	bl	80036a4 <strcpy>
			curr_state = state_error;
 8002fd8:	2507      	movs	r5, #7
 8002fda:	e7c0      	b.n	8002f5e <main+0x6da>
 8002fdc:	08004014 	.word	0x08004014
 8002fe0:	200002f0 	.word	0x200002f0
 8002fe4:	20000318 	.word	0x20000318
 8002fe8:	0800402a 	.word	0x0800402a
 8002fec:	200002dc 	.word	0x200002dc
 8002ff0:	08004048 	.word	0x08004048
 8002ff4:	20000304 	.word	0x20000304
 8002ff8:	08004066 	.word	0x08004066
 8002ffc:	08004084 	.word	0x08004084
 8003000:	0800409b 	.word	0x0800409b
 8003004:	08004105 	.word	0x08004105
 8003008:	0800411a 	.word	0x0800411a
 800300c:	080040b1 	.word	0x080040b1
 8003010:	080040c6 	.word	0x080040c6
 8003014:	080040db 	.word	0x080040db
 8003018:	080040f0 	.word	0x080040f0

0800301c <nss_active>:
#include "main.h"
#include "mfrc522.h"


void nss_active(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	2110      	movs	r1, #16
 8003020:	4801      	ldr	r0, [pc, #4]	; (8003028 <nss_active+0xc>)
 8003022:	f7fd bc71 	b.w	8000908 <HAL_GPIO_WritePin>
 8003026:	bf00      	nop
 8003028:	40020000 	.word	0x40020000

0800302c <nss_inactive>:
}

void nss_inactive(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800302c:	2201      	movs	r2, #1
 800302e:	2110      	movs	r1, #16
 8003030:	4801      	ldr	r0, [pc, #4]	; (8003038 <nss_inactive+0xc>)
 8003032:	f7fd bc69 	b.w	8000908 <HAL_GPIO_WritePin>
 8003036:	bf00      	nop
 8003038:	40020000 	.word	0x40020000

0800303c <MFRC522_WriteRegister>:
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);

	MFRC522_AntennaOn();		//Open the antenna
}

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800303c:	b510      	push	{r4, lr}
	//Set address and data
	txbuff[0] = (addr << 1) & 0x7E;
 800303e:	0040      	lsls	r0, r0, #1
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <MFRC522_WriteRegister+0x30>)
 8003042:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 8003046:	7020      	strb	r0, [r4, #0]
	txbuff[1] = val;
 8003048:	7061      	strb	r1, [r4, #1]
	//NSS low
	nss_active();
 800304a:	f7ff ffe7 	bl	800301c <nss_active>
	//Send address and data
	if(HAL_SPI_Transmit(&hspi1, txbuff, 2, 5000) != HAL_OK){
 800304e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003052:	2202      	movs	r2, #2
 8003054:	4621      	mov	r1, r4
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <MFRC522_WriteRegister+0x34>)
 8003058:	f7fd ff5a 	bl	8000f10 <HAL_SPI_Transmit>
 800305c:	b108      	cbz	r0, 8003062 <MFRC522_WriteRegister+0x26>
	  Error_Handler();
 800305e:	f7ff fbad 	bl	80027bc <Error_Handler>
	}
	//NSS high
	nss_inactive();
}
 8003062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nss_inactive();
 8003066:	f7ff bfe1 	b.w	800302c <nss_inactive>
 800306a:	bf00      	nop
 800306c:	200001e4 	.word	0x200001e4
 8003070:	20000204 	.word	0x20000204

08003074 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8003074:	b513      	push	{r0, r1, r4, lr}
	//set address
	txbuff[0] = ((addr << 1) & 0x7E) | 0x80;
 8003076:	0040      	lsls	r0, r0, #1
 8003078:	4c0d      	ldr	r4, [pc, #52]	; (80030b0 <MFRC522_ReadRegister+0x3c>)
 800307a:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 800307e:	f060 007f 	orn	r0, r0, #127	; 0x7f
	txbuff[1] = 0;
 8003082:	2300      	movs	r3, #0
	txbuff[0] = ((addr << 1) & 0x7E) | 0x80;
 8003084:	7020      	strb	r0, [r4, #0]
	txbuff[1] = 0;
 8003086:	7063      	strb	r3, [r4, #1]
	//NSS low
	nss_active();
 8003088:	f7ff ffc8 	bl	800301c <nss_active>
	//send and recieve via SPI
	if(HAL_SPI_TransmitReceive(&hspi1, txbuff, rxbuff, 2, 5000) != HAL_OK){
 800308c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <MFRC522_ReadRegister+0x40>)
 8003094:	4808      	ldr	r0, [pc, #32]	; (80030b8 <MFRC522_ReadRegister+0x44>)
 8003096:	2302      	movs	r3, #2
 8003098:	4621      	mov	r1, r4
 800309a:	f7fd ffe2 	bl	8001062 <HAL_SPI_TransmitReceive>
 800309e:	b108      	cbz	r0, 80030a4 <MFRC522_ReadRegister+0x30>
	  Error_Handler();
 80030a0:	f7ff fb8c 	bl	80027bc <Error_Handler>
	}
	//NSS high
	nss_inactive();
 80030a4:	f7ff ffc2 	bl	800302c <nss_inactive>

	return rxbuff[1];
}
 80030a8:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <MFRC522_ReadRegister+0x40>)
 80030aa:	7858      	ldrb	r0, [r3, #1]
 80030ac:	b002      	add	sp, #8
 80030ae:	bd10      	pop	{r4, pc}
 80030b0:	200001e4 	.word	0x200001e4
 80030b4:	200001f4 	.word	0x200001f4
 80030b8:	20000204 	.word	0x20000204

080030bc <MFRC522_SetBitMask>:
		}
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4605      	mov	r5, r0
 80030c0:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80030c2:	f7ff ffd7 	bl	8003074 <MFRC522_ReadRegister>
 80030c6:	ea40 0104 	orr.w	r1, r0, r4
 80030ca:	b2c9      	uxtb	r1, r1
 80030cc:	4628      	mov	r0, r5
}
 80030ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80030d2:	f7ff bfb3 	b.w	800303c <MFRC522_WriteRegister>

080030d6 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80030d6:	b538      	push	{r3, r4, r5, lr}
 80030d8:	4605      	mov	r5, r0
 80030da:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80030dc:	f7ff ffca 	bl	8003074 <MFRC522_ReadRegister>
 80030e0:	ea20 0104 	bic.w	r1, r0, r4
 80030e4:	b2c9      	uxtb	r1, r1
 80030e6:	4628      	mov	r0, r5
}
 80030e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80030ec:	f7ff bfa6 	b.w	800303c <MFRC522_WriteRegister>

080030f0 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80030f0:	b508      	push	{r3, lr}
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80030f2:	2014      	movs	r0, #20
 80030f4:	f7ff ffbe 	bl	8003074 <MFRC522_ReadRegister>
	if (!(temp & 0x03)) {
 80030f8:	0783      	lsls	r3, r0, #30
 80030fa:	d105      	bne.n	8003108 <MFRC522_AntennaOn+0x18>
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80030fc:	2103      	movs	r1, #3
 80030fe:	2014      	movs	r0, #20
	}
}
 8003100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003104:	f7ff bfda 	b.w	80030bc <MFRC522_SetBitMask>
 8003108:	bd08      	pop	{r3, pc}

0800310a <MFRC522_Reset>:
void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Reset(void) {
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800310a:	210f      	movs	r1, #15
 800310c:	2001      	movs	r0, #1
 800310e:	f7ff bf95 	b.w	800303c <MFRC522_WriteRegister>

08003112 <MFRC522_Init>:
void MFRC522_Init(void){
 8003112:	b508      	push	{r3, lr}
	MFRC522_Reset();
 8003114:	f7ff fff9 	bl	800310a <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003118:	218d      	movs	r1, #141	; 0x8d
 800311a:	202a      	movs	r0, #42	; 0x2a
 800311c:	f7ff ff8e 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003120:	213e      	movs	r1, #62	; 0x3e
 8003122:	202b      	movs	r0, #43	; 0x2b
 8003124:	f7ff ff8a 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003128:	211e      	movs	r1, #30
 800312a:	202d      	movs	r0, #45	; 0x2d
 800312c:	f7ff ff86 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003130:	2100      	movs	r1, #0
 8003132:	202c      	movs	r0, #44	; 0x2c
 8003134:	f7ff ff82 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003138:	2170      	movs	r1, #112	; 0x70
 800313a:	2026      	movs	r0, #38	; 0x26
 800313c:	f7ff ff7e 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	2015      	movs	r0, #21
 8003144:	f7ff ff7a 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003148:	213d      	movs	r1, #61	; 0x3d
 800314a:	2011      	movs	r0, #17
 800314c:	f7ff ff76 	bl	800303c <MFRC522_WriteRegister>
}
 8003150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MFRC522_AntennaOn();		//Open the antenna
 8003154:	f7ff bfcc 	b.w	80030f0 <MFRC522_AntennaOn>

08003158 <MFRC522_ToCard>:
	}

	return status;
}

MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800315c:	280c      	cmp	r0, #12
MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800315e:	4607      	mov	r7, r0
 8003160:	460d      	mov	r5, r1
 8003162:	4692      	mov	sl, r2
 8003164:	461e      	mov	r6, r3
 8003166:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	switch (command) {
 800316a:	d03f      	beq.n	80031ec <MFRC522_ToCard+0x94>
 800316c:	280e      	cmp	r0, #14
 800316e:	d041      	beq.n	80031f4 <MFRC522_ToCard+0x9c>
	uint8_t waitIRq = 0x00;
 8003170:	f04f 0900 	mov.w	r9, #0
	uint8_t irqEn = 0x00;
 8003174:	464c      	mov	r4, r9
		}
		default:
			break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003176:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 800317a:	2002      	movs	r0, #2
 800317c:	f7ff ff5e 	bl	800303c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	2004      	movs	r0, #4
 8003184:	f7ff ffa7 	bl	80030d6 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	200a      	movs	r0, #10
 800318c:	f7ff ff96 	bl	80030bc <MFRC522_SetBitMask>

	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003190:	2100      	movs	r1, #0
 8003192:	2001      	movs	r0, #1
 8003194:	f7ff ff52 	bl	800303c <MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003198:	46ab      	mov	fp, r5
 800319a:	fa1f fa8a 	uxth.w	sl, sl
 800319e:	ebab 0305 	sub.w	r3, fp, r5
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	459a      	cmp	sl, r3
 80031a6:	d829      	bhi.n	80031fc <MFRC522_ToCard+0xa4>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
	}

	//Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80031a8:	4639      	mov	r1, r7
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7ff ff46 	bl	800303c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80031b0:	2f0c      	cmp	r7, #12
 80031b2:	d103      	bne.n	80031bc <MFRC522_ToCard+0x64>
		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	200d      	movs	r0, #13
 80031b8:	f7ff ff80 	bl	80030bc <MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++) {
 80031bc:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80031c0:	f049 0901 	orr.w	r9, r9, #1
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80031c4:	2004      	movs	r0, #4
 80031c6:	f7ff ff55 	bl	8003074 <MFRC522_ReadRegister>
		i--;
 80031ca:	3d01      	subs	r5, #1
 80031cc:	b2ad      	uxth	r5, r5
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80031ce:	4682      	mov	sl, r0
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80031d0:	b115      	cbz	r5, 80031d8 <MFRC522_ToCard+0x80>
 80031d2:	ea10 0f09 	tst.w	r0, r9
 80031d6:	d0f5      	beq.n	80031c4 <MFRC522_ToCard+0x6c>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	200d      	movs	r0, #13
 80031dc:	f7ff ff7b 	bl	80030d6 <MFRC522_ClearBitMask>

	if (i != 0)  {
 80031e0:	b995      	cbnz	r5, 8003208 <MFRC522_ToCard+0xb0>
	MFRC522_Status_t status = MI_ERR;
 80031e2:	f04f 0a02 	mov.w	sl, #2
			status = MI_ERR;
		}
	}

	return status;
}
 80031e6:	4650      	mov	r0, sl
 80031e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			waitIRq = 0x30;
 80031ec:	f04f 0930 	mov.w	r9, #48	; 0x30
			irqEn = 0x77;
 80031f0:	2477      	movs	r4, #119	; 0x77
			break;
 80031f2:	e7c0      	b.n	8003176 <MFRC522_ToCard+0x1e>
			waitIRq = 0x10;
 80031f4:	f04f 0910 	mov.w	r9, #16
			irqEn = 0x12;
 80031f8:	2412      	movs	r4, #18
 80031fa:	e7bc      	b.n	8003176 <MFRC522_ToCard+0x1e>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80031fc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003200:	2009      	movs	r0, #9
 8003202:	f7ff ff1b 	bl	800303c <MFRC522_WriteRegister>
 8003206:	e7ca      	b.n	800319e <MFRC522_ToCard+0x46>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003208:	2006      	movs	r0, #6
 800320a:	f7ff ff33 	bl	8003074 <MFRC522_ReadRegister>
 800320e:	f010 0f1b 	tst.w	r0, #27
 8003212:	d1e6      	bne.n	80031e2 <MFRC522_ToCard+0x8a>
			status = MI_OK;
 8003214:	f004 0401 	and.w	r4, r4, #1
			if (command == PCD_TRANSCEIVE) {
 8003218:	2f0c      	cmp	r7, #12
			status = MI_OK;
 800321a:	ea0a 0a04 	and.w	sl, sl, r4
			if (command == PCD_TRANSCEIVE) {
 800321e:	d1e2      	bne.n	80031e6 <MFRC522_ToCard+0x8e>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003220:	200a      	movs	r0, #10
 8003222:	f7ff ff27 	bl	8003074 <MFRC522_ReadRegister>
 8003226:	4604      	mov	r4, r0
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003228:	4638      	mov	r0, r7
 800322a:	f7ff ff23 	bl	8003074 <MFRC522_ReadRegister>
				if (lastBits) {
 800322e:	f010 0007 	ands.w	r0, r0, #7
					*backLen = (n - 1) * 8 + lastBits;
 8003232:	bf1b      	ittet	ne
 8003234:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003238:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
					*backLen = n * 8;
 800323c:	00e3      	lsleq	r3, r4, #3
					*backLen = (n - 1) * 8 + lastBits;
 800323e:	f8a8 0000 	strhne.w	r0, [r8]
					*backLen = n * 8;
 8003242:	bf08      	it	eq
 8003244:	f8a8 3000 	strheq.w	r3, [r8]
				if (n == 0) {
 8003248:	b17c      	cbz	r4, 800326a <MFRC522_ToCard+0x112>
 800324a:	2c10      	cmp	r4, #16
 800324c:	bf28      	it	cs
 800324e:	2410      	movcs	r4, #16
 8003250:	b2e4      	uxtb	r4, r4
				for (i = 0; i < n; i++) {
 8003252:	4637      	mov	r7, r6
 8003254:	b2a4      	uxth	r4, r4
 8003256:	1bbb      	subs	r3, r7, r6
 8003258:	b29b      	uxth	r3, r3
 800325a:	429c      	cmp	r4, r3
 800325c:	d9c3      	bls.n	80031e6 <MFRC522_ToCard+0x8e>
					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 800325e:	2009      	movs	r0, #9
 8003260:	f7ff ff08 	bl	8003074 <MFRC522_ReadRegister>
 8003264:	f807 0b01 	strb.w	r0, [r7], #1
 8003268:	e7f5      	b.n	8003256 <MFRC522_ToCard+0xfe>
					n = 1;
 800326a:	2401      	movs	r4, #1
 800326c:	e7f1      	b.n	8003252 <MFRC522_ToCard+0xfa>

0800326e <MFRC522_Request>:
MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800326e:	b530      	push	{r4, r5, lr}
 8003270:	460c      	mov	r4, r1
 8003272:	b085      	sub	sp, #20
 8003274:	4605      	mov	r5, r0
	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003276:	2107      	movs	r1, #7
 8003278:	200d      	movs	r0, #13
 800327a:	f7ff fedf 	bl	800303c <MFRC522_WriteRegister>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800327e:	f10d 030e 	add.w	r3, sp, #14
 8003282:	9300      	str	r3, [sp, #0]
	TagType[0] = reqMode;
 8003284:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003286:	4623      	mov	r3, r4
 8003288:	2201      	movs	r2, #1
 800328a:	4621      	mov	r1, r4
 800328c:	200c      	movs	r0, #12
 800328e:	f7ff ff63 	bl	8003158 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003292:	b930      	cbnz	r0, 80032a2 <MFRC522_Request+0x34>
 8003294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003298:	2b10      	cmp	r3, #16
		status = MI_ERR;
 800329a:	bf18      	it	ne
 800329c:	2002      	movne	r0, #2
}
 800329e:	b005      	add	sp, #20
 80032a0:	bd30      	pop	{r4, r5, pc}
		status = MI_ERR;
 80032a2:	2002      	movs	r0, #2
 80032a4:	e7fb      	b.n	800329e <MFRC522_Request+0x30>

080032a6 <MFRC522_Anticoll>:

MFRC522_Status_t MFRC522_Anticoll(uint8_t* serNum) {
 80032a6:	b530      	push	{r4, r5, lr}
	MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80032a8:	2100      	movs	r1, #0
MFRC522_Status_t MFRC522_Anticoll(uint8_t* serNum) {
 80032aa:	4604      	mov	r4, r0
 80032ac:	b085      	sub	sp, #20
	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80032ae:	200d      	movs	r0, #13
 80032b0:	f7ff fec4 	bl	800303c <MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80032b4:	2393      	movs	r3, #147	; 0x93
 80032b6:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 80032b8:	2320      	movs	r3, #32
 80032ba:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80032bc:	f10d 030e 	add.w	r3, sp, #14
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2202      	movs	r2, #2
 80032c4:	4623      	mov	r3, r4
 80032c6:	4621      	mov	r1, r4
 80032c8:	200c      	movs	r0, #12
 80032ca:	f7ff ff45 	bl	8003158 <MFRC522_ToCard>

	if (status == MI_OK) {
 80032ce:	b960      	cbnz	r0, 80032ea <MFRC522_Anticoll+0x44>
 80032d0:	1e62      	subs	r2, r4, #1
 80032d2:	1ce1      	adds	r1, r4, #3
 80032d4:	4603      	mov	r3, r0
		//Check card serial number
		for (i = 0; i < 4; i++) {
			serNumCheck ^= serNum[i];
 80032d6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		for (i = 0; i < 4; i++) {
 80032da:	428a      	cmp	r2, r1
			serNumCheck ^= serNum[i];
 80032dc:	ea83 0305 	eor.w	r3, r3, r5
		for (i = 0; i < 4; i++) {
 80032e0:	d1f9      	bne.n	80032d6 <MFRC522_Anticoll+0x30>
		}
		if (serNumCheck != serNum[i]) {
 80032e2:	7922      	ldrb	r2, [r4, #4]
			status = MI_ERR;
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf18      	it	ne
 80032e8:	2002      	movne	r0, #2
		}
	}
	return status;
}
 80032ea:	b005      	add	sp, #20
 80032ec:	bd30      	pop	{r4, r5, pc}

080032ee <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80032ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f0:	4604      	mov	r4, r0
 80032f2:	460e      	mov	r6, r1
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80032f4:	2005      	movs	r0, #5
 80032f6:	2104      	movs	r1, #4
void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80032f8:	4617      	mov	r7, r2
	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80032fa:	f7ff feec 	bl	80030d6 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80032fe:	2180      	movs	r1, #128	; 0x80
 8003300:	200a      	movs	r0, #10
 8003302:	f7ff fedb 	bl	80030bc <MFRC522_SetBitMask>
 8003306:	3e01      	subs	r6, #1
 8003308:	1e65      	subs	r5, r4, #1
 800330a:	4434      	add	r4, r6
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 800330c:	42a5      	cmp	r5, r4
 800330e:	d116      	bne.n	800333e <MFRC522_CalculateCRC+0x50>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
	}
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003310:	2103      	movs	r1, #3
 8003312:	2001      	movs	r0, #1
 8003314:	f7ff fe92 	bl	800303c <MFRC522_WriteRegister>
 8003318:	24ff      	movs	r4, #255	; 0xff

	//Wait CRC calculation is complete
	i = 0xFF;
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800331a:	2005      	movs	r0, #5
 800331c:	3c01      	subs	r4, #1
 800331e:	f7ff fea9 	bl	8003074 <MFRC522_ReadRegister>
		i--;
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003322:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003326:	d001      	beq.n	800332c <MFRC522_CalculateCRC+0x3e>
 8003328:	0743      	lsls	r3, r0, #29
 800332a:	d5f6      	bpl.n	800331a <MFRC522_CalculateCRC+0x2c>

	//Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800332c:	2022      	movs	r0, #34	; 0x22
 800332e:	f7ff fea1 	bl	8003074 <MFRC522_ReadRegister>
 8003332:	7038      	strb	r0, [r7, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003334:	2021      	movs	r0, #33	; 0x21
 8003336:	f7ff fe9d 	bl	8003074 <MFRC522_ReadRegister>
 800333a:	7078      	strb	r0, [r7, #1]
 800333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800333e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003342:	2009      	movs	r0, #9
 8003344:	f7ff fe7a 	bl	800303c <MFRC522_WriteRegister>
 8003348:	e7e0      	b.n	800330c <MFRC522_CalculateCRC+0x1e>

0800334a <MFRC522_Halt>:
	}

	return status;
}

void MFRC522_Halt(void) {
 800334a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 800334c:	2350      	movs	r3, #80	; 0x50
 800334e:	f88d 300c 	strb.w	r3, [sp, #12]
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003352:	f10d 020e 	add.w	r2, sp, #14
	buff[1] = 0;
 8003356:	2300      	movs	r3, #0
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003358:	a803      	add	r0, sp, #12
 800335a:	2102      	movs	r1, #2
	buff[1] = 0;
 800335c:	f88d 300d 	strb.w	r3, [sp, #13]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003360:	f7ff ffc5 	bl	80032ee <MFRC522_CalculateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003364:	f10d 030a 	add.w	r3, sp, #10
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	ab03      	add	r3, sp, #12
 800336c:	2204      	movs	r2, #4
 800336e:	4619      	mov	r1, r3
 8003370:	200c      	movs	r0, #12
 8003372:	f7ff fef1 	bl	8003158 <MFRC522_ToCard>
}
 8003376:	b005      	add	sp, #20
 8003378:	f85d fb04 	ldr.w	pc, [sp], #4

0800337c <MFRC522_Check>:
MFRC522_Status_t MFRC522_Check(uint8_t* id) {
 800337c:	b538      	push	{r3, r4, r5, lr}
	status = MFRC522_Request(PICC_REQIDL, id);
 800337e:	4601      	mov	r1, r0
MFRC522_Status_t MFRC522_Check(uint8_t* id) {
 8003380:	4605      	mov	r5, r0
	status = MFRC522_Request(PICC_REQIDL, id);
 8003382:	2026      	movs	r0, #38	; 0x26
 8003384:	f7ff ff73 	bl	800326e <MFRC522_Request>
	if (status == MI_OK) {
 8003388:	4604      	mov	r4, r0
 800338a:	b918      	cbnz	r0, 8003394 <MFRC522_Check+0x18>
		status = MFRC522_Anticoll(id);
 800338c:	4628      	mov	r0, r5
 800338e:	f7ff ff8a 	bl	80032a6 <MFRC522_Anticoll>
 8003392:	4604      	mov	r4, r0
	MFRC522_Halt();			//Command card into hibernation
 8003394:	f7ff ffd9 	bl	800334a <MFRC522_Halt>
}
 8003398:	4620      	mov	r0, r4
 800339a:	bd38      	pop	{r3, r4, r5, pc}

0800339c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800339c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_MspInit+0x3c>)
 80033a0:	2100      	movs	r1, #0
 80033a2:	9100      	str	r1, [sp, #0]
 80033a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
 80033ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80033b2:	9200      	str	r2, [sp, #0]
 80033b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	9101      	str	r1, [sp, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033c8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033cc:	f7fd f93c 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d0:	b003      	add	sp, #12
 80033d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800

080033dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033dc:	b510      	push	{r4, lr}
 80033de:	4604      	mov	r4, r0
 80033e0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e2:	2214      	movs	r2, #20
 80033e4:	2100      	movs	r1, #0
 80033e6:	a803      	add	r0, sp, #12
 80033e8:	f000 f930 	bl	800364c <memset>
  if(hspi->Instance==SPI1)
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_SPI_MspInit+0x60>)
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d121      	bne.n	8003438 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033f4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80033f8:	2100      	movs	r1, #0
 80033fa:	9101      	str	r1, [sp, #4]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	4810      	ldr	r0, [pc, #64]	; (8003440 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003400:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
 8003406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003408:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800340c:	9201      	str	r2, [sp, #4]
 800340e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003410:	9102      	str	r1, [sp, #8]
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003424:	23e0      	movs	r3, #224	; 0xe0
 8003426:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800342c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003430:	2305      	movs	r3, #5
 8003432:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f7fd f982 	bl	800073c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003438:	b008      	add	sp, #32
 800343a:	bd10      	pop	{r4, pc}
 800343c:	40013000 	.word	0x40013000
 8003440:	40020000 	.word	0x40020000

08003444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003444:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_TIM_Base_MspInit+0x38>)
 8003448:	6802      	ldr	r2, [r0, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d113      	bne.n	8003476 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344e:	2200      	movs	r2, #0
 8003450:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8003454:	9201      	str	r2, [sp, #4]
 8003456:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003458:	f041 0102 	orr.w	r1, r1, #2
 800345c:	6419      	str	r1, [r3, #64]	; 0x40
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003466:	201d      	movs	r0, #29
 8003468:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800346a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800346c:	f7fd f8fe 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003470:	201d      	movs	r0, #29
 8003472:	f7fd f92f 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003476:	b003      	add	sp, #12
 8003478:	f85d fb04 	ldr.w	pc, [sp], #4
 800347c:	40000400 	.word	0x40000400

08003480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	2214      	movs	r2, #20
 800348a:	2100      	movs	r1, #0
 800348c:	a803      	add	r0, sp, #12
 800348e:	f000 f8dd 	bl	800364c <memset>
  if(huart->Instance==UART5)
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_UART_MspInit+0xac>)
 8003496:	429a      	cmp	r2, r3
 8003498:	d144      	bne.n	8003524 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800349a:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800349e:	2400      	movs	r4, #0
 80034a0:	9400      	str	r4, [sp, #0]
 80034a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a4:	4822      	ldr	r0, [pc, #136]	; (8003530 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80034a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
 80034ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034b2:	9200      	str	r2, [sp, #0]
 80034b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b6:	9401      	str	r4, [sp, #4]
 80034b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ba:	f042 0204 	orr.w	r2, r2, #4
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	f002 0204 	and.w	r2, r2, #4
 80034c6:	9201      	str	r2, [sp, #4]
 80034c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ca:	9402      	str	r4, [sp, #8]
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	f042 0208 	orr.w	r2, r2, #8
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034e6:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80034ea:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f4:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80034f8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fa:	f7fd f91f 	bl	800073c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034fe:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003500:	a903      	add	r1, sp, #12
 8003502:	480c      	ldr	r0, [pc, #48]	; (8003534 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003504:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800350a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800350e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003510:	f7fd f914 	bl	800073c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003514:	2035      	movs	r0, #53	; 0x35
 8003516:	4622      	mov	r2, r4
 8003518:	4621      	mov	r1, r4
 800351a:	f7fd f8a7 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800351e:	2035      	movs	r0, #53	; 0x35
 8003520:	f7fd f8d8 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003524:	b008      	add	sp, #32
 8003526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800352a:	bf00      	nop
 800352c:	40005000 	.word	0x40005000
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00

08003538 <NMI_Handler>:
 8003538:	4770      	bx	lr

0800353a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353a:	e7fe      	b.n	800353a <HardFault_Handler>

0800353c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800353c:	e7fe      	b.n	800353c <MemManage_Handler>

0800353e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353e:	e7fe      	b.n	800353e <BusFault_Handler>

08003540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003540:	e7fe      	b.n	8003540 <UsageFault_Handler>

08003542 <SVC_Handler>:
 8003542:	4770      	bx	lr

08003544 <DebugMon_Handler>:
 8003544:	4770      	bx	lr

08003546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003546:	4770      	bx	lr

08003548 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003548:	f7fd b858 	b.w	80005fc <HAL_IncTick>

0800354c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <TIM3_IRQHandler+0x8>)
 800354e:	f7fd bf41 	b.w	80013d4 <HAL_TIM_IRQHandler>
 8003552:	bf00      	nop
 8003554:	20000260 	.word	0x20000260

08003558 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003558:	4801      	ldr	r0, [pc, #4]	; (8003560 <UART5_IRQHandler+0x8>)
 800355a:	f7fe bab9 	b.w	8001ad0 <HAL_UART_IRQHandler>
 800355e:	bf00      	nop
 8003560:	2000029c 	.word	0x2000029c

08003564 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003564:	490f      	ldr	r1, [pc, #60]	; (80035a4 <SystemInit+0x40>)
 8003566:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800356a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <SystemInit+0x44>)
 8003574:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003576:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800357e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003586:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800358a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800358c:	4a07      	ldr	r2, [pc, #28]	; (80035ac <SystemInit+0x48>)
 800358e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003596:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003598:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800359a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800359e:	608b      	str	r3, [r1, #8]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	24003010 	.word	0x24003010

080035b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035b6:	e003      	b.n	80035c0 <LoopCopyDataInit>

080035b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035be:	3104      	adds	r1, #4

080035c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035c0:	480b      	ldr	r0, [pc, #44]	; (80035f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035c8:	d3f6      	bcc.n	80035b8 <CopyDataInit>
  ldr  r2, =_sbss
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035cc:	e002      	b.n	80035d4 <LoopFillZerobss>

080035ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035d0:	f842 3b04 	str.w	r3, [r2], #4

080035d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035d8:	d3f9      	bcc.n	80035ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035da:	f7ff ffc3 	bl	8003564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035de:	f000 f811 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035e2:	f7ff f94f 	bl	8002884 <main>
  bx  lr    
 80035e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035ec:	080041b4 	.word	0x080041b4
  ldr  r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035f4:	200001ac 	.word	0x200001ac
  ldr  r2, =_sbss
 80035f8:	200001ac 	.word	0x200001ac
  ldr  r3, = _ebss
 80035fc:	20000338 	.word	0x20000338

08003600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC_IRQHandler>
	...

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4e0d      	ldr	r6, [pc, #52]	; (800363c <__libc_init_array+0x38>)
 8003608:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360a:	1ba4      	subs	r4, r4, r6
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	2500      	movs	r5, #0
 8003610:	42a5      	cmp	r5, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	4e0b      	ldr	r6, [pc, #44]	; (8003644 <__libc_init_array+0x40>)
 8003616:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <__libc_init_array+0x44>)
 8003618:	f000 fc54 	bl	8003ec4 <_init>
 800361c:	1ba4      	subs	r4, r4, r6
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	2500      	movs	r5, #0
 8003622:	42a5      	cmp	r5, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800362c:	4798      	blx	r3
 800362e:	3501      	adds	r5, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003636:	4798      	blx	r3
 8003638:	3501      	adds	r5, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	080041ac 	.word	0x080041ac
 8003640:	080041ac 	.word	0x080041ac
 8003644:	080041ac 	.word	0x080041ac
 8003648:	080041b0 	.word	0x080041b0

0800364c <memset>:
 800364c:	4402      	add	r2, r0
 800364e:	4603      	mov	r3, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <siprintf>:
 800365c:	b40e      	push	{r1, r2, r3}
 800365e:	b500      	push	{lr}
 8003660:	b09c      	sub	sp, #112	; 0x70
 8003662:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003666:	ab1d      	add	r3, sp, #116	; 0x74
 8003668:	f8ad 1014 	strh.w	r1, [sp, #20]
 800366c:	9002      	str	r0, [sp, #8]
 800366e:	9006      	str	r0, [sp, #24]
 8003670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003674:	480a      	ldr	r0, [pc, #40]	; (80036a0 <siprintf+0x44>)
 8003676:	9104      	str	r1, [sp, #16]
 8003678:	9107      	str	r1, [sp, #28]
 800367a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800367e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003682:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003686:	6800      	ldr	r0, [r0, #0]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	a902      	add	r1, sp, #8
 800368c:	f000 f86e 	bl	800376c <_svfiprintf_r>
 8003690:	9b02      	ldr	r3, [sp, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	b01c      	add	sp, #112	; 0x70
 8003698:	f85d eb04 	ldr.w	lr, [sp], #4
 800369c:	b003      	add	sp, #12
 800369e:	4770      	bx	lr
 80036a0:	20000148 	.word	0x20000148

080036a4 <strcpy>:
 80036a4:	4603      	mov	r3, r0
 80036a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036aa:	f803 2b01 	strb.w	r2, [r3], #1
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d1f9      	bne.n	80036a6 <strcpy+0x2>
 80036b2:	4770      	bx	lr

080036b4 <__ssputs_r>:
 80036b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	688e      	ldr	r6, [r1, #8]
 80036ba:	429e      	cmp	r6, r3
 80036bc:	4682      	mov	sl, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	4691      	mov	r9, r2
 80036c2:	4698      	mov	r8, r3
 80036c4:	d835      	bhi.n	8003732 <__ssputs_r+0x7e>
 80036c6:	898a      	ldrh	r2, [r1, #12]
 80036c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036cc:	d031      	beq.n	8003732 <__ssputs_r+0x7e>
 80036ce:	6825      	ldr	r5, [r4, #0]
 80036d0:	6909      	ldr	r1, [r1, #16]
 80036d2:	1a6f      	subs	r7, r5, r1
 80036d4:	6965      	ldr	r5, [r4, #20]
 80036d6:	2302      	movs	r3, #2
 80036d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80036e0:	f108 0301 	add.w	r3, r8, #1
 80036e4:	443b      	add	r3, r7
 80036e6:	429d      	cmp	r5, r3
 80036e8:	bf38      	it	cc
 80036ea:	461d      	movcc	r5, r3
 80036ec:	0553      	lsls	r3, r2, #21
 80036ee:	d531      	bpl.n	8003754 <__ssputs_r+0xa0>
 80036f0:	4629      	mov	r1, r5
 80036f2:	f000 fb39 	bl	8003d68 <_malloc_r>
 80036f6:	4606      	mov	r6, r0
 80036f8:	b950      	cbnz	r0, 8003710 <__ssputs_r+0x5c>
 80036fa:	230c      	movs	r3, #12
 80036fc:	f8ca 3000 	str.w	r3, [sl]
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003710:	463a      	mov	r2, r7
 8003712:	6921      	ldr	r1, [r4, #16]
 8003714:	f000 fab4 	bl	8003c80 <memcpy>
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	6126      	str	r6, [r4, #16]
 8003726:	6165      	str	r5, [r4, #20]
 8003728:	443e      	add	r6, r7
 800372a:	1bed      	subs	r5, r5, r7
 800372c:	6026      	str	r6, [r4, #0]
 800372e:	60a5      	str	r5, [r4, #8]
 8003730:	4646      	mov	r6, r8
 8003732:	4546      	cmp	r6, r8
 8003734:	bf28      	it	cs
 8003736:	4646      	movcs	r6, r8
 8003738:	4632      	mov	r2, r6
 800373a:	4649      	mov	r1, r9
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f000 faaa 	bl	8003c96 <memmove>
 8003742:	68a3      	ldr	r3, [r4, #8]
 8003744:	1b9b      	subs	r3, r3, r6
 8003746:	60a3      	str	r3, [r4, #8]
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	441e      	add	r6, r3
 800374c:	6026      	str	r6, [r4, #0]
 800374e:	2000      	movs	r0, #0
 8003750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003754:	462a      	mov	r2, r5
 8003756:	f000 fb65 	bl	8003e24 <_realloc_r>
 800375a:	4606      	mov	r6, r0
 800375c:	2800      	cmp	r0, #0
 800375e:	d1e1      	bne.n	8003724 <__ssputs_r+0x70>
 8003760:	6921      	ldr	r1, [r4, #16]
 8003762:	4650      	mov	r0, sl
 8003764:	f000 fab2 	bl	8003ccc <_free_r>
 8003768:	e7c7      	b.n	80036fa <__ssputs_r+0x46>
	...

0800376c <_svfiprintf_r>:
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	b09d      	sub	sp, #116	; 0x74
 8003772:	4680      	mov	r8, r0
 8003774:	9303      	str	r3, [sp, #12]
 8003776:	898b      	ldrh	r3, [r1, #12]
 8003778:	061c      	lsls	r4, r3, #24
 800377a:	460d      	mov	r5, r1
 800377c:	4616      	mov	r6, r2
 800377e:	d50f      	bpl.n	80037a0 <_svfiprintf_r+0x34>
 8003780:	690b      	ldr	r3, [r1, #16]
 8003782:	b96b      	cbnz	r3, 80037a0 <_svfiprintf_r+0x34>
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	f000 faef 	bl	8003d68 <_malloc_r>
 800378a:	6028      	str	r0, [r5, #0]
 800378c:	6128      	str	r0, [r5, #16]
 800378e:	b928      	cbnz	r0, 800379c <_svfiprintf_r+0x30>
 8003790:	230c      	movs	r3, #12
 8003792:	f8c8 3000 	str.w	r3, [r8]
 8003796:	f04f 30ff 	mov.w	r0, #4294967295
 800379a:	e0c5      	b.n	8003928 <_svfiprintf_r+0x1bc>
 800379c:	2340      	movs	r3, #64	; 0x40
 800379e:	616b      	str	r3, [r5, #20]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9309      	str	r3, [sp, #36]	; 0x24
 80037a4:	2320      	movs	r3, #32
 80037a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037aa:	2330      	movs	r3, #48	; 0x30
 80037ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037b0:	f04f 0b01 	mov.w	fp, #1
 80037b4:	4637      	mov	r7, r6
 80037b6:	463c      	mov	r4, r7
 80037b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d13c      	bne.n	800383a <_svfiprintf_r+0xce>
 80037c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80037c4:	d00b      	beq.n	80037de <_svfiprintf_r+0x72>
 80037c6:	4653      	mov	r3, sl
 80037c8:	4632      	mov	r2, r6
 80037ca:	4629      	mov	r1, r5
 80037cc:	4640      	mov	r0, r8
 80037ce:	f7ff ff71 	bl	80036b4 <__ssputs_r>
 80037d2:	3001      	adds	r0, #1
 80037d4:	f000 80a3 	beq.w	800391e <_svfiprintf_r+0x1b2>
 80037d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037da:	4453      	add	r3, sl
 80037dc:	9309      	str	r3, [sp, #36]	; 0x24
 80037de:	783b      	ldrb	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 809c 	beq.w	800391e <_svfiprintf_r+0x1b2>
 80037e6:	2300      	movs	r3, #0
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	9307      	str	r3, [sp, #28]
 80037f0:	9205      	str	r2, [sp, #20]
 80037f2:	9306      	str	r3, [sp, #24]
 80037f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037f8:	931a      	str	r3, [sp, #104]	; 0x68
 80037fa:	2205      	movs	r2, #5
 80037fc:	7821      	ldrb	r1, [r4, #0]
 80037fe:	4850      	ldr	r0, [pc, #320]	; (8003940 <_svfiprintf_r+0x1d4>)
 8003800:	f7fc fce6 	bl	80001d0 <memchr>
 8003804:	1c67      	adds	r7, r4, #1
 8003806:	9b04      	ldr	r3, [sp, #16]
 8003808:	b9d8      	cbnz	r0, 8003842 <_svfiprintf_r+0xd6>
 800380a:	06d9      	lsls	r1, r3, #27
 800380c:	bf44      	itt	mi
 800380e:	2220      	movmi	r2, #32
 8003810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003814:	071a      	lsls	r2, r3, #28
 8003816:	bf44      	itt	mi
 8003818:	222b      	movmi	r2, #43	; 0x2b
 800381a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800381e:	7822      	ldrb	r2, [r4, #0]
 8003820:	2a2a      	cmp	r2, #42	; 0x2a
 8003822:	d016      	beq.n	8003852 <_svfiprintf_r+0xe6>
 8003824:	9a07      	ldr	r2, [sp, #28]
 8003826:	2100      	movs	r1, #0
 8003828:	200a      	movs	r0, #10
 800382a:	4627      	mov	r7, r4
 800382c:	3401      	adds	r4, #1
 800382e:	783b      	ldrb	r3, [r7, #0]
 8003830:	3b30      	subs	r3, #48	; 0x30
 8003832:	2b09      	cmp	r3, #9
 8003834:	d951      	bls.n	80038da <_svfiprintf_r+0x16e>
 8003836:	b1c9      	cbz	r1, 800386c <_svfiprintf_r+0x100>
 8003838:	e011      	b.n	800385e <_svfiprintf_r+0xf2>
 800383a:	2b25      	cmp	r3, #37	; 0x25
 800383c:	d0c0      	beq.n	80037c0 <_svfiprintf_r+0x54>
 800383e:	4627      	mov	r7, r4
 8003840:	e7b9      	b.n	80037b6 <_svfiprintf_r+0x4a>
 8003842:	4a3f      	ldr	r2, [pc, #252]	; (8003940 <_svfiprintf_r+0x1d4>)
 8003844:	1a80      	subs	r0, r0, r2
 8003846:	fa0b f000 	lsl.w	r0, fp, r0
 800384a:	4318      	orrs	r0, r3
 800384c:	9004      	str	r0, [sp, #16]
 800384e:	463c      	mov	r4, r7
 8003850:	e7d3      	b.n	80037fa <_svfiprintf_r+0x8e>
 8003852:	9a03      	ldr	r2, [sp, #12]
 8003854:	1d11      	adds	r1, r2, #4
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	9103      	str	r1, [sp, #12]
 800385a:	2a00      	cmp	r2, #0
 800385c:	db01      	blt.n	8003862 <_svfiprintf_r+0xf6>
 800385e:	9207      	str	r2, [sp, #28]
 8003860:	e004      	b.n	800386c <_svfiprintf_r+0x100>
 8003862:	4252      	negs	r2, r2
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	9207      	str	r2, [sp, #28]
 800386a:	9304      	str	r3, [sp, #16]
 800386c:	783b      	ldrb	r3, [r7, #0]
 800386e:	2b2e      	cmp	r3, #46	; 0x2e
 8003870:	d10e      	bne.n	8003890 <_svfiprintf_r+0x124>
 8003872:	787b      	ldrb	r3, [r7, #1]
 8003874:	2b2a      	cmp	r3, #42	; 0x2a
 8003876:	f107 0101 	add.w	r1, r7, #1
 800387a:	d132      	bne.n	80038e2 <_svfiprintf_r+0x176>
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	9203      	str	r2, [sp, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	bfb8      	it	lt
 8003888:	f04f 33ff 	movlt.w	r3, #4294967295
 800388c:	3702      	adds	r7, #2
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	4c2c      	ldr	r4, [pc, #176]	; (8003944 <_svfiprintf_r+0x1d8>)
 8003892:	7839      	ldrb	r1, [r7, #0]
 8003894:	2203      	movs	r2, #3
 8003896:	4620      	mov	r0, r4
 8003898:	f7fc fc9a 	bl	80001d0 <memchr>
 800389c:	b138      	cbz	r0, 80038ae <_svfiprintf_r+0x142>
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	1b00      	subs	r0, r0, r4
 80038a2:	fa03 f000 	lsl.w	r0, r3, r0
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	4303      	orrs	r3, r0
 80038aa:	9304      	str	r3, [sp, #16]
 80038ac:	3701      	adds	r7, #1
 80038ae:	7839      	ldrb	r1, [r7, #0]
 80038b0:	4825      	ldr	r0, [pc, #148]	; (8003948 <_svfiprintf_r+0x1dc>)
 80038b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038b6:	2206      	movs	r2, #6
 80038b8:	1c7e      	adds	r6, r7, #1
 80038ba:	f7fc fc89 	bl	80001d0 <memchr>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d035      	beq.n	800392e <_svfiprintf_r+0x1c2>
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <_svfiprintf_r+0x1e0>)
 80038c4:	b9fb      	cbnz	r3, 8003906 <_svfiprintf_r+0x19a>
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	3307      	adds	r3, #7
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	3308      	adds	r3, #8
 80038d0:	9303      	str	r3, [sp, #12]
 80038d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d4:	444b      	add	r3, r9
 80038d6:	9309      	str	r3, [sp, #36]	; 0x24
 80038d8:	e76c      	b.n	80037b4 <_svfiprintf_r+0x48>
 80038da:	fb00 3202 	mla	r2, r0, r2, r3
 80038de:	2101      	movs	r1, #1
 80038e0:	e7a3      	b.n	800382a <_svfiprintf_r+0xbe>
 80038e2:	2300      	movs	r3, #0
 80038e4:	9305      	str	r3, [sp, #20]
 80038e6:	4618      	mov	r0, r3
 80038e8:	240a      	movs	r4, #10
 80038ea:	460f      	mov	r7, r1
 80038ec:	3101      	adds	r1, #1
 80038ee:	783a      	ldrb	r2, [r7, #0]
 80038f0:	3a30      	subs	r2, #48	; 0x30
 80038f2:	2a09      	cmp	r2, #9
 80038f4:	d903      	bls.n	80038fe <_svfiprintf_r+0x192>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ca      	beq.n	8003890 <_svfiprintf_r+0x124>
 80038fa:	9005      	str	r0, [sp, #20]
 80038fc:	e7c8      	b.n	8003890 <_svfiprintf_r+0x124>
 80038fe:	fb04 2000 	mla	r0, r4, r0, r2
 8003902:	2301      	movs	r3, #1
 8003904:	e7f1      	b.n	80038ea <_svfiprintf_r+0x17e>
 8003906:	ab03      	add	r3, sp, #12
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	462a      	mov	r2, r5
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <_svfiprintf_r+0x1e4>)
 800390e:	a904      	add	r1, sp, #16
 8003910:	4640      	mov	r0, r8
 8003912:	f3af 8000 	nop.w
 8003916:	f1b0 3fff 	cmp.w	r0, #4294967295
 800391a:	4681      	mov	r9, r0
 800391c:	d1d9      	bne.n	80038d2 <_svfiprintf_r+0x166>
 800391e:	89ab      	ldrh	r3, [r5, #12]
 8003920:	065b      	lsls	r3, r3, #25
 8003922:	f53f af38 	bmi.w	8003796 <_svfiprintf_r+0x2a>
 8003926:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003928:	b01d      	add	sp, #116	; 0x74
 800392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392e:	ab03      	add	r3, sp, #12
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	462a      	mov	r2, r5
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <_svfiprintf_r+0x1e4>)
 8003936:	a904      	add	r1, sp, #16
 8003938:	4640      	mov	r0, r8
 800393a:	f000 f881 	bl	8003a40 <_printf_i>
 800393e:	e7ea      	b.n	8003916 <_svfiprintf_r+0x1aa>
 8003940:	08004171 	.word	0x08004171
 8003944:	08004177 	.word	0x08004177
 8003948:	0800417b 	.word	0x0800417b
 800394c:	00000000 	.word	0x00000000
 8003950:	080036b5 	.word	0x080036b5

08003954 <_printf_common>:
 8003954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003958:	4691      	mov	r9, r2
 800395a:	461f      	mov	r7, r3
 800395c:	688a      	ldr	r2, [r1, #8]
 800395e:	690b      	ldr	r3, [r1, #16]
 8003960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003964:	4293      	cmp	r3, r2
 8003966:	bfb8      	it	lt
 8003968:	4613      	movlt	r3, r2
 800396a:	f8c9 3000 	str.w	r3, [r9]
 800396e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003972:	4606      	mov	r6, r0
 8003974:	460c      	mov	r4, r1
 8003976:	b112      	cbz	r2, 800397e <_printf_common+0x2a>
 8003978:	3301      	adds	r3, #1
 800397a:	f8c9 3000 	str.w	r3, [r9]
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	0699      	lsls	r1, r3, #26
 8003982:	bf42      	ittt	mi
 8003984:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003988:	3302      	addmi	r3, #2
 800398a:	f8c9 3000 	strmi.w	r3, [r9]
 800398e:	6825      	ldr	r5, [r4, #0]
 8003990:	f015 0506 	ands.w	r5, r5, #6
 8003994:	d107      	bne.n	80039a6 <_printf_common+0x52>
 8003996:	f104 0a19 	add.w	sl, r4, #25
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	f8d9 2000 	ldr.w	r2, [r9]
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	429d      	cmp	r5, r3
 80039a4:	db29      	blt.n	80039fa <_printf_common+0xa6>
 80039a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	3300      	adds	r3, #0
 80039ae:	bf18      	it	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	0692      	lsls	r2, r2, #26
 80039b4:	d42e      	bmi.n	8003a14 <_printf_common+0xc0>
 80039b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ba:	4639      	mov	r1, r7
 80039bc:	4630      	mov	r0, r6
 80039be:	47c0      	blx	r8
 80039c0:	3001      	adds	r0, #1
 80039c2:	d021      	beq.n	8003a08 <_printf_common+0xb4>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	68e5      	ldr	r5, [r4, #12]
 80039c8:	f8d9 2000 	ldr.w	r2, [r9]
 80039cc:	f003 0306 	and.w	r3, r3, #6
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	bf08      	it	eq
 80039d4:	1aad      	subeq	r5, r5, r2
 80039d6:	68a3      	ldr	r3, [r4, #8]
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	bf0c      	ite	eq
 80039dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039e0:	2500      	movne	r5, #0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	bfc4      	itt	gt
 80039e6:	1a9b      	subgt	r3, r3, r2
 80039e8:	18ed      	addgt	r5, r5, r3
 80039ea:	f04f 0900 	mov.w	r9, #0
 80039ee:	341a      	adds	r4, #26
 80039f0:	454d      	cmp	r5, r9
 80039f2:	d11b      	bne.n	8003a2c <_printf_common+0xd8>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fa:	2301      	movs	r3, #1
 80039fc:	4652      	mov	r2, sl
 80039fe:	4639      	mov	r1, r7
 8003a00:	4630      	mov	r0, r6
 8003a02:	47c0      	blx	r8
 8003a04:	3001      	adds	r0, #1
 8003a06:	d103      	bne.n	8003a10 <_printf_common+0xbc>
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a10:	3501      	adds	r5, #1
 8003a12:	e7c2      	b.n	800399a <_printf_common+0x46>
 8003a14:	18e1      	adds	r1, r4, r3
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	2030      	movs	r0, #48	; 0x30
 8003a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a1e:	4422      	add	r2, r4
 8003a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a28:	3302      	adds	r3, #2
 8003a2a:	e7c4      	b.n	80039b6 <_printf_common+0x62>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4622      	mov	r2, r4
 8003a30:	4639      	mov	r1, r7
 8003a32:	4630      	mov	r0, r6
 8003a34:	47c0      	blx	r8
 8003a36:	3001      	adds	r0, #1
 8003a38:	d0e6      	beq.n	8003a08 <_printf_common+0xb4>
 8003a3a:	f109 0901 	add.w	r9, r9, #1
 8003a3e:	e7d7      	b.n	80039f0 <_printf_common+0x9c>

08003a40 <_printf_i>:
 8003a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a44:	4617      	mov	r7, r2
 8003a46:	7e0a      	ldrb	r2, [r1, #24]
 8003a48:	b085      	sub	sp, #20
 8003a4a:	2a6e      	cmp	r2, #110	; 0x6e
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	4606      	mov	r6, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a54:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003a58:	f000 80bc 	beq.w	8003bd4 <_printf_i+0x194>
 8003a5c:	d81a      	bhi.n	8003a94 <_printf_i+0x54>
 8003a5e:	2a63      	cmp	r2, #99	; 0x63
 8003a60:	d02e      	beq.n	8003ac0 <_printf_i+0x80>
 8003a62:	d80a      	bhi.n	8003a7a <_printf_i+0x3a>
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	f000 80c8 	beq.w	8003bfa <_printf_i+0x1ba>
 8003a6a:	2a58      	cmp	r2, #88	; 0x58
 8003a6c:	f000 808a 	beq.w	8003b84 <_printf_i+0x144>
 8003a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003a78:	e02a      	b.n	8003ad0 <_printf_i+0x90>
 8003a7a:	2a64      	cmp	r2, #100	; 0x64
 8003a7c:	d001      	beq.n	8003a82 <_printf_i+0x42>
 8003a7e:	2a69      	cmp	r2, #105	; 0x69
 8003a80:	d1f6      	bne.n	8003a70 <_printf_i+0x30>
 8003a82:	6821      	ldr	r1, [r4, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a8a:	d023      	beq.n	8003ad4 <_printf_i+0x94>
 8003a8c:	1d11      	adds	r1, r2, #4
 8003a8e:	6019      	str	r1, [r3, #0]
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	e027      	b.n	8003ae4 <_printf_i+0xa4>
 8003a94:	2a73      	cmp	r2, #115	; 0x73
 8003a96:	f000 80b4 	beq.w	8003c02 <_printf_i+0x1c2>
 8003a9a:	d808      	bhi.n	8003aae <_printf_i+0x6e>
 8003a9c:	2a6f      	cmp	r2, #111	; 0x6f
 8003a9e:	d02a      	beq.n	8003af6 <_printf_i+0xb6>
 8003aa0:	2a70      	cmp	r2, #112	; 0x70
 8003aa2:	d1e5      	bne.n	8003a70 <_printf_i+0x30>
 8003aa4:	680a      	ldr	r2, [r1, #0]
 8003aa6:	f042 0220 	orr.w	r2, r2, #32
 8003aaa:	600a      	str	r2, [r1, #0]
 8003aac:	e003      	b.n	8003ab6 <_printf_i+0x76>
 8003aae:	2a75      	cmp	r2, #117	; 0x75
 8003ab0:	d021      	beq.n	8003af6 <_printf_i+0xb6>
 8003ab2:	2a78      	cmp	r2, #120	; 0x78
 8003ab4:	d1dc      	bne.n	8003a70 <_printf_i+0x30>
 8003ab6:	2278      	movs	r2, #120	; 0x78
 8003ab8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003abc:	496e      	ldr	r1, [pc, #440]	; (8003c78 <_printf_i+0x238>)
 8003abe:	e064      	b.n	8003b8a <_printf_i+0x14a>
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ac6:	1d11      	adds	r1, r2, #4
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0a3      	b.n	8003c1c <_printf_i+0x1dc>
 8003ad4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ad8:	f102 0104 	add.w	r1, r2, #4
 8003adc:	6019      	str	r1, [r3, #0]
 8003ade:	d0d7      	beq.n	8003a90 <_printf_i+0x50>
 8003ae0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	da03      	bge.n	8003af0 <_printf_i+0xb0>
 8003ae8:	222d      	movs	r2, #45	; 0x2d
 8003aea:	425b      	negs	r3, r3
 8003aec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003af0:	4962      	ldr	r1, [pc, #392]	; (8003c7c <_printf_i+0x23c>)
 8003af2:	220a      	movs	r2, #10
 8003af4:	e017      	b.n	8003b26 <_printf_i+0xe6>
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003afe:	d003      	beq.n	8003b08 <_printf_i+0xc8>
 8003b00:	1d08      	adds	r0, r1, #4
 8003b02:	6018      	str	r0, [r3, #0]
 8003b04:	680b      	ldr	r3, [r1, #0]
 8003b06:	e006      	b.n	8003b16 <_printf_i+0xd6>
 8003b08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b0c:	f101 0004 	add.w	r0, r1, #4
 8003b10:	6018      	str	r0, [r3, #0]
 8003b12:	d0f7      	beq.n	8003b04 <_printf_i+0xc4>
 8003b14:	880b      	ldrh	r3, [r1, #0]
 8003b16:	4959      	ldr	r1, [pc, #356]	; (8003c7c <_printf_i+0x23c>)
 8003b18:	2a6f      	cmp	r2, #111	; 0x6f
 8003b1a:	bf14      	ite	ne
 8003b1c:	220a      	movne	r2, #10
 8003b1e:	2208      	moveq	r2, #8
 8003b20:	2000      	movs	r0, #0
 8003b22:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003b26:	6865      	ldr	r5, [r4, #4]
 8003b28:	60a5      	str	r5, [r4, #8]
 8003b2a:	2d00      	cmp	r5, #0
 8003b2c:	f2c0 809c 	blt.w	8003c68 <_printf_i+0x228>
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	f020 0004 	bic.w	r0, r0, #4
 8003b36:	6020      	str	r0, [r4, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d13f      	bne.n	8003bbc <_printf_i+0x17c>
 8003b3c:	2d00      	cmp	r5, #0
 8003b3e:	f040 8095 	bne.w	8003c6c <_printf_i+0x22c>
 8003b42:	4675      	mov	r5, lr
 8003b44:	2a08      	cmp	r2, #8
 8003b46:	d10b      	bne.n	8003b60 <_printf_i+0x120>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	07da      	lsls	r2, r3, #31
 8003b4c:	d508      	bpl.n	8003b60 <_printf_i+0x120>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	6862      	ldr	r2, [r4, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	bfde      	ittt	le
 8003b56:	2330      	movle	r3, #48	; 0x30
 8003b58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b60:	ebae 0305 	sub.w	r3, lr, r5
 8003b64:	6123      	str	r3, [r4, #16]
 8003b66:	f8cd 8000 	str.w	r8, [sp]
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	aa03      	add	r2, sp, #12
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4630      	mov	r0, r6
 8003b72:	f7ff feef 	bl	8003954 <_printf_common>
 8003b76:	3001      	adds	r0, #1
 8003b78:	d155      	bne.n	8003c26 <_printf_i+0x1e6>
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7e:	b005      	add	sp, #20
 8003b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b84:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003b88:	493c      	ldr	r1, [pc, #240]	; (8003c7c <_printf_i+0x23c>)
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b92:	f100 0504 	add.w	r5, r0, #4
 8003b96:	601d      	str	r5, [r3, #0]
 8003b98:	d001      	beq.n	8003b9e <_printf_i+0x15e>
 8003b9a:	6803      	ldr	r3, [r0, #0]
 8003b9c:	e002      	b.n	8003ba4 <_printf_i+0x164>
 8003b9e:	0655      	lsls	r5, r2, #25
 8003ba0:	d5fb      	bpl.n	8003b9a <_printf_i+0x15a>
 8003ba2:	8803      	ldrh	r3, [r0, #0]
 8003ba4:	07d0      	lsls	r0, r2, #31
 8003ba6:	bf44      	itt	mi
 8003ba8:	f042 0220 	orrmi.w	r2, r2, #32
 8003bac:	6022      	strmi	r2, [r4, #0]
 8003bae:	b91b      	cbnz	r3, 8003bb8 <_printf_i+0x178>
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	f022 0220 	bic.w	r2, r2, #32
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	e7b1      	b.n	8003b20 <_printf_i+0xe0>
 8003bbc:	4675      	mov	r5, lr
 8003bbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8003bc2:	fb02 3310 	mls	r3, r2, r0, r3
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1f5      	bne.n	8003bbe <_printf_i+0x17e>
 8003bd2:	e7b7      	b.n	8003b44 <_printf_i+0x104>
 8003bd4:	6808      	ldr	r0, [r1, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	6949      	ldr	r1, [r1, #20]
 8003bda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bde:	d004      	beq.n	8003bea <_printf_i+0x1aa>
 8003be0:	1d10      	adds	r0, r2, #4
 8003be2:	6018      	str	r0, [r3, #0]
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	6019      	str	r1, [r3, #0]
 8003be8:	e007      	b.n	8003bfa <_printf_i+0x1ba>
 8003bea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bee:	f102 0004 	add.w	r0, r2, #4
 8003bf2:	6018      	str	r0, [r3, #0]
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	d0f6      	beq.n	8003be6 <_printf_i+0x1a6>
 8003bf8:	8019      	strh	r1, [r3, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6123      	str	r3, [r4, #16]
 8003bfe:	4675      	mov	r5, lr
 8003c00:	e7b1      	b.n	8003b66 <_printf_i+0x126>
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	1d11      	adds	r1, r2, #4
 8003c06:	6019      	str	r1, [r3, #0]
 8003c08:	6815      	ldr	r5, [r2, #0]
 8003c0a:	6862      	ldr	r2, [r4, #4]
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7fc fade 	bl	80001d0 <memchr>
 8003c14:	b108      	cbz	r0, 8003c1a <_printf_i+0x1da>
 8003c16:	1b40      	subs	r0, r0, r5
 8003c18:	6060      	str	r0, [r4, #4]
 8003c1a:	6863      	ldr	r3, [r4, #4]
 8003c1c:	6123      	str	r3, [r4, #16]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c24:	e79f      	b.n	8003b66 <_printf_i+0x126>
 8003c26:	6923      	ldr	r3, [r4, #16]
 8003c28:	462a      	mov	r2, r5
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	47c0      	blx	r8
 8003c30:	3001      	adds	r0, #1
 8003c32:	d0a2      	beq.n	8003b7a <_printf_i+0x13a>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	079b      	lsls	r3, r3, #30
 8003c38:	d507      	bpl.n	8003c4a <_printf_i+0x20a>
 8003c3a:	2500      	movs	r5, #0
 8003c3c:	f104 0919 	add.w	r9, r4, #25
 8003c40:	68e3      	ldr	r3, [r4, #12]
 8003c42:	9a03      	ldr	r2, [sp, #12]
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	429d      	cmp	r5, r3
 8003c48:	db05      	blt.n	8003c56 <_printf_i+0x216>
 8003c4a:	68e0      	ldr	r0, [r4, #12]
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	4298      	cmp	r0, r3
 8003c50:	bfb8      	it	lt
 8003c52:	4618      	movlt	r0, r3
 8003c54:	e793      	b.n	8003b7e <_printf_i+0x13e>
 8003c56:	2301      	movs	r3, #1
 8003c58:	464a      	mov	r2, r9
 8003c5a:	4639      	mov	r1, r7
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	47c0      	blx	r8
 8003c60:	3001      	adds	r0, #1
 8003c62:	d08a      	beq.n	8003b7a <_printf_i+0x13a>
 8003c64:	3501      	adds	r5, #1
 8003c66:	e7eb      	b.n	8003c40 <_printf_i+0x200>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1a7      	bne.n	8003bbc <_printf_i+0x17c>
 8003c6c:	780b      	ldrb	r3, [r1, #0]
 8003c6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c76:	e765      	b.n	8003b44 <_printf_i+0x104>
 8003c78:	08004193 	.word	0x08004193
 8003c7c:	08004182 	.word	0x08004182

08003c80 <memcpy>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	1e43      	subs	r3, r0, #1
 8003c84:	440a      	add	r2, r1
 8003c86:	4291      	cmp	r1, r2
 8003c88:	d100      	bne.n	8003c8c <memcpy+0xc>
 8003c8a:	bd10      	pop	{r4, pc}
 8003c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c94:	e7f7      	b.n	8003c86 <memcpy+0x6>

08003c96 <memmove>:
 8003c96:	4288      	cmp	r0, r1
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	eb01 0302 	add.w	r3, r1, r2
 8003c9e:	d803      	bhi.n	8003ca8 <memmove+0x12>
 8003ca0:	1e42      	subs	r2, r0, #1
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	d10c      	bne.n	8003cc0 <memmove+0x2a>
 8003ca6:	bd10      	pop	{r4, pc}
 8003ca8:	4298      	cmp	r0, r3
 8003caa:	d2f9      	bcs.n	8003ca0 <memmove+0xa>
 8003cac:	1881      	adds	r1, r0, r2
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	42d3      	cmn	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memmove+0x20>
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003cbe:	e7f7      	b.n	8003cb0 <memmove+0x1a>
 8003cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003cc8:	e7eb      	b.n	8003ca2 <memmove+0xc>
	...

08003ccc <_free_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4605      	mov	r5, r0
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d045      	beq.n	8003d60 <_free_r+0x94>
 8003cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd8:	1f0c      	subs	r4, r1, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bfb8      	it	lt
 8003cde:	18e4      	addlt	r4, r4, r3
 8003ce0:	f000 f8d6 	bl	8003e90 <__malloc_lock>
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <_free_r+0x98>)
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	4610      	mov	r0, r2
 8003cea:	b933      	cbnz	r3, 8003cfa <_free_r+0x2e>
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	6014      	str	r4, [r2, #0]
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cf6:	f000 b8cc 	b.w	8003e92 <__malloc_unlock>
 8003cfa:	42a3      	cmp	r3, r4
 8003cfc:	d90c      	bls.n	8003d18 <_free_r+0x4c>
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	1862      	adds	r2, r4, r1
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bf04      	itt	eq
 8003d06:	681a      	ldreq	r2, [r3, #0]
 8003d08:	685b      	ldreq	r3, [r3, #4]
 8003d0a:	6063      	str	r3, [r4, #4]
 8003d0c:	bf04      	itt	eq
 8003d0e:	1852      	addeq	r2, r2, r1
 8003d10:	6022      	streq	r2, [r4, #0]
 8003d12:	6004      	str	r4, [r0, #0]
 8003d14:	e7ec      	b.n	8003cf0 <_free_r+0x24>
 8003d16:	4613      	mov	r3, r2
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	b10a      	cbz	r2, 8003d20 <_free_r+0x54>
 8003d1c:	42a2      	cmp	r2, r4
 8003d1e:	d9fa      	bls.n	8003d16 <_free_r+0x4a>
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	1858      	adds	r0, r3, r1
 8003d24:	42a0      	cmp	r0, r4
 8003d26:	d10b      	bne.n	8003d40 <_free_r+0x74>
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	4401      	add	r1, r0
 8003d2c:	1858      	adds	r0, r3, r1
 8003d2e:	4282      	cmp	r2, r0
 8003d30:	6019      	str	r1, [r3, #0]
 8003d32:	d1dd      	bne.n	8003cf0 <_free_r+0x24>
 8003d34:	6810      	ldr	r0, [r2, #0]
 8003d36:	6852      	ldr	r2, [r2, #4]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	4401      	add	r1, r0
 8003d3c:	6019      	str	r1, [r3, #0]
 8003d3e:	e7d7      	b.n	8003cf0 <_free_r+0x24>
 8003d40:	d902      	bls.n	8003d48 <_free_r+0x7c>
 8003d42:	230c      	movs	r3, #12
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	e7d3      	b.n	8003cf0 <_free_r+0x24>
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	1821      	adds	r1, r4, r0
 8003d4c:	428a      	cmp	r2, r1
 8003d4e:	bf04      	itt	eq
 8003d50:	6811      	ldreq	r1, [r2, #0]
 8003d52:	6852      	ldreq	r2, [r2, #4]
 8003d54:	6062      	str	r2, [r4, #4]
 8003d56:	bf04      	itt	eq
 8003d58:	1809      	addeq	r1, r1, r0
 8003d5a:	6021      	streq	r1, [r4, #0]
 8003d5c:	605c      	str	r4, [r3, #4]
 8003d5e:	e7c7      	b.n	8003cf0 <_free_r+0x24>
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	200001d4 	.word	0x200001d4

08003d68 <_malloc_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	1ccd      	adds	r5, r1, #3
 8003d6c:	f025 0503 	bic.w	r5, r5, #3
 8003d70:	3508      	adds	r5, #8
 8003d72:	2d0c      	cmp	r5, #12
 8003d74:	bf38      	it	cc
 8003d76:	250c      	movcc	r5, #12
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	db01      	blt.n	8003d82 <_malloc_r+0x1a>
 8003d7e:	42a9      	cmp	r1, r5
 8003d80:	d903      	bls.n	8003d8a <_malloc_r+0x22>
 8003d82:	230c      	movs	r3, #12
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	2000      	movs	r0, #0
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	f000 f881 	bl	8003e90 <__malloc_lock>
 8003d8e:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <_malloc_r+0xb4>)
 8003d90:	6814      	ldr	r4, [r2, #0]
 8003d92:	4621      	mov	r1, r4
 8003d94:	b991      	cbnz	r1, 8003dbc <_malloc_r+0x54>
 8003d96:	4c22      	ldr	r4, [pc, #136]	; (8003e20 <_malloc_r+0xb8>)
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	b91b      	cbnz	r3, 8003da4 <_malloc_r+0x3c>
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f867 	bl	8003e70 <_sbrk_r>
 8003da2:	6020      	str	r0, [r4, #0]
 8003da4:	4629      	mov	r1, r5
 8003da6:	4630      	mov	r0, r6
 8003da8:	f000 f862 	bl	8003e70 <_sbrk_r>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d126      	bne.n	8003dfe <_malloc_r+0x96>
 8003db0:	230c      	movs	r3, #12
 8003db2:	6033      	str	r3, [r6, #0]
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 f86c 	bl	8003e92 <__malloc_unlock>
 8003dba:	e7e4      	b.n	8003d86 <_malloc_r+0x1e>
 8003dbc:	680b      	ldr	r3, [r1, #0]
 8003dbe:	1b5b      	subs	r3, r3, r5
 8003dc0:	d41a      	bmi.n	8003df8 <_malloc_r+0x90>
 8003dc2:	2b0b      	cmp	r3, #11
 8003dc4:	d90f      	bls.n	8003de6 <_malloc_r+0x7e>
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	50cd      	str	r5, [r1, r3]
 8003dca:	18cc      	adds	r4, r1, r3
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f000 f860 	bl	8003e92 <__malloc_unlock>
 8003dd2:	f104 000b 	add.w	r0, r4, #11
 8003dd6:	1d23      	adds	r3, r4, #4
 8003dd8:	f020 0007 	bic.w	r0, r0, #7
 8003ddc:	1ac3      	subs	r3, r0, r3
 8003dde:	d01b      	beq.n	8003e18 <_malloc_r+0xb0>
 8003de0:	425a      	negs	r2, r3
 8003de2:	50e2      	str	r2, [r4, r3]
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	428c      	cmp	r4, r1
 8003de8:	bf0d      	iteet	eq
 8003dea:	6863      	ldreq	r3, [r4, #4]
 8003dec:	684b      	ldrne	r3, [r1, #4]
 8003dee:	6063      	strne	r3, [r4, #4]
 8003df0:	6013      	streq	r3, [r2, #0]
 8003df2:	bf18      	it	ne
 8003df4:	460c      	movne	r4, r1
 8003df6:	e7e9      	b.n	8003dcc <_malloc_r+0x64>
 8003df8:	460c      	mov	r4, r1
 8003dfa:	6849      	ldr	r1, [r1, #4]
 8003dfc:	e7ca      	b.n	8003d94 <_malloc_r+0x2c>
 8003dfe:	1cc4      	adds	r4, r0, #3
 8003e00:	f024 0403 	bic.w	r4, r4, #3
 8003e04:	42a0      	cmp	r0, r4
 8003e06:	d005      	beq.n	8003e14 <_malloc_r+0xac>
 8003e08:	1a21      	subs	r1, r4, r0
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f000 f830 	bl	8003e70 <_sbrk_r>
 8003e10:	3001      	adds	r0, #1
 8003e12:	d0cd      	beq.n	8003db0 <_malloc_r+0x48>
 8003e14:	6025      	str	r5, [r4, #0]
 8003e16:	e7d9      	b.n	8003dcc <_malloc_r+0x64>
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200001d4 	.word	0x200001d4
 8003e20:	200001d8 	.word	0x200001d8

08003e24 <_realloc_r>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	4607      	mov	r7, r0
 8003e28:	4614      	mov	r4, r2
 8003e2a:	460e      	mov	r6, r1
 8003e2c:	b921      	cbnz	r1, 8003e38 <_realloc_r+0x14>
 8003e2e:	4611      	mov	r1, r2
 8003e30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e34:	f7ff bf98 	b.w	8003d68 <_malloc_r>
 8003e38:	b922      	cbnz	r2, 8003e44 <_realloc_r+0x20>
 8003e3a:	f7ff ff47 	bl	8003ccc <_free_r>
 8003e3e:	4625      	mov	r5, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e44:	f000 f826 	bl	8003e94 <_malloc_usable_size_r>
 8003e48:	4284      	cmp	r4, r0
 8003e4a:	d90f      	bls.n	8003e6c <_realloc_r+0x48>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f7ff ff8a 	bl	8003d68 <_malloc_r>
 8003e54:	4605      	mov	r5, r0
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d0f2      	beq.n	8003e40 <_realloc_r+0x1c>
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	f7ff ff0f 	bl	8003c80 <memcpy>
 8003e62:	4631      	mov	r1, r6
 8003e64:	4638      	mov	r0, r7
 8003e66:	f7ff ff31 	bl	8003ccc <_free_r>
 8003e6a:	e7e9      	b.n	8003e40 <_realloc_r+0x1c>
 8003e6c:	4635      	mov	r5, r6
 8003e6e:	e7e7      	b.n	8003e40 <_realloc_r+0x1c>

08003e70 <_sbrk_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4c06      	ldr	r4, [pc, #24]	; (8003e8c <_sbrk_r+0x1c>)
 8003e74:	2300      	movs	r3, #0
 8003e76:	4605      	mov	r5, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	f000 f814 	bl	8003ea8 <_sbrk>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_sbrk_r+0x1a>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_sbrk_r+0x1a>
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000334 	.word	0x20000334

08003e90 <__malloc_lock>:
 8003e90:	4770      	bx	lr

08003e92 <__malloc_unlock>:
 8003e92:	4770      	bx	lr

08003e94 <_malloc_usable_size_r>:
 8003e94:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e9e:	bfbc      	itt	lt
 8003ea0:	580b      	ldrlt	r3, [r1, r0]
 8003ea2:	18c0      	addlt	r0, r0, r3
 8003ea4:	4770      	bx	lr
	...

08003ea8 <_sbrk>:
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <_sbrk+0x14>)
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	4602      	mov	r2, r0
 8003eae:	b909      	cbnz	r1, 8003eb4 <_sbrk+0xc>
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <_sbrk+0x18>)
 8003eb2:	6019      	str	r1, [r3, #0]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	4402      	add	r2, r0
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	4770      	bx	lr
 8003ebc:	200001dc 	.word	0x200001dc
 8003ec0:	20000338 	.word	0x20000338

08003ec4 <_init>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr

08003ed0 <_fini>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr
